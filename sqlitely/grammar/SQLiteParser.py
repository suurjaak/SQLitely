# Generated from SQLite.g4 by ANTLR 4.8
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u00a0\u06ab\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\3\2\3\2\7\2\u00a9\n\2\f\2\16\2\u00ac\13\2\3")
        buf.write(u"\2\3\2\3\3\3\3\3\4\7\4\u00b3\n\4\f\4\16\4\u00b6\13\4")
        buf.write(u"\3\4\3\4\6\4\u00ba\n\4\r\4\16\4\u00bb\3\4\7\4\u00bf\n")
        buf.write(u"\4\f\4\16\4\u00c2\13\4\3\4\7\4\u00c5\n\4\f\4\16\4\u00c8")
        buf.write(u"\13\4\3\5\3\5\3\5\5\5\u00cd\n\5\5\5\u00cf\n\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\5\5\u00ef\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u00f6")
        buf.write(u"\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00fe\n\6\3\6\5\6\u0101")
        buf.write(u"\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010a\n\7\3\b\3")
        buf.write(u"\b\5\b\u010e\n\b\3\b\3\b\3\b\3\b\3\t\3\t\5\t\u0116\n")
        buf.write(u"\t\3\t\3\t\5\t\u011a\n\t\5\t\u011c\n\t\3\n\3\n\3\n\5")
        buf.write(u"\n\u0121\n\n\5\n\u0123\n\n\3\13\5\13\u0126\n\13\3\13")
        buf.write(u"\3\13\3\13\5\13\u012b\n\13\3\13\3\13\5\13\u012f\n\13")
        buf.write(u"\3\13\6\13\u0132\n\13\r\13\16\13\u0133\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\7\13\u013b\n\13\f\13\16\13\u013e\13\13\5\13")
        buf.write(u"\u0140\n\13\3\13\3\13\3\13\3\13\5\13\u0146\n\13\5\13")
        buf.write(u"\u0148\n\13\3\f\3\f\5\f\u014c\n\f\3\f\3\f\3\f\3\f\5\f")
        buf.write(u"\u0152\n\f\3\f\3\f\3\f\5\f\u0157\n\f\3\f\3\f\3\f\3\f")
        buf.write(u"\3\f\3\f\3\f\7\f\u0160\n\f\f\f\16\f\u0163\13\f\3\f\3")
        buf.write(u"\f\3\f\5\f\u0168\n\f\3\r\3\r\5\r\u016c\n\r\3\r\3\r\3")
        buf.write(u"\r\3\r\5\r\u0172\n\r\3\r\3\r\3\r\5\r\u0177\n\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\7\r\u017e\n\r\f\r\16\r\u0181\13\r\3\r")
        buf.write(u"\3\r\7\r\u0185\n\r\f\r\16\r\u0188\13\r\3\r\3\r\3\r\5")
        buf.write(u"\r\u018d\n\r\3\r\3\r\5\r\u0191\n\r\3\16\3\16\5\16\u0195")
        buf.write(u"\n\16\3\16\3\16\3\16\3\16\5\16\u019b\n\16\3\16\3\16\3")
        buf.write(u"\16\5\16\u01a0\n\16\3\16\3\16\3\16\3\16\3\16\5\16\u01a7")
        buf.write(u"\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u01b0\n")
        buf.write(u"\16\f\16\16\16\u01b3\13\16\5\16\u01b5\n\16\5\16\u01b7")
        buf.write(u"\n\16\3\16\3\16\3\16\3\16\5\16\u01bd\n\16\3\16\3\16\3")
        buf.write(u"\16\3\16\5\16\u01c3\n\16\3\16\3\16\5\16\u01c7\n\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\5\16\u01ce\n\16\3\16\3\16\6\16")
        buf.write(u"\u01d2\n\16\r\16\16\16\u01d3\3\16\3\16\3\17\3\17\5\17")
        buf.write(u"\u01da\n\17\3\17\3\17\3\17\3\17\5\17\u01e0\n\17\3\17")
        buf.write(u"\3\17\3\17\5\17\u01e5\n\17\3\17\3\17\3\17\3\17\3\17\7")
        buf.write(u"\17\u01ec\n\17\f\17\16\17\u01ef\13\17\3\17\3\17\5\17")
        buf.write(u"\u01f3\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\5\20\u01fe\n\20\3\20\3\20\3\20\5\20\u0203\n\20\3")
        buf.write(u"\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u020c\n\20\f\20")
        buf.write(u"\16\20\u020f\13\20\3\20\3\20\5\20\u0213\n\20\3\21\5\21")
        buf.write(u"\u0216\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u021d\n\21")
        buf.write(u"\3\22\5\22\u0220\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u0227")
        buf.write(u"\n\22\3\22\3\22\3\22\3\22\3\22\7\22\u022e\n\22\f\22\16")
        buf.write(u"\22\u0231\13\22\5\22\u0233\n\22\3\22\3\22\3\22\3\22\5")
        buf.write(u"\22\u0239\n\22\5\22\u023b\n\22\3\23\3\23\5\23\u023f\n")
        buf.write(u"\23\3\23\3\23\3\24\3\24\3\24\3\24\5\24\u0247\n\24\3\24")
        buf.write(u"\3\24\3\24\5\24\u024c\n\24\3\24\3\24\3\25\3\25\3\25\3")
        buf.write(u"\25\5\25\u0254\n\25\3\25\3\25\3\25\5\25\u0259\n\25\3")
        buf.write(u"\25\3\25\3\26\3\26\3\26\3\26\5\26\u0261\n\26\3\26\3\26")
        buf.write(u"\3\26\5\26\u0266\n\26\3\26\3\26\3\27\3\27\3\27\3\27\5")
        buf.write(u"\27\u026e\n\27\3\27\3\27\3\27\5\27\u0273\n\27\3\27\3")
        buf.write(u"\27\3\30\5\30\u0278\n\30\3\30\3\30\3\30\3\30\7\30\u027e")
        buf.write(u"\n\30\f\30\16\30\u0281\13\30\3\30\3\30\3\30\3\30\3\30")
        buf.write(u"\7\30\u0288\n\30\f\30\16\30\u028b\13\30\5\30\u028d\n")
        buf.write(u"\30\3\30\3\30\3\30\3\30\5\30\u0293\n\30\5\30\u0295\n")
        buf.write(u"\30\3\31\5\31\u0298\n\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\5\31\u02ab\n\31\3\31\3\31\3\31\3\31\5\31\u02b1\n")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\7\31\u02b8\n\31\f\31\16")
        buf.write(u"\31\u02bb\13\31\3\31\3\31\5\31\u02bf\n\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\7\31\u02c6\n\31\f\31\16\31\u02c9\13\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u02d1\n\31\f\31\16")
        buf.write(u"\31\u02d4\13\31\3\31\3\31\7\31\u02d8\n\31\f\31\16\31")
        buf.write(u"\u02db\13\31\3\31\3\31\3\31\5\31\u02e0\n\31\3\32\3\32")
        buf.write(u"\3\32\3\32\5\32\u02e6\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\5\32\u02ef\n\32\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write(u"\u02f6\n\33\3\33\3\33\5\33\u02fa\n\33\5\33\u02fc\n\33")
        buf.write(u"\3\34\3\34\5\34\u0300\n\34\3\34\3\34\3\35\3\35\3\35\5")
        buf.write(u"\35\u0307\n\35\5\35\u0309\n\35\3\35\3\35\5\35\u030d\n")
        buf.write(u"\35\3\35\5\35\u0310\n\35\3\36\3\36\3\36\3\37\5\37\u0316")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u031e\n\37\f")
        buf.write(u"\37\16\37\u0321\13\37\5\37\u0323\n\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u0329\n\37\5\37\u032b\n\37\3 \5 \u032e\n ")
        buf.write(u"\3 \3 \3 \3 \7 \u0334\n \f \16 \u0337\13 \3 \3 \3 \3")
        buf.write(u" \3 \7 \u033e\n \f \16 \u0341\13 \5 \u0343\n \3 \3 \3")
        buf.write(u" \3 \5 \u0349\n \5 \u034b\n \3!\3!\5!\u034f\n!\3!\3!")
        buf.write(u"\3!\7!\u0354\n!\f!\16!\u0357\13!\3!\3!\3!\3!\7!\u035d")
        buf.write(u"\n!\f!\16!\u0360\13!\3!\5!\u0363\n!\5!\u0365\n!\3!\3")
        buf.write(u"!\5!\u0369\n!\3!\3!\3!\3!\3!\7!\u0370\n!\f!\16!\u0373")
        buf.write(u"\13!\3!\3!\5!\u0377\n!\5!\u0379\n!\3!\3!\3!\3!\3!\7!")
        buf.write(u"\u0380\n!\f!\16!\u0383\13!\3!\3!\3!\3!\3!\3!\7!\u038b")
        buf.write(u"\n!\f!\16!\u038e\13!\3!\3!\7!\u0392\n!\f!\16!\u0395\13")
        buf.write(u"!\5!\u0397\n!\3\"\5\"\u039a\n\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write(u"\"\3\"\3\"\3\"\3\"\3\"\5\"\u03a7\n\"\3\"\3\"\3\"\3\"")
        buf.write(u"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u03b3\n\"\f\"\16\"\u03b6")
        buf.write(u"\13\"\3\"\3\"\5\"\u03ba\n\"\3#\5#\u03bd\n#\3#\3#\3#\3")
        buf.write(u"#\3#\3#\3#\3#\3#\3#\3#\5#\u03ca\n#\3#\3#\3#\3#\3#\3#")
        buf.write(u"\3#\3#\3#\3#\7#\u03d6\n#\f#\16#\u03d9\13#\3#\3#\5#\u03dd")
        buf.write(u"\n#\3#\3#\3#\3#\3#\7#\u03e4\n#\f#\16#\u03e7\13#\5#\u03e9")
        buf.write(u"\n#\3#\3#\3#\3#\5#\u03ef\n#\5#\u03f1\n#\3$\3$\3%\3%\5")
        buf.write(u"%\u03f7\n%\3%\7%\u03fa\n%\f%\16%\u03fd\13%\3&\6&\u0400")
        buf.write(u"\n&\r&\16&\u0401\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u040e")
        buf.write(u"\n&\3\'\3\'\3\'\5\'\u0413\n\'\3\'\3\'\5\'\u0417\n\'\3")
        buf.write(u"\'\5\'\u041a\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write(u"\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u042c\n\'\3\'\3\'\3")
        buf.write(u"\'\5\'\u0431\n\'\3(\3(\3(\5(\u0436\n(\3)\3)\3)\3)\3)")
        buf.write(u"\3)\5)\u043e\n)\3)\3)\3)\5)\u0443\n)\3)\3)\3)\3)\3)\3")
        buf.write(u")\3)\5)\u044c\n)\3)\3)\3)\7)\u0451\n)\f)\16)\u0454\13")
        buf.write(u")\3)\5)\u0457\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write(u"\3)\3)\5)\u0467\n)\3)\5)\u046a\n)\3)\3)\3)\3)\3)\3)\5")
        buf.write(u")\u0472\n)\3)\3)\3)\3)\3)\6)\u0479\n)\r)\16)\u047a\3")
        buf.write(u")\3)\5)\u047f\n)\3)\3)\3)\5)\u0484\n)\3)\3)\3)\3)\3)")
        buf.write(u"\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(u")\3)\3)\3)\3)\3)\5)\u04a2\n)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write(u"\3)\3)\5)\u04ae\n)\3)\3)\3)\5)\u04b3\n)\3)\3)\3)\3)\3")
        buf.write(u")\3)\3)\3)\3)\3)\5)\u04bf\n)\3)\3)\3)\3)\5)\u04c5\n)")
        buf.write(u"\3)\3)\3)\3)\3)\5)\u04cc\n)\3)\3)\5)\u04d0\n)\3)\3)\3")
        buf.write(u")\3)\3)\3)\7)\u04d8\n)\f)\16)\u04db\13)\5)\u04dd\n)\3")
        buf.write(u")\3)\3)\3)\5)\u04e3\n)\3)\5)\u04e6\n)\7)\u04e8\n)\f)")
        buf.write(u"\16)\u04eb\13)\3*\3*\3*\3*\3*\3*\7*\u04f3\n*\f*\16*\u04f6")
        buf.write(u"\13*\3*\3*\5*\u04fa\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*")
        buf.write(u"\5*\u0506\n*\3*\3*\5*\u050a\n*\7*\u050c\n*\f*\16*\u050f")
        buf.write(u"\13*\3*\5*\u0512\n*\3*\3*\3*\3*\3*\5*\u0519\n*\5*\u051b")
        buf.write(u"\n*\3+\3+\3+\3+\3+\3+\5+\u0523\n+\3+\3+\3,\3,\3,\5,\u052a")
        buf.write(u"\n,\3,\5,\u052d\n,\3-\3-\5-\u0531\n-\3-\3-\3-\5-\u0536")
        buf.write(u"\n-\3-\3-\3-\3-\7-\u053c\n-\f-\16-\u053f\13-\3-\3-\3")
        buf.write(u"-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\7-\u054f\n-\f-\16")
        buf.write(u"-\u0552\13-\3-\3-\3-\5-\u0557\n-\3.\3.\5.\u055b\n.\3")
        buf.write(u".\3.\3.\7.\u0560\n.\f.\16.\u0563\13.\3/\3/\3/\5/\u0568")
        buf.write(u"\n/\3/\3/\3/\3/\3/\3/\5/\u0570\n/\3\60\3\60\3\60\5\60")
        buf.write(u"\u0575\n\60\3\60\5\60\u0578\n\60\3\61\3\61\3\61\5\61")
        buf.write(u"\u057d\n\61\3\62\3\62\3\62\3\62\3\62\7\62\u0584\n\62")
        buf.write(u"\f\62\16\62\u0587\13\62\3\62\3\62\5\62\u058b\n\62\3\62")
        buf.write(u"\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write(u"\63\5\63\u0599\n\63\3\63\5\63\u059c\n\63\5\63\u059e\n")
        buf.write(u"\63\3\64\3\64\3\64\5\64\u05a3\n\64\3\64\3\64\5\64\u05a7")
        buf.write(u"\n\64\3\64\5\64\u05aa\n\64\3\64\3\64\3\64\3\64\3\64\5")
        buf.write(u"\64\u05b1\n\64\3\64\3\64\3\64\5\64\u05b6\n\64\3\64\3")
        buf.write(u"\64\3\64\3\64\3\64\7\64\u05bd\n\64\f\64\16\64\u05c0\13")
        buf.write(u"\64\5\64\u05c2\n\64\3\64\3\64\5\64\u05c6\n\64\3\64\5")
        buf.write(u"\64\u05c9\n\64\3\64\3\64\3\64\3\64\7\64\u05cf\n\64\f")
        buf.write(u"\64\16\64\u05d2\13\64\3\64\5\64\u05d5\n\64\3\64\3\64")
        buf.write(u"\5\64\u05d9\n\64\3\64\5\64\u05dc\n\64\3\64\3\64\3\64")
        buf.write(u"\3\64\5\64\u05e2\n\64\3\64\5\64\u05e5\n\64\5\64\u05e7")
        buf.write(u"\n\64\3\65\3\65\3\65\3\65\3\65\7\65\u05ee\n\65\f\65\16")
        buf.write(u"\65\u05f1\13\65\3\66\3\66\5\66\u05f5\n\66\3\66\3\66\5")
        buf.write(u"\66\u05f9\n\66\3\66\3\66\5\66\u05fd\n\66\3\66\5\66\u0600")
        buf.write(u"\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0609\n")
        buf.write(u"\67\f\67\16\67\u060c\13\67\3\67\3\67\5\67\u0610\n\67")
        buf.write(u"\38\38\58\u0614\n8\38\38\38\78\u0619\n8\f8\168\u061c")
        buf.write(u"\138\38\38\38\38\78\u0622\n8\f8\168\u0625\138\38\58\u0628")
        buf.write(u"\n8\58\u062a\n8\38\38\58\u062e\n8\38\38\38\38\38\78\u0635")
        buf.write(u"\n8\f8\168\u0638\138\38\38\58\u063c\n8\58\u063e\n8\3")
        buf.write(u"8\38\38\38\38\78\u0645\n8\f8\168\u0648\138\38\38\38\3")
        buf.write(u"8\38\38\78\u0650\n8\f8\168\u0653\138\38\38\78\u0657\n")
        buf.write(u"8\f8\168\u065a\138\58\u065c\n8\39\39\39\39\39\59\u0663")
        buf.write(u"\n9\3:\5:\u0666\n:\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\5>\u0672")
        buf.write(u"\n>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\3")
        buf.write(u"G\3G\3H\3H\3I\3I\3J\3J\3K\3K\3L\3L\3M\3M\3N\3N\3O\3O")
        buf.write(u"\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u069e\nQ\3R\3R\3S\3S\3S\3")
        buf.write(u"S\3S\3S\3S\5S\u06a9\nS\3S\4\u017f\u0401\3PT\2\4\6\b\n")
        buf.write(u"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:")
        buf.write(u"<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write(u"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write(u"\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\2\24\5\2<")
        buf.write(u"<GGTT\4\2\61\61DD\4\2\7\7ll\3\2\u0085\u0086\4\2\37\37")
        buf.write(u"@@\4\2$$>>\7\2\33\33JJSS||\177\177\4\2\t\t\16\17\3\2")
        buf.write(u"\n\13\3\2\20\23\3\2\24\27\6\2OOcceexx\4\2==\u008d\u008d")
        buf.write(u"\5\2\33\33JJ\177\177\6\2\668jj\u0099\u0099\u009b\u009c")
        buf.write(u"\4\2\n\fhh\4\2\u0098\u0098\u009b\u009b\3\2\33\u0096\2")
        buf.write(u"\u07b7\2\u00aa\3\2\2\2\4\u00af\3\2\2\2\6\u00b4\3\2\2")
        buf.write(u"\2\b\u00ce\3\2\2\2\n\u00f0\3\2\2\2\f\u0102\3\2\2\2\16")
        buf.write(u"\u010b\3\2\2\2\20\u0113\3\2\2\2\22\u011d\3\2\2\2\24\u0125")
        buf.write(u"\3\2\2\2\26\u0149\3\2\2\2\30\u0169\3\2\2\2\32\u0192\3")
        buf.write(u"\2\2\2\34\u01d7\3\2\2\2\36\u01f7\3\2\2\2 \u0215\3\2\2")
        buf.write(u"\2\"\u021f\3\2\2\2$\u023c\3\2\2\2&\u0242\3\2\2\2(\u024f")
        buf.write(u"\3\2\2\2*\u025c\3\2\2\2,\u0269\3\2\2\2.\u0277\3\2\2\2")
        buf.write(u"\60\u0297\3\2\2\2\62\u02e1\3\2\2\2\64\u02f0\3\2\2\2\66")
        buf.write(u"\u02fd\3\2\2\28\u0303\3\2\2\2:\u0311\3\2\2\2<\u0315\3")
        buf.write(u"\2\2\2>\u032d\3\2\2\2@\u0396\3\2\2\2B\u0399\3\2\2\2D")
        buf.write(u"\u03bc\3\2\2\2F\u03f2\3\2\2\2H\u03f4\3\2\2\2J\u03ff\3")
        buf.write(u"\2\2\2L\u0430\3\2\2\2N\u0435\3\2\2\2P\u0483\3\2\2\2R")
        buf.write(u"\u04ec\3\2\2\2T\u051c\3\2\2\2V\u0526\3\2\2\2X\u0530\3")
        buf.write(u"\2\2\2Z\u0558\3\2\2\2\\\u0567\3\2\2\2^\u0571\3\2\2\2")
        buf.write(u"`\u057c\3\2\2\2b\u057e\3\2\2\2d\u059d\3\2\2\2f\u05e6")
        buf.write(u"\3\2\2\2h\u05e8\3\2\2\2j\u05ff\3\2\2\2l\u060f\3\2\2\2")
        buf.write(u"n\u065b\3\2\2\2p\u0662\3\2\2\2r\u0665\3\2\2\2t\u0669")
        buf.write(u"\3\2\2\2v\u066b\3\2\2\2x\u066d\3\2\2\2z\u0671\3\2\2\2")
        buf.write(u"|\u0673\3\2\2\2~\u0675\3\2\2\2\u0080\u0677\3\2\2\2\u0082")
        buf.write(u"\u0679\3\2\2\2\u0084\u067b\3\2\2\2\u0086\u067d\3\2\2")
        buf.write(u"\2\u0088\u067f\3\2\2\2\u008a\u0681\3\2\2\2\u008c\u0683")
        buf.write(u"\3\2\2\2\u008e\u0685\3\2\2\2\u0090\u0687\3\2\2\2\u0092")
        buf.write(u"\u0689\3\2\2\2\u0094\u068b\3\2\2\2\u0096\u068d\3\2\2")
        buf.write(u"\2\u0098\u068f\3\2\2\2\u009a\u0691\3\2\2\2\u009c\u0693")
        buf.write(u"\3\2\2\2\u009e\u0695\3\2\2\2\u00a0\u069d\3\2\2\2\u00a2")
        buf.write(u"\u069f\3\2\2\2\u00a4\u06a8\3\2\2\2\u00a6\u00a9\5\6\4")
        buf.write(u"\2\u00a7\u00a9\5\4\3\2\u00a8\u00a6\3\2\2\2\u00a8\u00a7")
        buf.write(u"\3\2\2\2\u00a9\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa")
        buf.write(u"\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac\u00aa\3\2\2")
        buf.write(u"\2\u00ad\u00ae\7\2\2\3\u00ae\3\3\2\2\2\u00af\u00b0\7")
        buf.write(u"\u00a0\2\2\u00b0\5\3\2\2\2\u00b1\u00b3\7\3\2\2\u00b2")
        buf.write(u"\u00b1\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2")
        buf.write(u"\2\u00b4\u00b5\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4")
        buf.write(u"\3\2\2\2\u00b7\u00c0\5\b\5\2\u00b8\u00ba\7\3\2\2\u00b9")
        buf.write(u"\u00b8\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00b9\3\2\2")
        buf.write(u"\2\u00bb\u00bc\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf")
        buf.write(u"\5\b\5\2\u00be\u00b9\3\2\2\2\u00bf\u00c2\3\2\2\2\u00c0")
        buf.write(u"\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c6\3\2\2")
        buf.write(u"\2\u00c2\u00c0\3\2\2\2\u00c3\u00c5\7\3\2\2\u00c4\u00c3")
        buf.write(u"\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6")
        buf.write(u"\u00c7\3\2\2\2\u00c7\7\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9")
        buf.write(u"\u00cc\7I\2\2\u00ca\u00cb\7t\2\2\u00cb\u00cd\7q\2\2\u00cc")
        buf.write(u"\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\3\2\2")
        buf.write(u"\2\u00ce\u00c9\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00ee")
        buf.write(u"\3\2\2\2\u00d0\u00ef\5\n\6\2\u00d1\u00ef\5\f\7\2\u00d2")
        buf.write(u"\u00ef\5\16\b\2\u00d3\u00ef\5\20\t\2\u00d4\u00ef\5\22")
        buf.write(u"\n\2\u00d5\u00ef\5\24\13\2\u00d6\u00ef\5\26\f\2\u00d7")
        buf.write(u"\u00ef\5\30\r\2\u00d8\u00ef\5\32\16\2\u00d9\u00ef\5\34")
        buf.write(u"\17\2\u00da\u00ef\5\36\20\2\u00db\u00ef\5 \21\2\u00dc")
        buf.write(u"\u00ef\5\"\22\2\u00dd\u00ef\5$\23\2\u00de\u00ef\5&\24")
        buf.write(u"\2\u00df\u00ef\5(\25\2\u00e0\u00ef\5*\26\2\u00e1\u00ef")
        buf.write(u"\5,\27\2\u00e2\u00ef\5.\30\2\u00e3\u00ef\5\60\31\2\u00e4")
        buf.write(u"\u00ef\5\62\32\2\u00e5\u00ef\5\64\33\2\u00e6\u00ef\5")
        buf.write(u"\66\34\2\u00e7\u00ef\58\35\2\u00e8\u00ef\5:\36\2\u00e9")
        buf.write(u"\u00ef\5<\37\2\u00ea\u00ef\5> \2\u00eb\u00ef\5B\"\2\u00ec")
        buf.write(u"\u00ef\5D#\2\u00ed\u00ef\5F$\2\u00ee\u00d0\3\2\2\2\u00ee")
        buf.write(u"\u00d1\3\2\2\2\u00ee\u00d2\3\2\2\2\u00ee\u00d3\3\2\2")
        buf.write(u"\2\u00ee\u00d4\3\2\2\2\u00ee\u00d5\3\2\2\2\u00ee\u00d6")
        buf.write(u"\3\2\2\2\u00ee\u00d7\3\2\2\2\u00ee\u00d8\3\2\2\2\u00ee")
        buf.write(u"\u00d9\3\2\2\2\u00ee\u00da\3\2\2\2\u00ee\u00db\3\2\2")
        buf.write(u"\2\u00ee\u00dc\3\2\2\2\u00ee\u00dd\3\2\2\2\u00ee\u00de")
        buf.write(u"\3\2\2\2\u00ee\u00df\3\2\2\2\u00ee\u00e0\3\2\2\2\u00ee")
        buf.write(u"\u00e1\3\2\2\2\u00ee\u00e2\3\2\2\2\u00ee\u00e3\3\2\2")
        buf.write(u"\2\u00ee\u00e4\3\2\2\2\u00ee\u00e5\3\2\2\2\u00ee\u00e6")
        buf.write(u"\3\2\2\2\u00ee\u00e7\3\2\2\2\u00ee\u00e8\3\2\2\2\u00ee")
        buf.write(u"\u00e9\3\2\2\2\u00ee\u00ea\3\2\2\2\u00ee\u00eb\3\2\2")
        buf.write(u"\2\u00ee\u00ec\3\2\2\2\u00ee\u00ed\3\2\2\2\u00ef\t\3")
        buf.write(u"\2\2\2\u00f0\u00f1\7 \2\2\u00f1\u00f5\7\u0084\2\2\u00f2")
        buf.write(u"\u00f3\5\u0084C\2\u00f3\u00f4\7\4\2\2\u00f4\u00f6\3\2")
        buf.write(u"\2\2\u00f5\u00f2\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f7")
        buf.write(u"\3\2\2\2\u00f7\u0100\5\u0088E\2\u00f8\u00f9\7{\2\2\u00f9")
        buf.write(u"\u00fa\7\u0088\2\2\u00fa\u0101\5\u008cG\2\u00fb\u00fd")
        buf.write(u"\7\35\2\2\u00fc\u00fe\7\60\2\2\u00fd\u00fc\3\2\2\2\u00fd")
        buf.write(u"\u00fe\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\5H%\2")
        buf.write(u"\u0100\u00f8\3\2\2\2\u0100\u00fb\3\2\2\2\u0101\13\3\2")
        buf.write(u"\2\2\u0102\u0109\7!\2\2\u0103\u010a\5\u0084C\2\u0104")
        buf.write(u"\u010a\5\u008aF\2\u0105\u0106\5\u0084C\2\u0106\u0107")
        buf.write(u"\7\4\2\2\u0107\u0108\5\u008aF\2\u0108\u010a\3\2\2\2\u0109")
        buf.write(u"\u0103\3\2\2\2\u0109\u0104\3\2\2\2\u0109\u0105\3\2\2")
        buf.write(u"\2\u0109\u010a\3\2\2\2\u010a\r\3\2\2\2\u010b\u010d\7")
        buf.write(u"%\2\2\u010c\u010e\79\2\2\u010d\u010c\3\2\2\2\u010d\u010e")
        buf.write(u"\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\5P)\2\u0110")
        buf.write(u"\u0111\7#\2\2\u0111\u0112\5\u0084C\2\u0112\17\3\2\2\2")
        buf.write(u"\u0113\u0115\7(\2\2\u0114\u0116\t\2\2\2\u0115\u0114\3")
        buf.write(u"\2\2\2\u0115\u0116\3\2\2\2\u0116\u011b\3\2\2\2\u0117")
        buf.write(u"\u0119\7\u0089\2\2\u0118\u011a\5\u00a2R\2\u0119\u0118")
        buf.write(u"\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\3\2\2\2\u011b")
        buf.write(u"\u0117\3\2\2\2\u011b\u011c\3\2\2\2\u011c\21\3\2\2\2\u011d")
        buf.write(u"\u0122\t\3\2\2\u011e\u0120\7\u0089\2\2\u011f\u0121\5")
        buf.write(u"\u00a2R\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121")
        buf.write(u"\u0123\3\2\2\2\u0122\u011e\3\2\2\2\u0122\u0123\3\2\2")
        buf.write(u"\2\u0123\23\3\2\2\2\u0124\u0126\5Z.\2\u0125\u0124\3\2")
        buf.write(u"\2\2\u0125\u0126\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0131")
        buf.write(u"\5n8\2\u0128\u012a\7\u008b\2\2\u0129\u012b\7\37\2\2\u012a")
        buf.write(u"\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012f\3\2\2")
        buf.write(u"\2\u012c\u012f\7\\\2\2\u012d\u012f\7F\2\2\u012e\u0128")
        buf.write(u"\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012d\3\2\2\2\u012f")
        buf.write(u"\u0130\3\2\2\2\u0130\u0132\5n8\2\u0131\u012e\3\2\2\2")
        buf.write(u"\u0132\u0133\3\2\2\2\u0133\u0131\3\2\2\2\u0133\u0134")
        buf.write(u"\3\2\2\2\u0134\u013f\3\2\2\2\u0135\u0136\7o\2\2\u0136")
        buf.write(u"\u0137\7*\2\2\u0137\u013c\5^\60\2\u0138\u0139\7\7\2\2")
        buf.write(u"\u0139\u013b\5^\60\2\u013a\u0138\3\2\2\2\u013b\u013e")
        buf.write(u"\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write(u"\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0135\3\2\2")
        buf.write(u"\2\u013f\u0140\3\2\2\2\u0140\u0147\3\2\2\2\u0141\u0142")
        buf.write(u"\7d\2\2\u0142\u0145\5P)\2\u0143\u0144\t\4\2\2\u0144\u0146")
        buf.write(u"\5P)\2\u0145\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146")
        buf.write(u"\u0148\3\2\2\2\u0147\u0141\3\2\2\2\u0147\u0148\3\2\2")
        buf.write(u"\2\u0148\25\3\2\2\2\u0149\u014b\7\64\2\2\u014a\u014c")
        buf.write(u"\7\u008c\2\2\u014b\u014a\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write(u"\u014c\u014d\3\2\2\2\u014d\u0151\7V\2\2\u014e\u014f\7")
        buf.write(u"R\2\2\u014f\u0150\7h\2\2\u0150\u0152\7H\2\2\u0151\u014e")
        buf.write(u"\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0156\3\2\2\2\u0153")
        buf.write(u"\u0154\5\u0084C\2\u0154\u0155\7\4\2\2\u0155\u0157\3\2")
        buf.write(u"\2\2\u0156\u0153\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158")
        buf.write(u"\3\2\2\2\u0158\u0159\5\u0094K\2\u0159\u015a\7m\2\2\u015a")
        buf.write(u"\u015b\5\u0088E\2\u015b\u015c\7\5\2\2\u015c\u0161\5V")
        buf.write(u",\2\u015d\u015e\7\7\2\2\u015e\u0160\5V,\2\u015f\u015d")
        buf.write(u"\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161")
        buf.write(u"\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u0161\3\2\2")
        buf.write(u"\2\u0164\u0167\7\6\2\2\u0165\u0166\7\u0094\2\2\u0166")
        buf.write(u"\u0168\5P)\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2")
        buf.write(u"\u0168\27\3\2\2\2\u0169\u016b\7\64\2\2\u016a\u016c\t")
        buf.write(u"\5\2\2\u016b\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write(u"\u016d\3\2\2\2\u016d\u0171\7\u0084\2\2\u016e\u016f\7")
        buf.write(u"R\2\2\u016f\u0170\7h\2\2\u0170\u0172\7H\2\2\u0171\u016e")
        buf.write(u"\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0176\3\2\2\2\u0173")
        buf.write(u"\u0174\5\u0084C\2\u0174\u0175\7\4\2\2\u0175\u0177\3\2")
        buf.write(u"\2\2\u0176\u0173\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178")
        buf.write(u"\3\2\2\2\u0178\u0190\5\u0088E\2\u0179\u017a\7\5\2\2\u017a")
        buf.write(u"\u017f\5H%\2\u017b\u017c\7\7\2\2\u017c\u017e\5H%\2\u017d")
        buf.write(u"\u017b\3\2\2\2\u017e\u0181\3\2\2\2\u017f\u0180\3\2\2")
        buf.write(u"\2\u017f\u017d\3\2\2\2\u0180\u0186\3\2\2\2\u0181\u017f")
        buf.write(u"\3\2\2\2\u0182\u0183\7\7\2\2\u0183\u0185\5X-\2\u0184")
        buf.write(u"\u0182\3\2\2\2\u0185\u0188\3\2\2\2\u0186\u0184\3\2\2")
        buf.write(u"\2\u0186\u0187\3\2\2\2\u0187\u0189\3\2\2\2\u0188\u0186")
        buf.write(u"\3\2\2\2\u0189\u018c\7\6\2\2\u018a\u018b\7\u0096\2\2")
        buf.write(u"\u018b\u018d\7\u0097\2\2\u018c\u018a\3\2\2\2\u018c\u018d")
        buf.write(u"\3\2\2\2\u018d\u0191\3\2\2\2\u018e\u018f\7#\2\2\u018f")
        buf.write(u"\u0191\5> \2\u0190\u0179\3\2\2\2\u0190\u018e\3\2\2\2")
        buf.write(u"\u0191\31\3\2\2\2\u0192\u0194\7\64\2\2\u0193\u0195\t")
        buf.write(u"\5\2\2\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195")
        buf.write(u"\u0196\3\2\2\2\u0196\u019a\7\u008a\2\2\u0197\u0198\7")
        buf.write(u"R\2\2\u0198\u0199\7h\2\2\u0199\u019b\7H\2\2\u019a\u0197")
        buf.write(u"\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019f\3\2\2\2\u019c")
        buf.write(u"\u019d\5\u0084C\2\u019d\u019e\7\4\2\2\u019e\u01a0\3\2")
        buf.write(u"\2\2\u019f\u019c\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1")
        buf.write(u"\3\2\2\2\u01a1\u01a6\5\u0096L\2\u01a2\u01a7\7\'\2\2\u01a3")
        buf.write(u"\u01a7\7\36\2\2\u01a4\u01a5\7[\2\2\u01a5\u01a7\7k\2\2")
        buf.write(u"\u01a6\u01a2\3\2\2\2\u01a6\u01a3\3\2\2\2\u01a6\u01a4")
        buf.write(u"\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01b6\3\2\2\2\u01a8")
        buf.write(u"\u01b7\7=\2\2\u01a9\u01b7\7Z\2\2\u01aa\u01b4\7\u008d")
        buf.write(u"\2\2\u01ab\u01ac\7k\2\2\u01ac\u01b1\5\u008eH\2\u01ad")
        buf.write(u"\u01ae\7\7\2\2\u01ae\u01b0\5\u008eH\2\u01af\u01ad\3\2")
        buf.write(u"\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2")
        buf.write(u"\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4")
        buf.write(u"\u01ab\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\3\2\2")
        buf.write(u"\2\u01b6\u01a8\3\2\2\2\u01b6\u01a9\3\2\2\2\u01b6\u01aa")
        buf.write(u"\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01bc\7m\2\2\u01b9")
        buf.write(u"\u01ba\5\u0084C\2\u01ba\u01bb\7\4\2\2\u01bb\u01bd\3\2")
        buf.write(u"\2\2\u01bc\u01b9\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01be")
        buf.write(u"\3\2\2\2\u01be\u01c2\5\u0088E\2\u01bf\u01c0\7K\2\2\u01c0")
        buf.write(u"\u01c1\7B\2\2\u01c1\u01c3\7\u0080\2\2\u01c2\u01bf\3\2")
        buf.write(u"\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c5")
        buf.write(u"\7\u0093\2\2\u01c5\u01c7\5P)\2\u01c6\u01c4\3\2\2\2\u01c6")
        buf.write(u"\u01c7\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01d1\7(\2\2")
        buf.write(u"\u01c9\u01ce\5B\"\2\u01ca\u01ce\5\60\31\2\u01cb\u01ce")
        buf.write(u"\5 \21\2\u01cc\u01ce\5> \2\u01cd\u01c9\3\2\2\2\u01cd")
        buf.write(u"\u01ca\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01cc\3\2\2")
        buf.write(u"\2\u01ce\u01cf\3\2\2\2\u01cf\u01d0\7\3\2\2\u01d0\u01d2")
        buf.write(u"\3\2\2\2\u01d1\u01cd\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write(u"\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\3\2\2")
        buf.write(u"\2\u01d5\u01d6\7D\2\2\u01d6\33\3\2\2\2\u01d7\u01d9\7")
        buf.write(u"\64\2\2\u01d8\u01da\t\5\2\2\u01d9\u01d8\3\2\2\2\u01d9")
        buf.write(u"\u01da\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01df\7\u0091")
        buf.write(u"\2\2\u01dc\u01dd\7R\2\2\u01dd\u01de\7h\2\2\u01de\u01e0")
        buf.write(u"\7H\2\2\u01df\u01dc\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write(u"\u01e4\3\2\2\2\u01e1\u01e2\5\u0084C\2\u01e2\u01e3\7\4")
        buf.write(u"\2\2\u01e3\u01e5\3\2\2\2\u01e4\u01e1\3\2\2\2\u01e4\u01e5")
        buf.write(u"\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01f2\5\u0098M\2\u01e7")
        buf.write(u"\u01e8\7\5\2\2\u01e8\u01ed\5\u008eH\2\u01e9\u01ea\7\7")
        buf.write(u"\2\2\u01ea\u01ec\5\u008eH\2\u01eb\u01e9\3\2\2\2\u01ec")
        buf.write(u"\u01ef\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2")
        buf.write(u"\2\u01ee\u01f0\3\2\2\2\u01ef\u01ed\3\2\2\2\u01f0\u01f1")
        buf.write(u"\7\6\2\2\u01f1\u01f3\3\2\2\2\u01f2\u01e7\3\2\2\2\u01f2")
        buf.write(u"\u01f3\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\7#\2\2")
        buf.write(u"\u01f5\u01f6\5> \2\u01f6\35\3\2\2\2\u01f7\u01f8\7\64")
        buf.write(u"\2\2\u01f8\u01f9\7\u0092\2\2\u01f9\u01fd\7\u0084\2\2")
        buf.write(u"\u01fa\u01fb\7R\2\2\u01fb\u01fc\7h\2\2\u01fc\u01fe\7")
        buf.write(u"H\2\2\u01fd\u01fa\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0202")
        buf.write(u"\3\2\2\2\u01ff\u0200\5\u0084C\2\u0200\u0201\7\4\2\2\u0201")
        buf.write(u"\u0203\3\2\2\2\u0202\u01ff\3\2\2\2\u0202\u0203\3\2\2")
        buf.write(u"\2\u0203\u0204\3\2\2\2\u0204\u0205\5\u0088E\2\u0205\u0206")
        buf.write(u"\7\u008e\2\2\u0206\u0212\5\u009aN\2\u0207\u0208\7\5\2")
        buf.write(u"\2\u0208\u020d\5z>\2\u0209\u020a\7\7\2\2\u020a\u020c")
        buf.write(u"\5z>\2\u020b\u0209\3\2\2\2\u020c\u020f\3\2\2\2\u020d")
        buf.write(u"\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2")
        buf.write(u"\2\u020f\u020d\3\2\2\2\u0210\u0211\7\6\2\2\u0211\u0213")
        buf.write(u"\3\2\2\2\u0212\u0207\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write(u"\37\3\2\2\2\u0214\u0216\5Z.\2\u0215\u0214\3\2\2\2\u0215")
        buf.write(u"\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\7=\2\2")
        buf.write(u"\u0218\u0219\7M\2\2\u0219\u021c\5\\/\2\u021a\u021b\7")
        buf.write(u"\u0094\2\2\u021b\u021d\5P)\2\u021c\u021a\3\2\2\2\u021c")
        buf.write(u"\u021d\3\2\2\2\u021d!\3\2\2\2\u021e\u0220\5Z.\2\u021f")
        buf.write(u"\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2")
        buf.write(u"\2\u0221\u0222\7=\2\2\u0222\u0223\7M\2\2\u0223\u0226")
        buf.write(u"\5\\/\2\u0224\u0225\7\u0094\2\2\u0225\u0227\5P)\2\u0226")
        buf.write(u"\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u023a\3\2\2")
        buf.write(u"\2\u0228\u0229\7o\2\2\u0229\u022a\7*\2\2\u022a\u022f")
        buf.write(u"\5^\60\2\u022b\u022c\7\7\2\2\u022c\u022e\5^\60\2\u022d")
        buf.write(u"\u022b\3\2\2\2\u022e\u0231\3\2\2\2\u022f\u022d\3\2\2")
        buf.write(u"\2\u022f\u0230\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f")
        buf.write(u"\3\2\2\2\u0232\u0228\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write(u"\u0234\3\2\2\2\u0234\u0235\7d\2\2\u0235\u0238\5P)\2\u0236")
        buf.write(u"\u0237\t\4\2\2\u0237\u0239\5P)\2\u0238\u0236\3\2\2\2")
        buf.write(u"\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u0232")
        buf.write(u"\3\2\2\2\u023a\u023b\3\2\2\2\u023b#\3\2\2\2\u023c\u023e")
        buf.write(u"\7?\2\2\u023d\u023f\79\2\2\u023e\u023d\3\2\2\2\u023e")
        buf.write(u"\u023f\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\5\u0084")
        buf.write(u"C\2\u0241%\3\2\2\2\u0242\u0243\7A\2\2\u0243\u0246\7V")
        buf.write(u"\2\2\u0244\u0245\7R\2\2\u0245\u0247\7H\2\2\u0246\u0244")
        buf.write(u"\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u024b\3\2\2\2\u0248")
        buf.write(u"\u0249\5\u0084C\2\u0249\u024a\7\4\2\2\u024a\u024c\3\2")
        buf.write(u"\2\2\u024b\u0248\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d")
        buf.write(u"\3\2\2\2\u024d\u024e\5\u0094K\2\u024e\'\3\2\2\2\u024f")
        buf.write(u"\u0250\7A\2\2\u0250\u0253\7\u0084\2\2\u0251\u0252\7R")
        buf.write(u"\2\2\u0252\u0254\7H\2\2\u0253\u0251\3\2\2\2\u0253\u0254")
        buf.write(u"\3\2\2\2\u0254\u0258\3\2\2\2\u0255\u0256\5\u0084C\2\u0256")
        buf.write(u"\u0257\7\4\2\2\u0257\u0259\3\2\2\2\u0258\u0255\3\2\2")
        buf.write(u"\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b")
        buf.write(u"\5\u0088E\2\u025b)\3\2\2\2\u025c\u025d\7A\2\2\u025d\u0260")
        buf.write(u"\7\u008a\2\2\u025e\u025f\7R\2\2\u025f\u0261\7H\2\2\u0260")
        buf.write(u"\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0265\3\2\2")
        buf.write(u"\2\u0262\u0263\5\u0084C\2\u0263\u0264\7\4\2\2\u0264\u0266")
        buf.write(u"\3\2\2\2\u0265\u0262\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write(u"\u0267\3\2\2\2\u0267\u0268\5\u0096L\2\u0268+\3\2\2\2")
        buf.write(u"\u0269\u026a\7A\2\2\u026a\u026d\7\u0091\2\2\u026b\u026c")
        buf.write(u"\7R\2\2\u026c\u026e\7H\2\2\u026d\u026b\3\2\2\2\u026d")
        buf.write(u"\u026e\3\2\2\2\u026e\u0272\3\2\2\2\u026f\u0270\5\u0084")
        buf.write(u"C\2\u0270\u0271\7\4\2\2\u0271\u0273\3\2\2\2\u0272\u026f")
        buf.write(u"\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write(u"\u0275\5\u0098M\2\u0275-\3\2\2\2\u0276\u0278\5Z.\2\u0277")
        buf.write(u"\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2")
        buf.write(u"\2\u0279\u027f\5n8\2\u027a\u027b\5p9\2\u027b\u027c\5")
        buf.write(u"n8\2\u027c\u027e\3\2\2\2\u027d\u027a\3\2\2\2\u027e\u0281")
        buf.write(u"\3\2\2\2\u027f\u027d\3\2\2\2\u027f\u0280\3\2\2\2\u0280")
        buf.write(u"\u028c\3\2\2\2\u0281\u027f\3\2\2\2\u0282\u0283\7o\2\2")
        buf.write(u"\u0283\u0284\7*\2\2\u0284\u0289\5^\60\2\u0285\u0286\7")
        buf.write(u"\7\2\2\u0286\u0288\5^\60\2\u0287\u0285\3\2\2\2\u0288")
        buf.write(u"\u028b\3\2\2\2\u0289\u0287\3\2\2\2\u0289\u028a\3\2\2")
        buf.write(u"\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u0282")
        buf.write(u"\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u0294\3\2\2\2\u028e")
        buf.write(u"\u028f\7d\2\2\u028f\u0292\5P)\2\u0290\u0291\t\4\2\2\u0291")
        buf.write(u"\u0293\5P)\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2")
        buf.write(u"\u0293\u0295\3\2\2\2\u0294\u028e\3\2\2\2\u0294\u0295")
        buf.write(u"\3\2\2\2\u0295/\3\2\2\2\u0296\u0298\5Z.\2\u0297\u0296")
        buf.write(u"\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u02aa\3\2\2\2\u0299")
        buf.write(u"\u02ab\7Z\2\2\u029a\u02ab\7|\2\2\u029b\u029c\7Z\2\2\u029c")
        buf.write(u"\u029d\7n\2\2\u029d\u02ab\7|\2\2\u029e\u029f\7Z\2\2\u029f")
        buf.write(u"\u02a0\7n\2\2\u02a0\u02ab\7\177\2\2\u02a1\u02a2\7Z\2")
        buf.write(u"\2\u02a2\u02a3\7n\2\2\u02a3\u02ab\7\33\2\2\u02a4\u02a5")
        buf.write(u"\7Z\2\2\u02a5\u02a6\7n\2\2\u02a6\u02ab\7J\2\2\u02a7\u02a8")
        buf.write(u"\7Z\2\2\u02a8\u02a9\7n\2\2\u02a9\u02ab\7S\2\2\u02aa\u0299")
        buf.write(u"\3\2\2\2\u02aa\u029a\3\2\2\2\u02aa\u029b\3\2\2\2\u02aa")
        buf.write(u"\u029e\3\2\2\2\u02aa\u02a1\3\2\2\2\u02aa\u02a4\3\2\2")
        buf.write(u"\2\u02aa\u02a7\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02b0")
        buf.write(u"\7]\2\2\u02ad\u02ae\5\u0084C\2\u02ae\u02af\7\4\2\2\u02af")
        buf.write(u"\u02b1\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b0\u02b1\3\2\2")
        buf.write(u"\2\u02b1\u02b2\3\2\2\2\u02b2\u02be\5\u0088E\2\u02b3\u02b4")
        buf.write(u"\7\5\2\2\u02b4\u02b9\5\u008eH\2\u02b5\u02b6\7\7\2\2\u02b6")
        buf.write(u"\u02b8\5\u008eH\2\u02b7\u02b5\3\2\2\2\u02b8\u02bb\3\2")
        buf.write(u"\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc")
        buf.write(u"\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02bd\7\6\2\2\u02bd")
        buf.write(u"\u02bf\3\2\2\2\u02be\u02b3\3\2\2\2\u02be\u02bf\3\2\2")
        buf.write(u"\2\u02bf\u02df\3\2\2\2\u02c0\u02c1\7\u0090\2\2\u02c1")
        buf.write(u"\u02c2\7\5\2\2\u02c2\u02c7\5P)\2\u02c3\u02c4\7\7\2\2")
        buf.write(u"\u02c4\u02c6\5P)\2\u02c5\u02c3\3\2\2\2\u02c6\u02c9\3")
        buf.write(u"\2\2\2\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8")
        buf.write(u"\u02ca\3\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02d9\7\6\2")
        buf.write(u"\2\u02cb\u02cc\7\7\2\2\u02cc\u02cd\7\5\2\2\u02cd\u02d2")
        buf.write(u"\5P)\2\u02ce\u02cf\7\7\2\2\u02cf\u02d1\5P)\2\u02d0\u02ce")
        buf.write(u"\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2")
        buf.write(u"\u02d3\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d2\3\2\2")
        buf.write(u"\2\u02d5\u02d6\7\6\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02cb")
        buf.write(u"\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2\u02d9")
        buf.write(u"\u02da\3\2\2\2\u02da\u02e0\3\2\2\2\u02db\u02d9\3\2\2")
        buf.write(u"\2\u02dc\u02e0\5> \2\u02dd\u02de\7:\2\2\u02de\u02e0\7")
        buf.write(u"\u0090\2\2\u02df\u02c0\3\2\2\2\u02df\u02dc\3\2\2\2\u02df")
        buf.write(u"\u02dd\3\2\2\2\u02e0\61\3\2\2\2\u02e1\u02e5\7r\2\2\u02e2")
        buf.write(u"\u02e3\5\u0084C\2\u02e3\u02e4\7\4\2\2\u02e4\u02e6\3\2")
        buf.write(u"\2\2\u02e5\u02e2\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write(u"\3\2\2\2\u02e7\u02ee\5\u009cO\2\u02e8\u02e9\7\b\2\2\u02e9")
        buf.write(u"\u02ef\5`\61\2\u02ea\u02eb\7\5\2\2\u02eb\u02ec\5`\61")
        buf.write(u"\2\u02ec\u02ed\7\6\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02e8")
        buf.write(u"\3\2\2\2\u02ee\u02ea\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef")
        buf.write(u"\63\3\2\2\2\u02f0\u02fb\7y\2\2\u02f1\u02fc\5\u0090I\2")
        buf.write(u"\u02f2\u02f3\5\u0084C\2\u02f3\u02f4\7\4\2\2\u02f4\u02f6")
        buf.write(u"\3\2\2\2\u02f5\u02f2\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write(u"\u02f9\3\2\2\2\u02f7\u02fa\5\u0088E\2\u02f8\u02fa\5\u0094")
        buf.write(u"K\2\u02f9\u02f7\3\2\2\2\u02f9\u02f8\3\2\2\2\u02fa\u02fc")
        buf.write(u"\3\2\2\2\u02fb\u02f1\3\2\2\2\u02fb\u02f5\3\2\2\2\u02fb")
        buf.write(u"\u02fc\3\2\2\2\u02fc\65\3\2\2\2\u02fd\u02ff\7z\2\2\u02fe")
        buf.write(u"\u0300\7\u0081\2\2\u02ff\u02fe\3\2\2\2\u02ff\u0300\3")
        buf.write(u"\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\5\u009eP\2\u0302")
        buf.write(u"\67\3\2\2\2\u0303\u0308\7\177\2\2\u0304\u0306\7\u0089")
        buf.write(u"\2\2\u0305\u0307\5\u00a2R\2\u0306\u0305\3\2\2\2\u0306")
        buf.write(u"\u0307\3\2\2\2\u0307\u0309\3\2\2\2\u0308\u0304\3\2\2")
        buf.write(u"\2\u0308\u0309\3\2\2\2\u0309\u030f\3\2\2\2\u030a\u030c")
        buf.write(u"\7\u0088\2\2\u030b\u030d\7\u0081\2\2\u030c\u030b\3\2")
        buf.write(u"\2\2\u030c\u030d\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0310")
        buf.write(u"\5\u009eP\2\u030f\u030a\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write(u"9\3\2\2\2\u0311\u0312\7\u0081\2\2\u0312\u0313\5\u009e")
        buf.write(u"P\2\u0313;\3\2\2\2\u0314\u0316\5Z.\2\u0315\u0314\3\2")
        buf.write(u"\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0322")
        buf.write(u"\5n8\2\u0318\u0319\7o\2\2\u0319\u031a\7*\2\2\u031a\u031f")
        buf.write(u"\5^\60\2\u031b\u031c\7\7\2\2\u031c\u031e\5^\60\2\u031d")
        buf.write(u"\u031b\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2")
        buf.write(u"\2\u031f\u0320\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f")
        buf.write(u"\3\2\2\2\u0322\u0318\3\2\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write(u"\u032a\3\2\2\2\u0324\u0325\7d\2\2\u0325\u0328\5P)\2\u0326")
        buf.write(u"\u0327\t\4\2\2\u0327\u0329\5P)\2\u0328\u0326\3\2\2\2")
        buf.write(u"\u0328\u0329\3\2\2\2\u0329\u032b\3\2\2\2\u032a\u0324")
        buf.write(u"\3\2\2\2\u032a\u032b\3\2\2\2\u032b=\3\2\2\2\u032c\u032e")
        buf.write(u"\5Z.\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e")
        buf.write(u"\u032f\3\2\2\2\u032f\u0335\5@!\2\u0330\u0331\5p9\2\u0331")
        buf.write(u"\u0332\5@!\2\u0332\u0334\3\2\2\2\u0333\u0330\3\2\2\2")
        buf.write(u"\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0336")
        buf.write(u"\3\2\2\2\u0336\u0342\3\2\2\2\u0337\u0335\3\2\2\2\u0338")
        buf.write(u"\u0339\7o\2\2\u0339\u033a\7*\2\2\u033a\u033f\5^\60\2")
        buf.write(u"\u033b\u033c\7\7\2\2\u033c\u033e\5^\60\2\u033d\u033b")
        buf.write(u"\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3\2\2\2\u033f")
        buf.write(u"\u0340\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3\2\2")
        buf.write(u"\2\u0342\u0338\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u034a")
        buf.write(u"\3\2\2\2\u0344\u0345\7d\2\2\u0345\u0348\5P)\2\u0346\u0347")
        buf.write(u"\t\4\2\2\u0347\u0349\5P)\2\u0348\u0346\3\2\2\2\u0348")
        buf.write(u"\u0349\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u0344\3\2\2")
        buf.write(u"\2\u034a\u034b\3\2\2\2\u034b?\3\2\2\2\u034c\u034e\7\u0082")
        buf.write(u"\2\2\u034d\u034f\t\6\2\2\u034e\u034d\3\2\2\2\u034e\u034f")
        buf.write(u"\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0355\5d\63\2\u0351")
        buf.write(u"\u0352\7\7\2\2\u0352\u0354\5d\63\2\u0353\u0351\3\2\2")
        buf.write(u"\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356")
        buf.write(u"\3\2\2\2\u0356\u0364\3\2\2\2\u0357\u0355\3\2\2\2\u0358")
        buf.write(u"\u0362\7M\2\2\u0359\u035e\5f\64\2\u035a\u035b\7\7\2\2")
        buf.write(u"\u035b\u035d\5f\64\2\u035c\u035a\3\2\2\2\u035d\u0360")
        buf.write(u"\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2\u035f")
        buf.write(u"\u0363\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0363\5h\65")
        buf.write(u"\2\u0362\u0359\3\2\2\2\u0362\u0361\3\2\2\2\u0363\u0365")
        buf.write(u"\3\2\2\2\u0364\u0358\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write(u"\u0368\3\2\2\2\u0366\u0367\7\u0094\2\2\u0367\u0369\5")
        buf.write(u"P)\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u0378")
        buf.write(u"\3\2\2\2\u036a\u036b\7P\2\2\u036b\u036c\7*\2\2\u036c")
        buf.write(u"\u0371\5P)\2\u036d\u036e\7\7\2\2\u036e\u0370\5P)\2\u036f")
        buf.write(u"\u036d\3\2\2\2\u0370\u0373\3\2\2\2\u0371\u036f\3\2\2")
        buf.write(u"\2\u0371\u0372\3\2\2\2\u0372\u0376\3\2\2\2\u0373\u0371")
        buf.write(u"\3\2\2\2\u0374\u0375\7Q\2\2\u0375\u0377\5P)\2\u0376\u0374")
        buf.write(u"\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0379\3\2\2\2\u0378")
        buf.write(u"\u036a\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u0397\3\2\2")
        buf.write(u"\2\u037a\u037b\7\u0090\2\2\u037b\u037c\7\5\2\2\u037c")
        buf.write(u"\u0381\5P)\2\u037d\u037e\7\7\2\2\u037e\u0380\5P)\2\u037f")
        buf.write(u"\u037d\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2")
        buf.write(u"\2\u0381\u0382\3\2\2\2\u0382\u0384\3\2\2\2\u0383\u0381")
        buf.write(u"\3\2\2\2\u0384\u0393\7\6\2\2\u0385\u0386\7\7\2\2\u0386")
        buf.write(u"\u0387\7\5\2\2\u0387\u038c\5P)\2\u0388\u0389\7\7\2\2")
        buf.write(u"\u0389\u038b\5P)\2\u038a\u0388\3\2\2\2\u038b\u038e\3")
        buf.write(u"\2\2\2\u038c\u038a\3\2\2\2\u038c\u038d\3\2\2\2\u038d")
        buf.write(u"\u038f\3\2\2\2\u038e\u038c\3\2\2\2\u038f\u0390\7\6\2")
        buf.write(u"\2\u0390\u0392\3\2\2\2\u0391\u0385\3\2\2\2\u0392\u0395")
        buf.write(u"\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write(u"\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u034c\3\2\2")
        buf.write(u"\2\u0396\u037a\3\2\2\2\u0397A\3\2\2\2\u0398\u039a\5Z")
        buf.write(u".\2\u0399\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039b")
        buf.write(u"\3\2\2\2\u039b\u03a6\7\u008d\2\2\u039c\u039d\7n\2\2\u039d")
        buf.write(u"\u03a7\7\177\2\2\u039e\u039f\7n\2\2\u039f\u03a7\7\33")
        buf.write(u"\2\2\u03a0\u03a1\7n\2\2\u03a1\u03a7\7|\2\2\u03a2\u03a3")
        buf.write(u"\7n\2\2\u03a3\u03a7\7J\2\2\u03a4\u03a5\7n\2\2\u03a5\u03a7")
        buf.write(u"\7S\2\2\u03a6\u039c\3\2\2\2\u03a6\u039e\3\2\2\2\u03a6")
        buf.write(u"\u03a0\3\2\2\2\u03a6\u03a2\3\2\2\2\u03a6\u03a4\3\2\2")
        buf.write(u"\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9")
        buf.write(u"\5\\/\2\u03a9\u03aa\7\u0083\2\2\u03aa\u03ab\5\u008eH")
        buf.write(u"\2\u03ab\u03ac\7\b\2\2\u03ac\u03b4\5P)\2\u03ad\u03ae")
        buf.write(u"\7\7\2\2\u03ae\u03af\5\u008eH\2\u03af\u03b0\7\b\2\2\u03b0")
        buf.write(u"\u03b1\5P)\2\u03b1\u03b3\3\2\2\2\u03b2\u03ad\3\2\2\2")
        buf.write(u"\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5")
        buf.write(u"\3\2\2\2\u03b5\u03b9\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7")
        buf.write(u"\u03b8\7\u0094\2\2\u03b8\u03ba\5P)\2\u03b9\u03b7\3\2")
        buf.write(u"\2\2\u03b9\u03ba\3\2\2\2\u03baC\3\2\2\2\u03bb\u03bd\5")
        buf.write(u"Z.\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03be")
        buf.write(u"\3\2\2\2\u03be\u03c9\7\u008d\2\2\u03bf\u03c0\7n\2\2\u03c0")
        buf.write(u"\u03ca\7\177\2\2\u03c1\u03c2\7n\2\2\u03c2\u03ca\7\33")
        buf.write(u"\2\2\u03c3\u03c4\7n\2\2\u03c4\u03ca\7|\2\2\u03c5\u03c6")
        buf.write(u"\7n\2\2\u03c6\u03ca\7J\2\2\u03c7\u03c8\7n\2\2\u03c8\u03ca")
        buf.write(u"\7S\2\2\u03c9\u03bf\3\2\2\2\u03c9\u03c1\3\2\2\2\u03c9")
        buf.write(u"\u03c3\3\2\2\2\u03c9\u03c5\3\2\2\2\u03c9\u03c7\3\2\2")
        buf.write(u"\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc")
        buf.write(u"\5\\/\2\u03cc\u03cd\7\u0083\2\2\u03cd\u03ce\5\u008eH")
        buf.write(u"\2\u03ce\u03cf\7\b\2\2\u03cf\u03d7\5P)\2\u03d0\u03d1")
        buf.write(u"\7\7\2\2\u03d1\u03d2\5\u008eH\2\u03d2\u03d3\7\b\2\2\u03d3")
        buf.write(u"\u03d4\5P)\2\u03d4\u03d6\3\2\2\2\u03d5\u03d0\3\2\2\2")
        buf.write(u"\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8")
        buf.write(u"\3\2\2\2\u03d8\u03dc\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da")
        buf.write(u"\u03db\7\u0094\2\2\u03db\u03dd\5P)\2\u03dc\u03da\3\2")
        buf.write(u"\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03f0\3\2\2\2\u03de\u03df")
        buf.write(u"\7o\2\2\u03df\u03e0\7*\2\2\u03e0\u03e5\5^\60\2\u03e1")
        buf.write(u"\u03e2\7\7\2\2\u03e2\u03e4\5^\60\2\u03e3\u03e1\3\2\2")
        buf.write(u"\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6")
        buf.write(u"\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e8")
        buf.write(u"\u03de\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2")
        buf.write(u"\2\u03ea\u03eb\7d\2\2\u03eb\u03ee\5P)\2\u03ec\u03ed\t")
        buf.write(u"\4\2\2\u03ed\u03ef\5P)\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef")
        buf.write(u"\3\2\2\2\u03ef\u03f1\3\2\2\2\u03f0\u03e8\3\2\2\2\u03f0")
        buf.write(u"\u03f1\3\2\2\2\u03f1E\3\2\2\2\u03f2\u03f3\7\u008f\2\2")
        buf.write(u"\u03f3G\3\2\2\2\u03f4\u03f6\5\u008eH\2\u03f5\u03f7\5")
        buf.write(u"J&\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fb")
        buf.write(u"\3\2\2\2\u03f8\u03fa\5L\'\2\u03f9\u03f8\3\2\2\2\u03fa")
        buf.write(u"\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2")
        buf.write(u"\2\u03fcI\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u0400\5\u0080")
        buf.write(u"A\2\u03ff\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402")
        buf.write(u"\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u040d\3\2\2\2\u0403")
        buf.write(u"\u0404\7\5\2\2\u0404\u0405\5r:\2\u0405\u0406\7\6\2\2")
        buf.write(u"\u0406\u040e\3\2\2\2\u0407\u0408\7\5\2\2\u0408\u0409")
        buf.write(u"\5r:\2\u0409\u040a\7\7\2\2\u040a\u040b\5r:\2\u040b\u040c")
        buf.write(u"\7\6\2\2\u040c\u040e\3\2\2\2\u040d\u0403\3\2\2\2\u040d")
        buf.write(u"\u0407\3\2\2\2\u040d\u040e\3\2\2\2\u040eK\3\2\2\2\u040f")
        buf.write(u"\u0410\7s\2\2\u0410\u0412\7a\2\2\u0411\u0413\t\7\2\2")
        buf.write(u"\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414")
        buf.write(u"\3\2\2\2\u0414\u0416\5N(\2\u0415\u0417\7&\2\2\u0416\u0415")
        buf.write(u"\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0431\3\2\2\2\u0418")
        buf.write(u"\u041a\7h\2\2\u0419\u0418\3\2\2\2\u0419\u041a\3\2\2\2")
        buf.write(u"\u041a\u041b\3\2\2\2\u041b\u041c\7j\2\2\u041c\u0431\5")
        buf.write(u"N(\2\u041d\u041e\7\u008c\2\2\u041e\u0431\5N(\2\u041f")
        buf.write(u"\u0420\7.\2\2\u0420\u0421\7\5\2\2\u0421\u0422\5P)\2\u0422")
        buf.write(u"\u0423\7\6\2\2\u0423\u0431\3\2\2\2\u0424\u042b\7:\2\2")
        buf.write(u"\u0425\u042c\5r:\2\u0426\u042c\5t;\2\u0427\u0428\7\5")
        buf.write(u"\2\2\u0428\u0429\5P)\2\u0429\u042a\7\6\2\2\u042a\u042c")
        buf.write(u"\3\2\2\2\u042b\u0425\3\2\2\2\u042b\u0426\3\2\2\2\u042b")
        buf.write(u"\u0427\3\2\2\2\u042c\u0431\3\2\2\2\u042d\u042e\7/\2\2")
        buf.write(u"\u042e\u0431\5\u0090I\2\u042f\u0431\5R*\2\u0430\u040f")
        buf.write(u"\3\2\2\2\u0430\u0419\3\2\2\2\u0430\u041d\3\2\2\2\u0430")
        buf.write(u"\u041f\3\2\2\2\u0430\u0424\3\2\2\2\u0430\u042d\3\2\2")
        buf.write(u"\2\u0430\u042f\3\2\2\2\u0431M\3\2\2\2\u0432\u0433\7m")
        buf.write(u"\2\2\u0433\u0434\7\62\2\2\u0434\u0436\t\b\2\2\u0435\u0432")
        buf.write(u"\3\2\2\2\u0435\u0436\3\2\2\2\u0436O\3\2\2\2\u0437\u0438")
        buf.write(u"\b)\1\2\u0438\u0484\5t;\2\u0439\u0484\7\u009a\2\2\u043a")
        buf.write(u"\u043b\5\u0084C\2\u043b\u043c\7\4\2\2\u043c\u043e\3\2")
        buf.write(u"\2\2\u043d\u043a\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u043f")
        buf.write(u"\3\2\2\2\u043f\u0440\5\u0088E\2\u0440\u0441\7\4\2\2\u0441")
        buf.write(u"\u0443\3\2\2\2\u0442\u043d\3\2\2\2\u0442\u0443\3\2\2")
        buf.write(u"\2\u0443\u0444\3\2\2\2\u0444\u0484\5\u008eH\2\u0445\u0446")
        buf.write(u"\5v<\2\u0446\u0447\5P)\27\u0447\u0484\3\2\2\2\u0448\u0449")
        buf.write(u"\5\u0082B\2\u0449\u0456\7\5\2\2\u044a\u044c\7@\2\2\u044b")
        buf.write(u"\u044a\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\3\2\2")
        buf.write(u"\2\u044d\u0452\5P)\2\u044e\u044f\7\7\2\2\u044f\u0451")
        buf.write(u"\5P)\2\u0450\u044e\3\2\2\2\u0451\u0454\3\2\2\2\u0452")
        buf.write(u"\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0457\3\2\2")
        buf.write(u"\2\u0454\u0452\3\2\2\2\u0455\u0457\7\t\2\2\u0456\u044b")
        buf.write(u"\3\2\2\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2\2\2\u0457")
        buf.write(u"\u0458\3\2\2\2\u0458\u0459\7\6\2\2\u0459\u0484\3\2\2")
        buf.write(u"\2\u045a\u045b\7\5\2\2\u045b\u045c\5P)\2\u045c\u045d")
        buf.write(u"\7\6\2\2\u045d\u0484\3\2\2\2\u045e\u045f\7-\2\2\u045f")
        buf.write(u"\u0460\7\5\2\2\u0460\u0461\5P)\2\u0461\u0462\7#\2\2\u0462")
        buf.write(u"\u0463\5J&\2\u0463\u0464\7\6\2\2\u0464\u0484\3\2\2\2")
        buf.write(u"\u0465\u0467\7h\2\2\u0466\u0465\3\2\2\2\u0466\u0467\3")
        buf.write(u"\2\2\2\u0467\u0468\3\2\2\2\u0468\u046a\7H\2\2\u0469\u0466")
        buf.write(u"\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write(u"\u046c\7\5\2\2\u046c\u046d\5> \2\u046d\u046e\7\6\2\2")
        buf.write(u"\u046e\u0484\3\2\2\2\u046f\u0471\7,\2\2\u0470\u0472\5")
        buf.write(u"P)\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0478")
        buf.write(u"\3\2\2\2\u0473\u0474\7\u0093\2\2\u0474\u0475\5P)\2\u0475")
        buf.write(u"\u0476\7\u0087\2\2\u0476\u0477\5P)\2\u0477\u0479\3\2")
        buf.write(u"\2\2\u0478\u0473\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u0478")
        buf.write(u"\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047e\3\2\2\2\u047c")
        buf.write(u"\u047d\7C\2\2\u047d\u047f\5P)\2\u047e\u047c\3\2\2\2\u047e")
        buf.write(u"\u047f\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\7D\2\2")
        buf.write(u"\u0481\u0484\3\2\2\2\u0482\u0484\5T+\2\u0483\u0437\3")
        buf.write(u"\2\2\2\u0483\u0439\3\2\2\2\u0483\u0442\3\2\2\2\u0483")
        buf.write(u"\u0445\3\2\2\2\u0483\u0448\3\2\2\2\u0483\u045a\3\2\2")
        buf.write(u"\2\u0483\u045e\3\2\2\2\u0483\u0469\3\2\2\2\u0483\u046f")
        buf.write(u"\3\2\2\2\u0483\u0482\3\2\2\2\u0484\u04e9\3\2\2\2\u0485")
        buf.write(u"\u0486\f\26\2\2\u0486\u0487\7\r\2\2\u0487\u04e8\5P)\27")
        buf.write(u"\u0488\u0489\f\25\2\2\u0489\u048a\t\t\2\2\u048a\u04e8")
        buf.write(u"\5P)\26\u048b\u048c\f\24\2\2\u048c\u048d\t\n\2\2\u048d")
        buf.write(u"\u04e8\5P)\25\u048e\u048f\f\23\2\2\u048f\u0490\t\13\2")
        buf.write(u"\2\u0490\u04e8\5P)\24\u0491\u0492\f\22\2\2\u0492\u0493")
        buf.write(u"\t\f\2\2\u0493\u04e8\5P)\23\u0494\u04a1\f\21\2\2\u0495")
        buf.write(u"\u04a2\7\b\2\2\u0496\u04a2\7\30\2\2\u0497\u04a2\7\31")
        buf.write(u"\2\2\u0498\u04a2\7\32\2\2\u0499\u04a2\7^\2\2\u049a\u049b")
        buf.write(u"\7^\2\2\u049b\u04a2\7h\2\2\u049c\u04a2\7U\2\2\u049d\u04a2")
        buf.write(u"\7c\2\2\u049e\u04a2\7O\2\2\u049f\u04a2\7e\2\2\u04a0\u04a2")
        buf.write(u"\7x\2\2\u04a1\u0495\3\2\2\2\u04a1\u0496\3\2\2\2\u04a1")
        buf.write(u"\u0497\3\2\2\2\u04a1\u0498\3\2\2\2\u04a1\u0499\3\2\2")
        buf.write(u"\2\u04a1\u049a\3\2\2\2\u04a1\u049c\3\2\2\2\u04a1\u049d")
        buf.write(u"\3\2\2\2\u04a1\u049e\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1")
        buf.write(u"\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04e8\5P)\22")
        buf.write(u"\u04a4\u04a5\f\20\2\2\u04a5\u04a6\7\"\2\2\u04a6\u04e8")
        buf.write(u"\5P)\21\u04a7\u04a8\f\17\2\2\u04a8\u04a9\7n\2\2\u04a9")
        buf.write(u"\u04e8\5P)\20\u04aa\u04ab\f\b\2\2\u04ab\u04ad\7^\2\2")
        buf.write(u"\u04ac\u04ae\7h\2\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3")
        buf.write(u"\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04e8\5P)\t\u04b0\u04b2")
        buf.write(u"\f\7\2\2\u04b1\u04b3\7h\2\2\u04b2\u04b1\3\2\2\2\u04b2")
        buf.write(u"\u04b3\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\7)\2\2")
        buf.write(u"\u04b5\u04b6\5P)\2\u04b6\u04b7\7\"\2\2\u04b7\u04b8\5")
        buf.write(u"P)\b\u04b8\u04e8\3\2\2\2\u04b9\u04ba\f\13\2\2\u04ba\u04bb")
        buf.write(u"\7/\2\2\u04bb\u04e8\5\u0090I\2\u04bc\u04be\f\n\2\2\u04bd")
        buf.write(u"\u04bf\7h\2\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2")
        buf.write(u"\u04bf\u04c0\3\2\2\2\u04c0\u04c1\t\r\2\2\u04c1\u04c4")
        buf.write(u"\5P)\2\u04c2\u04c3\7E\2\2\u04c3\u04c5\5P)\2\u04c4\u04c2")
        buf.write(u"\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04e8\3\2\2\2\u04c6")
        buf.write(u"\u04cb\f\t\2\2\u04c7\u04cc\7_\2\2\u04c8\u04cc\7i\2\2")
        buf.write(u"\u04c9\u04ca\7h\2\2\u04ca\u04cc\7j\2\2\u04cb\u04c7\3")
        buf.write(u"\2\2\2\u04cb\u04c8\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc")
        buf.write(u"\u04e8\3\2\2\2\u04cd\u04cf\f\6\2\2\u04ce\u04d0\7h\2\2")
        buf.write(u"\u04cf\u04ce\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1")
        buf.write(u"\3\2\2\2\u04d1\u04e5\7U\2\2\u04d2\u04dc\7\5\2\2\u04d3")
        buf.write(u"\u04dd\5> \2\u04d4\u04d9\5P)\2\u04d5\u04d6\7\7\2\2\u04d6")
        buf.write(u"\u04d8\5P)\2\u04d7\u04d5\3\2\2\2\u04d8\u04db\3\2\2\2")
        buf.write(u"\u04d9\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dd")
        buf.write(u"\3\2\2\2\u04db\u04d9\3\2\2\2\u04dc\u04d3\3\2\2\2\u04dc")
        buf.write(u"\u04d4\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\3\2\2")
        buf.write(u"\2\u04de\u04e6\7\6\2\2\u04df\u04e0\5\u0084C\2\u04e0\u04e1")
        buf.write(u"\7\4\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04df\3\2\2\2\u04e2")
        buf.write(u"\u04e3\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e6\5\u0088")
        buf.write(u"E\2\u04e5\u04d2\3\2\2\2\u04e5\u04e2\3\2\2\2\u04e6\u04e8")
        buf.write(u"\3\2\2\2\u04e7\u0485\3\2\2\2\u04e7\u0488\3\2\2\2\u04e7")
        buf.write(u"\u048b\3\2\2\2\u04e7\u048e\3\2\2\2\u04e7\u0491\3\2\2")
        buf.write(u"\2\u04e7\u0494\3\2\2\2\u04e7\u04a4\3\2\2\2\u04e7\u04a7")
        buf.write(u"\3\2\2\2\u04e7\u04aa\3\2\2\2\u04e7\u04b0\3\2\2\2\u04e7")
        buf.write(u"\u04b9\3\2\2\2\u04e7\u04bc\3\2\2\2\u04e7\u04c6\3\2\2")
        buf.write(u"\2\u04e7\u04cd\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04e7")
        buf.write(u"\3\2\2\2\u04e9\u04ea\3\2\2\2\u04eaQ\3\2\2\2\u04eb\u04e9")
        buf.write(u"\3\2\2\2\u04ec\u04ed\7w\2\2\u04ed\u04f9\5\u0092J\2\u04ee")
        buf.write(u"\u04ef\7\5\2\2\u04ef\u04f4\5\u008eH\2\u04f0\u04f1\7\7")
        buf.write(u"\2\2\u04f1\u04f3\5\u008eH\2\u04f2\u04f0\3\2\2\2\u04f3")
        buf.write(u"\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2\2")
        buf.write(u"\2\u04f5\u04f7\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f7\u04f8")
        buf.write(u"\7\6\2\2\u04f8\u04fa\3\2\2\2\u04f9\u04ee\3\2\2\2\u04f9")
        buf.write(u"\u04fa\3\2\2\2\u04fa\u050d\3\2\2\2\u04fb\u04fc\7m\2\2")
        buf.write(u"\u04fc\u0505\t\16\2\2\u04fd\u04fe\7\u0083\2\2\u04fe\u0506")
        buf.write(u"\7j\2\2\u04ff\u0500\7\u0083\2\2\u0500\u0506\7:\2\2\u0501")
        buf.write(u"\u0506\7+\2\2\u0502\u0506\7}\2\2\u0503\u0504\7g\2\2\u0504")
        buf.write(u"\u0506\7\34\2\2\u0505\u04fd\3\2\2\2\u0505\u04ff\3\2\2")
        buf.write(u"\2\u0505\u0501\3\2\2\2\u0505\u0502\3\2\2\2\u0505\u0503")
        buf.write(u"\3\2\2\2\u0506\u050a\3\2\2\2\u0507\u0508\7e\2\2\u0508")
        buf.write(u"\u050a\5\u0080A\2\u0509\u04fb\3\2\2\2\u0509\u0507\3\2")
        buf.write(u"\2\2\u050a\u050c\3\2\2\2\u050b\u0509\3\2\2\2\u050c\u050f")
        buf.write(u"\3\2\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e")
        buf.write(u"\u051a\3\2\2\2\u050f\u050d\3\2\2\2\u0510\u0512\7h\2\2")
        buf.write(u"\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513")
        buf.write(u"\3\2\2\2\u0513\u0518\7;\2\2\u0514\u0515\7X\2\2\u0515")
        buf.write(u"\u0519\7<\2\2\u0516\u0517\7X\2\2\u0517\u0519\7T\2\2\u0518")
        buf.write(u"\u0514\3\2\2\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2")
        buf.write(u"\2\u0519\u051b\3\2\2\2\u051a\u0511\3\2\2\2\u051a\u051b")
        buf.write(u"\3\2\2\2\u051bS\3\2\2\2\u051c\u051d\7u\2\2\u051d\u0522")
        buf.write(u"\7\5\2\2\u051e\u0523\7S\2\2\u051f\u0520\t\17\2\2\u0520")
        buf.write(u"\u0521\7\7\2\2\u0521\u0523\5x=\2\u0522\u051e\3\2\2\2")
        buf.write(u"\u0522\u051f\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0525")
        buf.write(u"\7\6\2\2\u0525U\3\2\2\2\u0526\u0529\5\u008eH\2\u0527")
        buf.write(u"\u0528\7/\2\2\u0528\u052a\5\u0090I\2\u0529\u0527\3\2")
        buf.write(u"\2\2\u0529\u052a\3\2\2\2\u052a\u052c\3\2\2\2\u052b\u052d")
        buf.write(u"\t\7\2\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2\2\2\u052d")
        buf.write(u"W\3\2\2\2\u052e\u052f\7\63\2\2\u052f\u0531\5\u0080A\2")
        buf.write(u"\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0556")
        buf.write(u"\3\2\2\2\u0532\u0533\7s\2\2\u0533\u0536\7a\2\2\u0534")
        buf.write(u"\u0536\7\u008c\2\2\u0535\u0532\3\2\2\2\u0535\u0534\3")
        buf.write(u"\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\7\5\2\2\u0538")
        buf.write(u"\u053d\5V,\2\u0539\u053a\7\7\2\2\u053a\u053c\5V,\2\u053b")
        buf.write(u"\u0539\3\2\2\2\u053c\u053f\3\2\2\2\u053d\u053b\3\2\2")
        buf.write(u"\2\u053d\u053e\3\2\2\2\u053e\u0540\3\2\2\2\u053f\u053d")
        buf.write(u"\3\2\2\2\u0540\u0541\7\6\2\2\u0541\u0542\5N(\2\u0542")
        buf.write(u"\u0557\3\2\2\2\u0543\u0544\7.\2\2\u0544\u0545\7\5\2\2")
        buf.write(u"\u0545\u0546\5P)\2\u0546\u0547\7\6\2\2\u0547\u0557\3")
        buf.write(u"\2\2\2\u0548\u0549\7L\2\2\u0549\u054a\7a\2\2\u054a\u054b")
        buf.write(u"\7\5\2\2\u054b\u0550\5\u008eH\2\u054c\u054d\7\7\2\2\u054d")
        buf.write(u"\u054f\5\u008eH\2\u054e\u054c\3\2\2\2\u054f\u0552\3\2")
        buf.write(u"\2\2\u0550\u054e\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0553")
        buf.write(u"\3\2\2\2\u0552\u0550\3\2\2\2\u0553\u0554\7\6\2\2\u0554")
        buf.write(u"\u0555\5R*\2\u0555\u0557\3\2\2\2\u0556\u0535\3\2\2\2")
        buf.write(u"\u0556\u0543\3\2\2\2\u0556\u0548\3\2\2\2\u0557Y\3\2\2")
        buf.write(u"\2\u0558\u055a\7\u0095\2\2\u0559\u055b\7v\2\2\u055a\u0559")
        buf.write(u"\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055c\3\2\2\2\u055c")
        buf.write(u"\u0561\5b\62\2\u055d\u055e\7\7\2\2\u055e\u0560\5b\62")
        buf.write(u"\2\u055f\u055d\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f")
        buf.write(u"\3\2\2\2\u0561\u0562\3\2\2\2\u0562[\3\2\2\2\u0563\u0561")
        buf.write(u"\3\2\2\2\u0564\u0565\5\u0084C\2\u0565\u0566\7\4\2\2\u0566")
        buf.write(u"\u0568\3\2\2\2\u0567\u0564\3\2\2\2\u0567\u0568\3\2\2")
        buf.write(u"\2\u0568\u0569\3\2\2\2\u0569\u056f\5\u0088E\2\u056a\u056b")
        buf.write(u"\7W\2\2\u056b\u056c\7*\2\2\u056c\u0570\5\u0094K\2\u056d")
        buf.write(u"\u056e\7h\2\2\u056e\u0570\7W\2\2\u056f\u056a\3\2\2\2")
        buf.write(u"\u056f\u056d\3\2\2\2\u056f\u0570\3\2\2\2\u0570]\3\2\2")
        buf.write(u"\2\u0571\u0574\5P)\2\u0572\u0573\7/\2\2\u0573\u0575\5")
        buf.write(u"\u0090I\2\u0574\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575")
        buf.write(u"\u0577\3\2\2\2\u0576\u0578\t\7\2\2\u0577\u0576\3\2\2")
        buf.write(u"\2\u0577\u0578\3\2\2\2\u0578_\3\2\2\2\u0579\u057d\5r")
        buf.write(u":\2\u057a\u057d\5\u0080A\2\u057b\u057d\7\u009b\2\2\u057c")
        buf.write(u"\u0579\3\2\2\2\u057c\u057a\3\2\2\2\u057c\u057b\3\2\2")
        buf.write(u"\2\u057da\3\2\2\2\u057e\u058a\5\u0088E\2\u057f\u0580")
        buf.write(u"\7\5\2\2\u0580\u0585\5\u008eH\2\u0581\u0582\7\7\2\2\u0582")
        buf.write(u"\u0584\5\u008eH\2\u0583\u0581\3\2\2\2\u0584\u0587\3\2")
        buf.write(u"\2\2\u0585\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0588")
        buf.write(u"\3\2\2\2\u0587\u0585\3\2\2\2\u0588\u0589\7\6\2\2\u0589")
        buf.write(u"\u058b\3\2\2\2\u058a\u057f\3\2\2\2\u058a\u058b\3\2\2")
        buf.write(u"\2\u058b\u058c\3\2\2\2\u058c\u058d\7#\2\2\u058d\u058e")
        buf.write(u"\7\5\2\2\u058e\u058f\5> \2\u058f\u0590\7\6\2\2\u0590")
        buf.write(u"c\3\2\2\2\u0591\u059e\7\t\2\2\u0592\u0593\5\u0088E\2")
        buf.write(u"\u0593\u0594\7\4\2\2\u0594\u0595\7\t\2\2\u0595\u059e")
        buf.write(u"\3\2\2\2\u0596\u059b\5P)\2\u0597\u0599\7#\2\2\u0598\u0597")
        buf.write(u"\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write(u"\u059c\5|?\2\u059b\u0598\3\2\2\2\u059b\u059c\3\2\2\2")
        buf.write(u"\u059c\u059e\3\2\2\2\u059d\u0591\3\2\2\2\u059d\u0592")
        buf.write(u"\3\2\2\2\u059d\u0596\3\2\2\2\u059ee\3\2\2\2\u059f\u05a0")
        buf.write(u"\5\u0084C\2\u05a0\u05a1\7\4\2\2\u05a1\u05a3\3\2\2\2\u05a2")
        buf.write(u"\u059f\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\3\2\2")
        buf.write(u"\2\u05a4\u05a9\5\u0088E\2\u05a5\u05a7\7#\2\2\u05a6\u05a5")
        buf.write(u"\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8")
        buf.write(u"\u05aa\5\u00a0Q\2\u05a9\u05a6\3\2\2\2\u05a9\u05aa\3\2")
        buf.write(u"\2\2\u05aa\u05b0\3\2\2\2\u05ab\u05ac\7W\2\2\u05ac\u05ad")
        buf.write(u"\7*\2\2\u05ad\u05b1\5\u0094K\2\u05ae\u05af\7h\2\2\u05af")
        buf.write(u"\u05b1\7W\2\2\u05b0\u05ab\3\2\2\2\u05b0\u05ae\3\2\2\2")
        buf.write(u"\u05b0\u05b1\3\2\2\2\u05b1\u05e7\3\2\2\2\u05b2\u05b3")
        buf.write(u"\5\u0084C\2\u05b3\u05b4\7\4\2\2\u05b4\u05b6\3\2\2\2\u05b5")
        buf.write(u"\u05b2\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2\2")
        buf.write(u"\2\u05b7\u05b8\5\u0086D\2\u05b8\u05c1\7\5\2\2\u05b9\u05be")
        buf.write(u"\5P)\2\u05ba\u05bb\7\7\2\2\u05bb\u05bd\5P)\2\u05bc\u05ba")
        buf.write(u"\3\2\2\2\u05bd\u05c0\3\2\2\2\u05be\u05bc\3\2\2\2\u05be")
        buf.write(u"\u05bf\3\2\2\2\u05bf\u05c2\3\2\2\2\u05c0\u05be\3\2\2")
        buf.write(u"\2\u05c1\u05b9\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3")
        buf.write(u"\3\2\2\2\u05c3\u05c8\7\6\2\2\u05c4\u05c6\7#\2\2\u05c5")
        buf.write(u"\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\3\2\2")
        buf.write(u"\2\u05c7\u05c9\5\u00a0Q\2\u05c8\u05c5\3\2\2\2\u05c8\u05c9")
        buf.write(u"\3\2\2\2\u05c9\u05e7\3\2\2\2\u05ca\u05d4\7\5\2\2\u05cb")
        buf.write(u"\u05d0\5f\64\2\u05cc\u05cd\7\7\2\2\u05cd\u05cf\5f\64")
        buf.write(u"\2\u05ce\u05cc\3\2\2\2\u05cf\u05d2\3\2\2\2\u05d0\u05ce")
        buf.write(u"\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05d5\3\2\2\2\u05d2")
        buf.write(u"\u05d0\3\2\2\2\u05d3\u05d5\5h\65\2\u05d4\u05cb\3\2\2")
        buf.write(u"\2\u05d4\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05db")
        buf.write(u"\7\6\2\2\u05d7\u05d9\7#\2\2\u05d8\u05d7\3\2\2\2\u05d8")
        buf.write(u"\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\5\u00a0")
        buf.write(u"Q\2\u05db\u05d8\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05e7")
        buf.write(u"\3\2\2\2\u05dd\u05de\7\5\2\2\u05de\u05df\5> \2\u05df")
        buf.write(u"\u05e4\7\6\2\2\u05e0\u05e2\7#\2\2\u05e1\u05e0\3\2\2\2")
        buf.write(u"\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5")
        buf.write(u"\5\u00a0Q\2\u05e4\u05e1\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5")
        buf.write(u"\u05e7\3\2\2\2\u05e6\u05a2\3\2\2\2\u05e6\u05b5\3\2\2")
        buf.write(u"\2\u05e6\u05ca\3\2\2\2\u05e6\u05dd\3\2\2\2\u05e7g\3\2")
        buf.write(u"\2\2\u05e8\u05ef\5f\64\2\u05e9\u05ea\5j\66\2\u05ea\u05eb")
        buf.write(u"\5f\64\2\u05eb\u05ec\5l\67\2\u05ec\u05ee\3\2\2\2\u05ed")
        buf.write(u"\u05e9\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05ed\3\2\2")
        buf.write(u"\2\u05ef\u05f0\3\2\2\2\u05f0i\3\2\2\2\u05f1\u05ef\3\2")
        buf.write(u"\2\2\u05f2\u0600\7\7\2\2\u05f3\u05f5\7f\2\2\u05f4\u05f3")
        buf.write(u"\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05fc\3\2\2\2\u05f6")
        buf.write(u"\u05f8\7b\2\2\u05f7\u05f9\7p\2\2\u05f8\u05f7\3\2\2\2")
        buf.write(u"\u05f8\u05f9\3\2\2\2\u05f9\u05fd\3\2\2\2\u05fa\u05fd")
        buf.write(u"\7Y\2\2\u05fb\u05fd\7\65\2\2\u05fc\u05f6\3\2\2\2\u05fc")
        buf.write(u"\u05fa\3\2\2\2\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2")
        buf.write(u"\2\u05fd\u05fe\3\2\2\2\u05fe\u0600\7`\2\2\u05ff\u05f2")
        buf.write(u"\3\2\2\2\u05ff\u05f4\3\2\2\2\u0600k\3\2\2\2\u0601\u0602")
        buf.write(u"\7m\2\2\u0602\u0610\5P)\2\u0603\u0604\7\u008e\2\2\u0604")
        buf.write(u"\u0605\7\5\2\2\u0605\u060a\5\u008eH\2\u0606\u0607\7\7")
        buf.write(u"\2\2\u0607\u0609\5\u008eH\2\u0608\u0606\3\2\2\2\u0609")
        buf.write(u"\u060c\3\2\2\2\u060a\u0608\3\2\2\2\u060a\u060b\3\2\2")
        buf.write(u"\2\u060b\u060d\3\2\2\2\u060c\u060a\3\2\2\2\u060d\u060e")
        buf.write(u"\7\6\2\2\u060e\u0610\3\2\2\2\u060f\u0601\3\2\2\2\u060f")
        buf.write(u"\u0603\3\2\2\2\u060f\u0610\3\2\2\2\u0610m\3\2\2\2\u0611")
        buf.write(u"\u0613\7\u0082\2\2\u0612\u0614\t\6\2\2\u0613\u0612\3")
        buf.write(u"\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2\2\u0615")
        buf.write(u"\u061a\5d\63\2\u0616\u0617\7\7\2\2\u0617\u0619\5d\63")
        buf.write(u"\2\u0618\u0616\3\2\2\2\u0619\u061c\3\2\2\2\u061a\u0618")
        buf.write(u"\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u0629\3\2\2\2\u061c")
        buf.write(u"\u061a\3\2\2\2\u061d\u0627\7M\2\2\u061e\u0623\5f\64\2")
        buf.write(u"\u061f\u0620\7\7\2\2\u0620\u0622\5f\64\2\u0621\u061f")
        buf.write(u"\3\2\2\2\u0622\u0625\3\2\2\2\u0623\u0621\3\2\2\2\u0623")
        buf.write(u"\u0624\3\2\2\2\u0624\u0628\3\2\2\2\u0625\u0623\3\2\2")
        buf.write(u"\2\u0626\u0628\5h\65\2\u0627\u061e\3\2\2\2\u0627\u0626")
        buf.write(u"\3\2\2\2\u0628\u062a\3\2\2\2\u0629\u061d\3\2\2\2\u0629")
        buf.write(u"\u062a\3\2\2\2\u062a\u062d\3\2\2\2\u062b\u062c\7\u0094")
        buf.write(u"\2\2\u062c\u062e\5P)\2\u062d\u062b\3\2\2\2\u062d\u062e")
        buf.write(u"\3\2\2\2\u062e\u063d\3\2\2\2\u062f\u0630\7P\2\2\u0630")
        buf.write(u"\u0631\7*\2\2\u0631\u0636\5P)\2\u0632\u0633\7\7\2\2\u0633")
        buf.write(u"\u0635\5P)\2\u0634\u0632\3\2\2\2\u0635\u0638\3\2\2\2")
        buf.write(u"\u0636\u0634\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063b")
        buf.write(u"\3\2\2\2\u0638\u0636\3\2\2\2\u0639\u063a\7Q\2\2\u063a")
        buf.write(u"\u063c\5P)\2\u063b\u0639\3\2\2\2\u063b\u063c\3\2\2\2")
        buf.write(u"\u063c\u063e\3\2\2\2\u063d\u062f\3\2\2\2\u063d\u063e")
        buf.write(u"\3\2\2\2\u063e\u065c\3\2\2\2\u063f\u0640\7\u0090\2\2")
        buf.write(u"\u0640\u0641\7\5\2\2\u0641\u0646\5P)\2\u0642\u0643\7")
        buf.write(u"\7\2\2\u0643\u0645\5P)\2\u0644\u0642\3\2\2\2\u0645\u0648")
        buf.write(u"\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2\u0647")
        buf.write(u"\u0649\3\2\2\2\u0648\u0646\3\2\2\2\u0649\u0658\7\6\2")
        buf.write(u"\2\u064a\u064b\7\7\2\2\u064b\u064c\7\5\2\2\u064c\u0651")
        buf.write(u"\5P)\2\u064d\u064e\7\7\2\2\u064e\u0650\5P)\2\u064f\u064d")
        buf.write(u"\3\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651")
        buf.write(u"\u0652\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0651\3\2\2")
        buf.write(u"\2\u0654\u0655\7\6\2\2\u0655\u0657\3\2\2\2\u0656\u064a")
        buf.write(u"\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656\3\2\2\2\u0658")
        buf.write(u"\u0659\3\2\2\2\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2")
        buf.write(u"\2\u065b\u0611\3\2\2\2\u065b\u063f\3\2\2\2\u065co\3\2")
        buf.write(u"\2\2\u065d\u0663\7\u008b\2\2\u065e\u065f\7\u008b\2\2")
        buf.write(u"\u065f\u0663\7\37\2\2\u0660\u0663\7\\\2\2\u0661\u0663")
        buf.write(u"\7F\2\2\u0662\u065d\3\2\2\2\u0662\u065e\3\2\2\2\u0662")
        buf.write(u"\u0660\3\2\2\2\u0662\u0661\3\2\2\2\u0663q\3\2\2\2\u0664")
        buf.write(u"\u0666\t\n\2\2\u0665\u0664\3\2\2\2\u0665\u0666\3\2\2")
        buf.write(u"\2\u0666\u0667\3\2\2\2\u0667\u0668\7\u0099\2\2\u0668")
        buf.write(u"s\3\2\2\2\u0669\u066a\t\20\2\2\u066au\3\2\2\2\u066b\u066c")
        buf.write(u"\t\21\2\2\u066cw\3\2\2\2\u066d\u066e\7\u009b\2\2\u066e")
        buf.write(u"y\3\2\2\2\u066f\u0672\5H%\2\u0670\u0672\5P)\2\u0671\u066f")
        buf.write(u"\3\2\2\2\u0671\u0670\3\2\2\2\u0672{\3\2\2\2\u0673\u0674")
        buf.write(u"\t\22\2\2\u0674}\3\2\2\2\u0675\u0676\t\23\2\2\u0676\177")
        buf.write(u"\3\2\2\2\u0677\u0678\5\u00a4S\2\u0678\u0081\3\2\2\2\u0679")
        buf.write(u"\u067a\5\u00a4S\2\u067a\u0083\3\2\2\2\u067b\u067c\5\u00a4")
        buf.write(u"S\2\u067c\u0085\3\2\2\2\u067d\u067e\5\u00a4S\2\u067e")
        buf.write(u"\u0087\3\2\2\2\u067f\u0680\5\u00a4S\2\u0680\u0089\3\2")
        buf.write(u"\2\2\u0681\u0682\5\u00a4S\2\u0682\u008b\3\2\2\2\u0683")
        buf.write(u"\u0684\5\u00a4S\2\u0684\u008d\3\2\2\2\u0685\u0686\5\u00a4")
        buf.write(u"S\2\u0686\u008f\3\2\2\2\u0687\u0688\5\u00a4S\2\u0688")
        buf.write(u"\u0091\3\2\2\2\u0689\u068a\5\u00a4S\2\u068a\u0093\3\2")
        buf.write(u"\2\2\u068b\u068c\5\u00a4S\2\u068c\u0095\3\2\2\2\u068d")
        buf.write(u"\u068e\5\u00a4S\2\u068e\u0097\3\2\2\2\u068f\u0690\5\u00a4")
        buf.write(u"S\2\u0690\u0099\3\2\2\2\u0691\u0692\5\u00a4S\2\u0692")
        buf.write(u"\u009b\3\2\2\2\u0693\u0694\5\u00a4S\2\u0694\u009d\3\2")
        buf.write(u"\2\2\u0695\u0696\5\u00a4S\2\u0696\u009f\3\2\2\2\u0697")
        buf.write(u"\u069e\7\u0098\2\2\u0698\u069e\7\u009b\2\2\u0699\u069a")
        buf.write(u"\7\5\2\2\u069a\u069b\5\u00a0Q\2\u069b\u069c\7\6\2\2\u069c")
        buf.write(u"\u069e\3\2\2\2\u069d\u0697\3\2\2\2\u069d\u0698\3\2\2")
        buf.write(u"\2\u069d\u0699\3\2\2\2\u069e\u00a1\3\2\2\2\u069f\u06a0")
        buf.write(u"\5\u00a4S\2\u06a0\u00a3\3\2\2\2\u06a1\u06a9\7\u0098\2")
        buf.write(u"\2\u06a2\u06a9\5~@\2\u06a3\u06a9\7\u009b\2\2\u06a4\u06a5")
        buf.write(u"\7\5\2\2\u06a5\u06a6\5\u00a4S\2\u06a6\u06a7\7\6\2\2\u06a7")
        buf.write(u"\u06a9\3\2\2\2\u06a8\u06a1\3\2\2\2\u06a8\u06a2\3\2\2")
        buf.write(u"\2\u06a8\u06a3\3\2\2\2\u06a8\u06a4\3\2\2\2\u06a9\u00a5")
        buf.write(u"\3\2\2\2\u00f3\u00a8\u00aa\u00b4\u00bb\u00c0\u00c6\u00cc")
        buf.write(u"\u00ce\u00ee\u00f5\u00fd\u0100\u0109\u010d\u0115\u0119")
        buf.write(u"\u011b\u0120\u0122\u0125\u012a\u012e\u0133\u013c\u013f")
        buf.write(u"\u0145\u0147\u014b\u0151\u0156\u0161\u0167\u016b\u0171")
        buf.write(u"\u0176\u017f\u0186\u018c\u0190\u0194\u019a\u019f\u01a6")
        buf.write(u"\u01b1\u01b4\u01b6\u01bc\u01c2\u01c6\u01cd\u01d3\u01d9")
        buf.write(u"\u01df\u01e4\u01ed\u01f2\u01fd\u0202\u020d\u0212\u0215")
        buf.write(u"\u021c\u021f\u0226\u022f\u0232\u0238\u023a\u023e\u0246")
        buf.write(u"\u024b\u0253\u0258\u0260\u0265\u026d\u0272\u0277\u027f")
        buf.write(u"\u0289\u028c\u0292\u0294\u0297\u02aa\u02b0\u02b9\u02be")
        buf.write(u"\u02c7\u02d2\u02d9\u02df\u02e5\u02ee\u02f5\u02f9\u02fb")
        buf.write(u"\u02ff\u0306\u0308\u030c\u030f\u0315\u031f\u0322\u0328")
        buf.write(u"\u032a\u032d\u0335\u033f\u0342\u0348\u034a\u034e\u0355")
        buf.write(u"\u035e\u0362\u0364\u0368\u0371\u0376\u0378\u0381\u038c")
        buf.write(u"\u0393\u0396\u0399\u03a6\u03b4\u03b9\u03bc\u03c9\u03d7")
        buf.write(u"\u03dc\u03e5\u03e8\u03ee\u03f0\u03f6\u03fb\u0401\u040d")
        buf.write(u"\u0412\u0416\u0419\u042b\u0430\u0435\u043d\u0442\u044b")
        buf.write(u"\u0452\u0456\u0466\u0469\u0471\u047a\u047e\u0483\u04a1")
        buf.write(u"\u04ad\u04b2\u04be\u04c4\u04cb\u04cf\u04d9\u04dc\u04e2")
        buf.write(u"\u04e5\u04e7\u04e9\u04f4\u04f9\u0505\u0509\u050d\u0511")
        buf.write(u"\u0518\u051a\u0522\u0529\u052c\u0530\u0535\u053d\u0550")
        buf.write(u"\u0556\u055a\u0561\u0567\u056f\u0574\u0577\u057c\u0585")
        buf.write(u"\u058a\u0598\u059b\u059d\u05a2\u05a6\u05a9\u05b0\u05b5")
        buf.write(u"\u05be\u05c1\u05c5\u05c8\u05d0\u05d4\u05d8\u05db\u05e1")
        buf.write(u"\u05e4\u05e6\u05ef\u05f4\u05f8\u05fc\u05ff\u060a\u060f")
        buf.write(u"\u0613\u061a\u0623\u0627\u0629\u062d\u0636\u063b\u063d")
        buf.write(u"\u0646\u0651\u0658\u065b\u0662\u0665\u0671\u069d\u06a8")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'.'", u"'('", u"')'", u"','", 
                     u"'='", u"'*'", u"'+'", u"'-'", u"'~'", u"'||'", u"'/'", 
                     u"'%'", u"'<<'", u"'>>'", u"'&'", u"'|'", u"'<'", u"'<='", 
                     u"'>'", u"'>='", u"'=='", u"'!='", u"'<>'" ]

    symbolicNames = [ u"<INVALID>", u"SCOL", u"DOT", u"OPEN_PAR", u"CLOSE_PAR", 
                      u"COMMA", u"ASSIGN", u"STAR", u"PLUS", u"MINUS", u"TILDE", 
                      u"PIPE2", u"DIV", u"MOD", u"LT2", u"GT2", u"AMP", 
                      u"PIPE", u"LT", u"LT_EQ", u"GT", u"GT_EQ", u"EQ", 
                      u"NOT_EQ1", u"NOT_EQ2", u"K_ABORT", u"K_ACTION", u"K_ADD", 
                      u"K_AFTER", u"K_ALL", u"K_ALTER", u"K_ANALYZE", u"K_AND", 
                      u"K_AS", u"K_ASC", u"K_ATTACH", u"K_AUTOINCREMENT", 
                      u"K_BEFORE", u"K_BEGIN", u"K_BETWEEN", u"K_BY", u"K_CASCADE", 
                      u"K_CASE", u"K_CAST", u"K_CHECK", u"K_COLLATE", u"K_COLUMN", 
                      u"K_COMMIT", u"K_CONFLICT", u"K_CONSTRAINT", u"K_CREATE", 
                      u"K_CROSS", u"K_CURRENT_DATE", u"K_CURRENT_TIME", 
                      u"K_CURRENT_TIMESTAMP", u"K_DATABASE", u"K_DEFAULT", 
                      u"K_DEFERRABLE", u"K_DEFERRED", u"K_DELETE", u"K_DESC", 
                      u"K_DETACH", u"K_DISTINCT", u"K_DROP", u"K_EACH", 
                      u"K_ELSE", u"K_END", u"K_ESCAPE", u"K_EXCEPT", u"K_EXCLUSIVE", 
                      u"K_EXISTS", u"K_EXPLAIN", u"K_FAIL", u"K_FOR", u"K_FOREIGN", 
                      u"K_FROM", u"K_FULL", u"K_GLOB", u"K_GROUP", u"K_HAVING", 
                      u"K_IF", u"K_IGNORE", u"K_IMMEDIATE", u"K_IN", u"K_INDEX", 
                      u"K_INDEXED", u"K_INITIALLY", u"K_INNER", u"K_INSERT", 
                      u"K_INSTEAD", u"K_INTERSECT", u"K_INTO", u"K_IS", 
                      u"K_ISNULL", u"K_JOIN", u"K_KEY", u"K_LEFT", u"K_LIKE", 
                      u"K_LIMIT", u"K_MATCH", u"K_NATURAL", u"K_NO", u"K_NOT", 
                      u"K_NOTNULL", u"K_NULL", u"K_OF", u"K_OFFSET", u"K_ON", 
                      u"K_OR", u"K_ORDER", u"K_OUTER", u"K_PLAN", u"K_PRAGMA", 
                      u"K_PRIMARY", u"K_QUERY", u"K_RAISE", u"K_RECURSIVE", 
                      u"K_REFERENCES", u"K_REGEXP", u"K_REINDEX", u"K_RELEASE", 
                      u"K_RENAME", u"K_REPLACE", u"K_RESTRICT", u"K_RIGHT", 
                      u"K_ROLLBACK", u"K_ROW", u"K_SAVEPOINT", u"K_SELECT", 
                      u"K_SET", u"K_TABLE", u"K_TEMP", u"K_TEMPORARY", u"K_THEN", 
                      u"K_TO", u"K_TRANSACTION", u"K_TRIGGER", u"K_UNION", 
                      u"K_UNIQUE", u"K_UPDATE", u"K_USING", u"K_VACUUM", 
                      u"K_VALUES", u"K_VIEW", u"K_VIRTUAL", u"K_WHEN", u"K_WHERE", 
                      u"K_WITH", u"K_WITHOUT", u"C_ROWID", u"IDENTIFIER", 
                      u"NUMERIC_LITERAL", u"BIND_PARAMETER", u"STRING_LITERAL", 
                      u"BLOB_LITERAL", u"SINGLE_LINE_COMMENT", u"MULTILINE_COMMENT", 
                      u"SPACES", u"UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_compound_select_stmt = 9
    RULE_create_index_stmt = 10
    RULE_create_table_stmt = 11
    RULE_create_trigger_stmt = 12
    RULE_create_view_stmt = 13
    RULE_create_virtual_table_stmt = 14
    RULE_delete_stmt = 15
    RULE_delete_stmt_limited = 16
    RULE_detach_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_drop_trigger_stmt = 20
    RULE_drop_view_stmt = 21
    RULE_factored_select_stmt = 22
    RULE_insert_stmt = 23
    RULE_pragma_stmt = 24
    RULE_reindex_stmt = 25
    RULE_release_stmt = 26
    RULE_rollback_stmt = 27
    RULE_savepoint_stmt = 28
    RULE_simple_select_stmt = 29
    RULE_select_stmt = 30
    RULE_select_or_values = 31
    RULE_update_stmt = 32
    RULE_update_stmt_limited = 33
    RULE_vacuum_stmt = 34
    RULE_column_def = 35
    RULE_type_name = 36
    RULE_column_constraint = 37
    RULE_conflict_clause = 38
    RULE_expr = 39
    RULE_foreign_key_clause = 40
    RULE_raise_function = 41
    RULE_indexed_column = 42
    RULE_table_constraint = 43
    RULE_with_clause = 44
    RULE_qualified_table_name = 45
    RULE_ordering_term = 46
    RULE_pragma_value = 47
    RULE_common_table_expression = 48
    RULE_result_column = 49
    RULE_table_or_subquery = 50
    RULE_join_clause = 51
    RULE_join_operator = 52
    RULE_join_constraint = 53
    RULE_select_core = 54
    RULE_compound_operator = 55
    RULE_signed_number = 56
    RULE_literal_value = 57
    RULE_unary_operator = 58
    RULE_error_message = 59
    RULE_module_argument = 60
    RULE_column_alias = 61
    RULE_keyword = 62
    RULE_name = 63
    RULE_function_name = 64
    RULE_database_name = 65
    RULE_table_function_name = 66
    RULE_table_name = 67
    RULE_table_or_index_name = 68
    RULE_new_table_name = 69
    RULE_column_name = 70
    RULE_collation_name = 71
    RULE_foreign_table = 72
    RULE_index_name = 73
    RULE_trigger_name = 74
    RULE_view_name = 75
    RULE_module_name = 76
    RULE_pragma_name = 77
    RULE_savepoint_name = 78
    RULE_table_alias = 79
    RULE_transaction_name = 80
    RULE_any_name = 81

    ruleNames =  [ u"parse", u"error", u"sql_stmt_list", u"sql_stmt", u"alter_table_stmt", 
                   u"analyze_stmt", u"attach_stmt", u"begin_stmt", u"commit_stmt", 
                   u"compound_select_stmt", u"create_index_stmt", u"create_table_stmt", 
                   u"create_trigger_stmt", u"create_view_stmt", u"create_virtual_table_stmt", 
                   u"delete_stmt", u"delete_stmt_limited", u"detach_stmt", 
                   u"drop_index_stmt", u"drop_table_stmt", u"drop_trigger_stmt", 
                   u"drop_view_stmt", u"factored_select_stmt", u"insert_stmt", 
                   u"pragma_stmt", u"reindex_stmt", u"release_stmt", u"rollback_stmt", 
                   u"savepoint_stmt", u"simple_select_stmt", u"select_stmt", 
                   u"select_or_values", u"update_stmt", u"update_stmt_limited", 
                   u"vacuum_stmt", u"column_def", u"type_name", u"column_constraint", 
                   u"conflict_clause", u"expr", u"foreign_key_clause", u"raise_function", 
                   u"indexed_column", u"table_constraint", u"with_clause", 
                   u"qualified_table_name", u"ordering_term", u"pragma_value", 
                   u"common_table_expression", u"result_column", u"table_or_subquery", 
                   u"join_clause", u"join_operator", u"join_constraint", 
                   u"select_core", u"compound_operator", u"signed_number", 
                   u"literal_value", u"unary_operator", u"error_message", 
                   u"module_argument", u"column_alias", u"keyword", u"name", 
                   u"function_name", u"database_name", u"table_function_name", 
                   u"table_name", u"table_or_index_name", u"new_table_name", 
                   u"column_name", u"collation_name", u"foreign_table", 
                   u"index_name", u"trigger_name", u"view_name", u"module_name", 
                   u"pragma_name", u"savepoint_name", u"table_alias", u"transaction_name", 
                   u"any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    C_ROWID=149
    IDENTIFIER=150
    NUMERIC_LITERAL=151
    BIND_PARAMETER=152
    STRING_LITERAL=153
    BLOB_LITERAL=154
    SINGLE_LINE_COMMENT=155
    MULTILINE_COMMENT=156
    SPACES=157
    UNEXPECTED_CHAR=158

    def __init__(self, input, output=sys.stdout):
        super(SQLiteParser, self).__init__(input, output=output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ParseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_ATTACH) | (1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_CREATE) | (1 << SQLiteParser.K_DELETE) | (1 << SQLiteParser.K_DETACH) | (1 << SQLiteParser.K_DROP))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.K_END - 66)) | (1 << (SQLiteParser.K_EXPLAIN - 66)) | (1 << (SQLiteParser.K_INSERT - 66)) | (1 << (SQLiteParser.K_PRAGMA - 66)) | (1 << (SQLiteParser.K_REINDEX - 66)) | (1 << (SQLiteParser.K_RELEASE - 66)) | (1 << (SQLiteParser.K_REPLACE - 66)) | (1 << (SQLiteParser.K_ROLLBACK - 66)) | (1 << (SQLiteParser.K_SAVEPOINT - 66)) | (1 << (SQLiteParser.K_SELECT - 66)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (SQLiteParser.K_UPDATE - 139)) | (1 << (SQLiteParser.K_VACUUM - 139)) | (1 << (SQLiteParser.K_VALUES - 139)) | (1 << (SQLiteParser.K_WITH - 139)) | (1 << (SQLiteParser.UNEXPECTED_CHAR - 139)))) != 0):
                self.state = 166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH]:
                    self.state = 164
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 165
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(SQLiteParser.UNEXPECTED_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 175
                self.match(SQLiteParser.SCOL)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 181
            self.sql_stmt()
            self.state = 190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 183 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 182
                        self.match(SQLiteParser.SCOL)
                        self.state = 185 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 187
                    self.sql_stmt() 
                self.state = 192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 193
                    self.match(SQLiteParser.SCOL) 
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_table_stmtContext,0)


        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_trigger_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_view_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_EXPLAIN:
                self.state = 199
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_QUERY:
                    self.state = 200
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 201
                    self.match(SQLiteParser.K_PLAN)




            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 206
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 207
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 208
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 209
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 210
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 211
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 212
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 213
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 214
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 215
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 216
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 217
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 218
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 219
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 220
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 221
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 222
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 223
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 224
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 225
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 226
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 227
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 228
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 229
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 230
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 231
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 232
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 233
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 234
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 235
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Alter_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAlter_table_stmt"):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlter_table_stmt"):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(SQLiteParser.K_ALTER)
            self.state = 239
            self.match(SQLiteParser.K_TABLE)
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 240
                self.database_name()
                self.state = 241
                self.match(SQLiteParser.DOT)


            self.state = 245
            self.table_name()
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_RENAME]:
                self.state = 246
                self.match(SQLiteParser.K_RENAME)
                self.state = 247
                self.match(SQLiteParser.K_TO)
                self.state = 248
                self.new_table_name()
                pass
            elif token in [SQLiteParser.K_ADD]:
                self.state = 249
                self.match(SQLiteParser.K_ADD)
                self.state = 251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 250
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 253
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Analyze_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 257
                self.database_name()

            elif la_ == 2:
                self.state = 258
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 259
                self.database_name()
                self.state = 260
                self.match(SQLiteParser.DOT)
                self.state = 261
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Attach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(SQLiteParser.K_ATTACH)
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 266
                self.match(SQLiteParser.K_DATABASE)


            self.state = 269
            self.expr(0)
            self.state = 270
            self.match(SQLiteParser.K_AS)
            self.state = 271
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Begin_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(SQLiteParser.K_BEGIN)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0):
                self.state = 274
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 277
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 278
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Commit_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.K_COMMIT or _la==SQLiteParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 284
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_UNION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ALL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 290
                self.with_clause()


            self.state = 293
            self.select_core()
            self.state = 303 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_UNION]:
                    self.state = 294
                    self.match(SQLiteParser.K_UNION)
                    self.state = 296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_ALL:
                        self.state = 295
                        self.match(SQLiteParser.K_ALL)


                    pass
                elif token in [SQLiteParser.K_INTERSECT]:
                    self.state = 298
                    self.match(SQLiteParser.K_INTERSECT)
                    pass
                elif token in [SQLiteParser.K_EXCEPT]:
                    self.state = 299
                    self.match(SQLiteParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 302
                self.select_core()
                self.state = 305 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION):
                    break

            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 307
                self.match(SQLiteParser.K_ORDER)
                self.state = 308
                self.match(SQLiteParser.K_BY)
                self.state = 309
                self.ordering_term()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 310
                    self.match(SQLiteParser.COMMA)
                    self.state = 311
                    self.ordering_term()
                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 319
                self.match(SQLiteParser.K_LIMIT)
                self.state = 320
                self.expr(0)
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 321
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 322
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_index_stmt"):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_index_stmt"):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(SQLiteParser.K_CREATE)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_UNIQUE:
                self.state = 328
                self.match(SQLiteParser.K_UNIQUE)


            self.state = 331
            self.match(SQLiteParser.K_INDEX)
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 332
                self.match(SQLiteParser.K_IF)
                self.state = 333
                self.match(SQLiteParser.K_NOT)
                self.state = 334
                self.match(SQLiteParser.K_EXISTS)


            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 337
                self.database_name()
                self.state = 338
                self.match(SQLiteParser.DOT)


            self.state = 342
            self.index_name()
            self.state = 343
            self.match(SQLiteParser.K_ON)
            self.state = 344
            self.table_name()
            self.state = 345
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 346
            self.indexed_column()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 347
                self.match(SQLiteParser.COMMA)
                self.state = 348
                self.indexed_column()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 354
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 355
                self.match(SQLiteParser.K_WHERE)
                self.state = 356
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def C_ROWID(self):
            return self.getToken(SQLiteParser.C_ROWID, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_table_stmt"):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_table_stmt"):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(SQLiteParser.K_CREATE)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 360
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 363
            self.match(SQLiteParser.K_TABLE)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 364
                self.match(SQLiteParser.K_IF)
                self.state = 365
                self.match(SQLiteParser.K_NOT)
                self.state = 366
                self.match(SQLiteParser.K_EXISTS)


            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 369
                self.database_name()
                self.state = 370
                self.match(SQLiteParser.DOT)


            self.state = 374
            self.table_name()
            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 375
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 376
                self.column_def()
                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 377
                        self.match(SQLiteParser.COMMA)
                        self.state = 378
                        self.column_def() 
                    self.state = 383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 384
                    self.match(SQLiteParser.COMMA)
                    self.state = 385
                    self.table_constraint()
                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 391
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WITHOUT:
                    self.state = 392
                    self.match(SQLiteParser.K_WITHOUT)
                    self.state = 393
                    self.match(SQLiteParser.C_ROWID)


                pass
            elif token in [SQLiteParser.K_AS]:
                self.state = 396
                self.match(SQLiteParser.K_AS)
                self.state = 397
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Database_nameContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_OF(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_OF)
            else:
                return self.getToken(SQLiteParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_trigger_stmt"):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_trigger_stmt"):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(SQLiteParser.K_CREATE)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 401
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 404
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 405
                self.match(SQLiteParser.K_IF)
                self.state = 406
                self.match(SQLiteParser.K_NOT)
                self.state = 407
                self.match(SQLiteParser.K_EXISTS)


            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 410
                self.database_name()
                self.state = 411
                self.match(SQLiteParser.DOT)


            self.state = 415
            self.trigger_name()
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_BEFORE]:
                self.state = 416
                self.match(SQLiteParser.K_BEFORE)
                pass
            elif token in [SQLiteParser.K_AFTER]:
                self.state = 417
                self.match(SQLiteParser.K_AFTER)
                pass
            elif token in [SQLiteParser.K_INSTEAD]:
                self.state = 418
                self.match(SQLiteParser.K_INSTEAD)
                self.state = 419
                self.match(SQLiteParser.K_OF)
                pass
            elif token in [SQLiteParser.K_DELETE, SQLiteParser.K_INSERT, SQLiteParser.K_UPDATE]:
                pass
            else:
                pass
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_DELETE]:
                self.state = 422
                self.match(SQLiteParser.K_DELETE)
                pass
            elif token in [SQLiteParser.K_INSERT]:
                self.state = 423
                self.match(SQLiteParser.K_INSERT)
                pass
            elif token in [SQLiteParser.K_UPDATE]:
                self.state = 424
                self.match(SQLiteParser.K_UPDATE)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_OF:
                    self.state = 425
                    self.match(SQLiteParser.K_OF)
                    self.state = 426
                    self.column_name()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 427
                        self.match(SQLiteParser.COMMA)
                        self.state = 428
                        self.column_name()
                        self.state = 433
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 438
            self.match(SQLiteParser.K_ON)
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 439
                self.database_name()
                self.state = 440
                self.match(SQLiteParser.DOT)


            self.state = 444
            self.table_name()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_FOR:
                self.state = 445
                self.match(SQLiteParser.K_FOR)
                self.state = 446
                self.match(SQLiteParser.K_EACH)
                self.state = 447
                self.match(SQLiteParser.K_ROW)


            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHEN:
                self.state = 450
                self.match(SQLiteParser.K_WHEN)
                self.state = 451
                self.expr(0)


            self.state = 454
            self.match(SQLiteParser.K_BEGIN)
            self.state = 463 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 455
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 456
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 457
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 458
                    self.select_stmt()
                    pass


                self.state = 461
                self.match(SQLiteParser.SCOL)
                self.state = 465 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_DELETE or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.K_INSERT - 88)) | (1 << (SQLiteParser.K_REPLACE - 88)) | (1 << (SQLiteParser.K_SELECT - 88)) | (1 << (SQLiteParser.K_UPDATE - 88)) | (1 << (SQLiteParser.K_VALUES - 88)) | (1 << (SQLiteParser.K_WITH - 88)))) != 0)):
                    break

            self.state = 467
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_view_stmt"):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_view_stmt"):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(SQLiteParser.K_CREATE)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 470
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 473
            self.match(SQLiteParser.K_VIEW)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 474
                self.match(SQLiteParser.K_IF)
                self.state = 475
                self.match(SQLiteParser.K_NOT)
                self.state = 476
                self.match(SQLiteParser.K_EXISTS)


            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 479
                self.database_name()
                self.state = 480
                self.match(SQLiteParser.DOT)


            self.state = 484
            self.view_name()
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 485
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 486
                self.column_name()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 487
                    self.match(SQLiteParser.COMMA)
                    self.state = 488
                    self.column_name()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 494
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 498
            self.match(SQLiteParser.K_AS)
            self.state = 499
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_virtual_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_virtual_table_stmt"):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_virtual_table_stmt"):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(SQLiteParser.K_CREATE)
            self.state = 502
            self.match(SQLiteParser.K_VIRTUAL)
            self.state = 503
            self.match(SQLiteParser.K_TABLE)
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 504
                self.match(SQLiteParser.K_IF)
                self.state = 505
                self.match(SQLiteParser.K_NOT)
                self.state = 506
                self.match(SQLiteParser.K_EXISTS)


            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 509
                self.database_name()
                self.state = 510
                self.match(SQLiteParser.DOT)


            self.state = 514
            self.table_name()
            self.state = 515
            self.match(SQLiteParser.K_USING)
            self.state = 516
            self.module_name()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 517
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 518
                self.module_argument()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 519
                    self.match(SQLiteParser.COMMA)
                    self.state = 520
                    self.module_argument()
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 526
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 530
                self.with_clause()


            self.state = 533
            self.match(SQLiteParser.K_DELETE)
            self.state = 534
            self.match(SQLiteParser.K_FROM)
            self.state = 535
            self.qualified_table_name()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 536
                self.match(SQLiteParser.K_WHERE)
                self.state = 537
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 540
                self.with_clause()


            self.state = 543
            self.match(SQLiteParser.K_DELETE)
            self.state = 544
            self.match(SQLiteParser.K_FROM)
            self.state = 545
            self.qualified_table_name()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 546
                self.match(SQLiteParser.K_WHERE)
                self.state = 547
                self.expr(0)


            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 550
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 551
                    self.match(SQLiteParser.K_BY)
                    self.state = 552
                    self.ordering_term()
                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 553
                        self.match(SQLiteParser.COMMA)
                        self.state = 554
                        self.ordering_term()
                        self.state = 559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 562
                self.match(SQLiteParser.K_LIMIT)
                self.state = 563
                self.expr(0)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 564
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 565
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Detach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(SQLiteParser.K_DETACH)
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 571
                self.match(SQLiteParser.K_DATABASE)


            self.state = 574
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_index_stmt"):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_index_stmt"):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = SQLiteParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SQLiteParser.K_DROP)
            self.state = 577
            self.match(SQLiteParser.K_INDEX)
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 578
                self.match(SQLiteParser.K_IF)
                self.state = 579
                self.match(SQLiteParser.K_EXISTS)


            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 582
                self.database_name()
                self.state = 583
                self.match(SQLiteParser.DOT)


            self.state = 587
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_table_stmt"):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_table_stmt"):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = SQLiteParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SQLiteParser.K_DROP)
            self.state = 590
            self.match(SQLiteParser.K_TABLE)
            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 591
                self.match(SQLiteParser.K_IF)
                self.state = 592
                self.match(SQLiteParser.K_EXISTS)


            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 595
                self.database_name()
                self.state = 596
                self.match(SQLiteParser.DOT)


            self.state = 600
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_trigger_stmt"):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_trigger_stmt"):
                listener.exitDrop_trigger_stmt(self)




    def drop_trigger_stmt(self):

        localctx = SQLiteParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(SQLiteParser.K_DROP)
            self.state = 603
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 604
                self.match(SQLiteParser.K_IF)
                self.state = 605
                self.match(SQLiteParser.K_EXISTS)


            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 608
                self.database_name()
                self.state = 609
                self.match(SQLiteParser.DOT)


            self.state = 613
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_view_stmt"):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_view_stmt"):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = SQLiteParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(SQLiteParser.K_DROP)
            self.state = 616
            self.match(SQLiteParser.K_VIEW)
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 617
                self.match(SQLiteParser.K_IF)
                self.state = 618
                self.match(SQLiteParser.K_EXISTS)


            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 621
                self.database_name()
                self.state = 622
                self.match(SQLiteParser.DOT)


            self.state = 626
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Factored_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 628
                self.with_clause()


            self.state = 631
            self.select_core()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 632
                self.compound_operator()
                self.state = 633
                self.select_core()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 640
                self.match(SQLiteParser.K_ORDER)
                self.state = 641
                self.match(SQLiteParser.K_BY)
                self.state = 642
                self.ordering_term()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 643
                    self.match(SQLiteParser.COMMA)
                    self.state = 644
                    self.ordering_term()
                    self.state = 649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 652
                self.match(SQLiteParser.K_LIMIT)
                self.state = 653
                self.expr(0)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 654
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 655
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Insert_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 660
                self.with_clause()


            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 664
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 665
                self.match(SQLiteParser.K_INSERT)
                self.state = 666
                self.match(SQLiteParser.K_OR)
                self.state = 667
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 668
                self.match(SQLiteParser.K_INSERT)
                self.state = 669
                self.match(SQLiteParser.K_OR)
                self.state = 670
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 671
                self.match(SQLiteParser.K_INSERT)
                self.state = 672
                self.match(SQLiteParser.K_OR)
                self.state = 673
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 674
                self.match(SQLiteParser.K_INSERT)
                self.state = 675
                self.match(SQLiteParser.K_OR)
                self.state = 676
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 677
                self.match(SQLiteParser.K_INSERT)
                self.state = 678
                self.match(SQLiteParser.K_OR)
                self.state = 679
                self.match(SQLiteParser.K_IGNORE)
                pass


            self.state = 682
            self.match(SQLiteParser.K_INTO)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 683
                self.database_name()
                self.state = 684
                self.match(SQLiteParser.DOT)


            self.state = 688
            self.table_name()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 689
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 690
                self.column_name()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 691
                    self.match(SQLiteParser.COMMA)
                    self.state = 692
                    self.column_name()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 698
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 702
                self.match(SQLiteParser.K_VALUES)
                self.state = 703
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 704
                self.expr(0)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 705
                    self.match(SQLiteParser.COMMA)
                    self.state = 706
                    self.expr(0)
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 712
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 713
                    self.match(SQLiteParser.COMMA)
                    self.state = 714
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 715
                    self.expr(0)
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 716
                        self.match(SQLiteParser.COMMA)
                        self.state = 717
                        self.expr(0)
                        self.state = 722
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 723
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 730
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 731
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 732
                self.match(SQLiteParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 736
                self.database_name()
                self.state = 737
                self.match(SQLiteParser.DOT)


            self.state = 741
            self.pragma_name()
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 742
                self.match(SQLiteParser.ASSIGN)
                self.state = 743
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 744
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 745
                self.pragma_value()
                self.state = 746
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Reindex_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterReindex_stmt"):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReindex_stmt"):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SQLiteParser.K_REINDEX)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 751
                self.collation_name()

            elif la_ == 2:
                self.state = 755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.database_name()
                    self.state = 753
                    self.match(SQLiteParser.DOT)


                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 758
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Release_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(SQLiteParser.K_RELEASE)
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 764
                self.match(SQLiteParser.K_SAVEPOINT)


            self.state = 767
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Rollback_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 770
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 771
                    self.transaction_name()




            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TO:
                self.state = 776
                self.match(SQLiteParser.K_TO)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.match(SQLiteParser.K_SAVEPOINT)


                self.state = 780
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 784
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Simple_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 786
                self.with_clause()


            self.state = 789
            self.select_core()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 790
                self.match(SQLiteParser.K_ORDER)
                self.state = 791
                self.match(SQLiteParser.K_BY)
                self.state = 792
                self.ordering_term()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 793
                    self.match(SQLiteParser.COMMA)
                    self.state = 794
                    self.ordering_term()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 802
                self.match(SQLiteParser.K_LIMIT)
                self.state = 803
                self.expr(0)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 804
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 805
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 810
                self.with_clause()


            self.state = 813
            self.select_or_values()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 814
                self.compound_operator()
                self.state = 815
                self.select_or_values()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 822
                self.match(SQLiteParser.K_ORDER)
                self.state = 823
                self.match(SQLiteParser.K_BY)
                self.state = 824
                self.ordering_term()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 825
                    self.match(SQLiteParser.COMMA)
                    self.state = 826
                    self.ordering_term()
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 834
                self.match(SQLiteParser.K_LIMIT)
                self.state = 835
                self.expr(0)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 836
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 837
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_or_valuesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_or_values

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = SQLiteParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.match(SQLiteParser.K_SELECT)
                self.state = 844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 843
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 846
                self.result_column()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 847
                    self.match(SQLiteParser.COMMA)
                    self.state = 848
                    self.result_column()
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 854
                    self.match(SQLiteParser.K_FROM)
                    self.state = 864
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 855
                        self.table_or_subquery()
                        self.state = 860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 856
                            self.match(SQLiteParser.COMMA)
                            self.state = 857
                            self.table_or_subquery()
                            self.state = 862
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 863
                        self.join_clause()
                        pass




                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 868
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 869
                    self.expr(0)


                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 872
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 873
                    self.match(SQLiteParser.K_BY)
                    self.state = 874
                    self.expr(0)
                    self.state = 879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 875
                        self.match(SQLiteParser.COMMA)
                        self.state = 876
                        self.expr(0)
                        self.state = 881
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 882
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 883
                        self.expr(0)




                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.match(SQLiteParser.K_VALUES)
                self.state = 889
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 890
                self.expr(0)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 891
                    self.match(SQLiteParser.COMMA)
                    self.state = 892
                    self.expr(0)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 898
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 899
                    self.match(SQLiteParser.COMMA)
                    self.state = 900
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 901
                    self.expr(0)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 902
                        self.match(SQLiteParser.COMMA)
                        self.state = 903
                        self.expr(0)
                        self.state = 908
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 909
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 918
                self.with_clause()


            self.state = 921
            self.match(SQLiteParser.K_UPDATE)
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 922
                self.match(SQLiteParser.K_OR)
                self.state = 923
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 924
                self.match(SQLiteParser.K_OR)
                self.state = 925
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 926
                self.match(SQLiteParser.K_OR)
                self.state = 927
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 928
                self.match(SQLiteParser.K_OR)
                self.state = 929
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 930
                self.match(SQLiteParser.K_OR)
                self.state = 931
                self.match(SQLiteParser.K_IGNORE)


            self.state = 934
            self.qualified_table_name()
            self.state = 935
            self.match(SQLiteParser.K_SET)
            self.state = 936
            self.column_name()
            self.state = 937
            self.match(SQLiteParser.ASSIGN)
            self.state = 938
            self.expr(0)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 939
                self.match(SQLiteParser.COMMA)
                self.state = 940
                self.column_name()
                self.state = 941
                self.match(SQLiteParser.ASSIGN)
                self.state = 942
                self.expr(0)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 949
                self.match(SQLiteParser.K_WHERE)
                self.state = 950
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 953
                self.with_clause()


            self.state = 956
            self.match(SQLiteParser.K_UPDATE)
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 957
                self.match(SQLiteParser.K_OR)
                self.state = 958
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 959
                self.match(SQLiteParser.K_OR)
                self.state = 960
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 961
                self.match(SQLiteParser.K_OR)
                self.state = 962
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 963
                self.match(SQLiteParser.K_OR)
                self.state = 964
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 965
                self.match(SQLiteParser.K_OR)
                self.state = 966
                self.match(SQLiteParser.K_IGNORE)


            self.state = 969
            self.qualified_table_name()
            self.state = 970
            self.match(SQLiteParser.K_SET)
            self.state = 971
            self.column_name()
            self.state = 972
            self.match(SQLiteParser.ASSIGN)
            self.state = 973
            self.expr(0)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 974
                self.match(SQLiteParser.COMMA)
                self.state = 975
                self.column_name()
                self.state = 976
                self.match(SQLiteParser.ASSIGN)
                self.state = 977
                self.expr(0)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 984
                self.match(SQLiteParser.K_WHERE)
                self.state = 985
                self.expr(0)


            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 988
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 989
                    self.match(SQLiteParser.K_BY)
                    self.state = 990
                    self.ordering_term()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 991
                        self.match(SQLiteParser.COMMA)
                        self.state = 992
                        self.ordering_term()
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1000
                self.match(SQLiteParser.K_LIMIT)
                self.state = 1001
                self.expr(0)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 1002
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1003
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Vacuum_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(SQLiteParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.column_name()
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1011
                self.type_name()


            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SQLiteParser.K_NOT - 102)) | (1 << (SQLiteParser.K_NULL - 102)) | (1 << (SQLiteParser.K_PRIMARY - 102)) | (1 << (SQLiteParser.K_REFERENCES - 102)) | (1 << (SQLiteParser.K_UNIQUE - 102)))) != 0):
                self.state = 1014
                self.column_constraint()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 1020
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 1023 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1025
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1026
                self.signed_number()
                self.state = 1027
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1029
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1030
                self.signed_number()
                self.state = 1031
                self.match(SQLiteParser.COMMA)
                self.state = 1032
                self.signed_number()
                self.state = 1033
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY]:
                self.state = 1037
                self.match(SQLiteParser.K_PRIMARY)
                self.state = 1038
                self.match(SQLiteParser.K_KEY)
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                    self.state = 1039
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1042
                self.conflict_clause()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AUTOINCREMENT:
                    self.state = 1043
                    self.match(SQLiteParser.K_AUTOINCREMENT)


                pass
            elif token in [SQLiteParser.K_NOT, SQLiteParser.K_NULL]:
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1046
                    self.match(SQLiteParser.K_NOT)


                self.state = 1049
                self.match(SQLiteParser.K_NULL)
                self.state = 1050
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_UNIQUE]:
                self.state = 1051
                self.match(SQLiteParser.K_UNIQUE)
                self.state = 1052
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1053
                self.match(SQLiteParser.K_CHECK)
                self.state = 1054
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1055
                self.expr(0)
                self.state = 1056
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_DEFAULT]:
                self.state = 1058
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 1065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 1060
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 1061
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1062
                    self.expr(0)
                    self.state = 1063
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.K_COLLATE]:
                self.state = 1067
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1068
                self.collation_name()
                pass
            elif token in [SQLiteParser.K_REFERENCES]:
                self.state = 1069
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Conflict_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ON:
                self.state = 1072
                self.match(SQLiteParser.K_ON)
                self.state = 1073
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1074
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.K_FAIL - 72)) | (1 << (SQLiteParser.K_IGNORE - 72)) | (1 << (SQLiteParser.K_REPLACE - 72)) | (1 << (SQLiteParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_WHEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1078
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 1079
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 1088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1083
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1080
                        self.database_name()
                        self.state = 1081
                        self.match(SQLiteParser.DOT)


                    self.state = 1085
                    self.table_name()
                    self.state = 1086
                    self.match(SQLiteParser.DOT)


                self.state = 1090
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 1091
                self.unary_operator()
                self.state = 1092
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 1094
                self.function_name()
                self.state = 1095
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1108
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 1097
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                    if la_ == 1:
                        self.state = 1096
                        self.match(SQLiteParser.K_DISTINCT)


                    self.state = 1099
                    self.expr(0)
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1100
                        self.match(SQLiteParser.COMMA)
                        self.state = 1101
                        self.expr(0)
                        self.state = 1106
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 1107
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 1110
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 1112
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1113
                self.expr(0)
                self.state = 1114
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1116
                self.match(SQLiteParser.K_CAST)
                self.state = 1117
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1118
                self.expr(0)
                self.state = 1119
                self.match(SQLiteParser.K_AS)
                self.state = 1120
                self.type_name()
                self.state = 1121
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_EXISTS or _la==SQLiteParser.K_NOT:
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_NOT:
                        self.state = 1123
                        self.match(SQLiteParser.K_NOT)


                    self.state = 1126
                    self.match(SQLiteParser.K_EXISTS)


                self.state = 1129
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1130
                self.select_stmt()
                self.state = 1131
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1133
                self.match(SQLiteParser.K_CASE)
                self.state = 1135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1134
                    self.expr(0)


                self.state = 1142 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1137
                    self.match(SQLiteParser.K_WHEN)
                    self.state = 1138
                    self.expr(0)
                    self.state = 1139
                    self.match(SQLiteParser.K_THEN)
                    self.state = 1140
                    self.expr(0)
                    self.state = 1144 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.K_WHEN):
                        break

                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ELSE:
                    self.state = 1146
                    self.match(SQLiteParser.K_ELSE)
                    self.state = 1147
                    self.expr(0)


                self.state = 1150
                self.match(SQLiteParser.K_END)
                pass

            elif la_ == 10:
                self.state = 1152
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1253
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1155
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1156
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1157
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1158
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1159
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1160
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1161
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1162
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1163
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1164
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1165
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1166
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1167
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1168
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1169
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1170
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1183
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                        if la_ == 1:
                            self.state = 1171
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1172
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1173
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1174
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1175
                            self.match(SQLiteParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 1176
                            self.match(SQLiteParser.K_IS)
                            self.state = 1177
                            self.match(SQLiteParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1178
                            self.match(SQLiteParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 1179
                            self.match(SQLiteParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1180
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1181
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1182
                            self.match(SQLiteParser.K_REGEXP)
                            pass


                        self.state = 1185
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1186
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1187
                        self.match(SQLiteParser.K_AND)
                        self.state = 1188
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1189
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1190
                        self.match(SQLiteParser.K_OR)
                        self.state = 1191
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1192
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1193
                        self.match(SQLiteParser.K_IS)
                        self.state = 1195
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                        if la_ == 1:
                            self.state = 1194
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1197
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1198
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1200
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1199
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1202
                        self.match(SQLiteParser.K_BETWEEN)
                        self.state = 1203
                        self.expr(0)
                        self.state = 1204
                        self.match(SQLiteParser.K_AND)
                        self.state = 1205
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1207
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1208
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 1209
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1210
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1212
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1211
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1214
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SQLiteParser.K_GLOB - 77)) | (1 << (SQLiteParser.K_LIKE - 77)) | (1 << (SQLiteParser.K_MATCH - 77)) | (1 << (SQLiteParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1215
                        self.expr(0)
                        self.state = 1218
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                        if la_ == 1:
                            self.state = 1216
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1217
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1220
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1225
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.K_ISNULL]:
                            self.state = 1221
                            self.match(SQLiteParser.K_ISNULL)
                            pass
                        elif token in [SQLiteParser.K_NOTNULL]:
                            self.state = 1222
                            self.match(SQLiteParser.K_NOTNULL)
                            pass
                        elif token in [SQLiteParser.K_NOT]:
                            self.state = 1223
                            self.match(SQLiteParser.K_NOT)
                            self.state = 1224
                            self.match(SQLiteParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1227
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1229
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1228
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1231
                        self.match(SQLiteParser.K_IN)
                        self.state = 1251
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                        if la_ == 1:
                            self.state = 1232
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1242
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                            if la_ == 1:
                                self.state = 1233
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1234
                                self.expr(0)
                                self.state = 1239
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1235
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1236
                                    self.expr(0)
                                    self.state = 1241
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1244
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1248
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                            if la_ == 1:
                                self.state = 1245
                                self.database_name()
                                self.state = 1246
                                self.match(SQLiteParser.DOT)


                            self.state = 1250
                            self.table_name()
                            pass


                        pass

             
                self.state = 1257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_key_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_MATCH(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_MATCH)
            else:
                return self.getToken(SQLiteParser.K_MATCH, i)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_DELETE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DELETE)
            else:
                return self.getToken(SQLiteParser.K_DELETE, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def K_NULL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NULL)
            else:
                return self.getToken(SQLiteParser.K_NULL, i)

        def K_DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DEFAULT)
            else:
                return self.getToken(SQLiteParser.K_DEFAULT, i)

        def K_CASCADE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CASCADE)
            else:
                return self.getToken(SQLiteParser.K_CASCADE, i)

        def K_RESTRICT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_RESTRICT)
            else:
                return self.getToken(SQLiteParser.K_RESTRICT, i)

        def K_NO(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NO)
            else:
                return self.getToken(SQLiteParser.K_NO, i)

        def K_ACTION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ACTION)
            else:
                return self.getToken(SQLiteParser.K_ACTION, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(SQLiteParser.K_REFERENCES)
            self.state = 1259
            self.foreign_table()
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1260
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1261
                self.column_name()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1262
                    self.match(SQLiteParser.COMMA)
                    self.state = 1263
                    self.column_name()
                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1269
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_MATCH or _la==SQLiteParser.K_ON:
                self.state = 1287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_ON]:
                    self.state = 1273
                    self.match(SQLiteParser.K_ON)
                    self.state = 1274
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_DELETE or _la==SQLiteParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1283
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                    if la_ == 1:
                        self.state = 1275
                        self.match(SQLiteParser.K_SET)
                        self.state = 1276
                        self.match(SQLiteParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 1277
                        self.match(SQLiteParser.K_SET)
                        self.state = 1278
                        self.match(SQLiteParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 1279
                        self.match(SQLiteParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 1280
                        self.match(SQLiteParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 1281
                        self.match(SQLiteParser.K_NO)
                        self.state = 1282
                        self.match(SQLiteParser.K_ACTION)
                        pass


                    pass
                elif token in [SQLiteParser.K_MATCH]:
                    self.state = 1285
                    self.match(SQLiteParser.K_MATCH)
                    self.state = 1286
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1294
                    self.match(SQLiteParser.K_NOT)


                self.state = 1297
                self.match(SQLiteParser.K_DEFERRABLE)
                self.state = 1302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1298
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1299
                    self.match(SQLiteParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1300
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1301
                    self.match(SQLiteParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Raise_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self.match(SQLiteParser.K_RAISE)
            self.state = 1307
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_IGNORE]:
                self.state = 1308
                self.match(SQLiteParser.K_IGNORE)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_FAIL, SQLiteParser.K_ROLLBACK]:
                self.state = 1309
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or _la==SQLiteParser.K_FAIL or _la==SQLiteParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                self.match(SQLiteParser.COMMA)
                self.state = 1311
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1314
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Indexed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.column_name()
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1317
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1318
                self.collation_name()


            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1321
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_CONSTRAINT:
                self.state = 1324
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1325
                self.name()


            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY, SQLiteParser.K_UNIQUE]:
                self.state = 1331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_PRIMARY]:
                    self.state = 1328
                    self.match(SQLiteParser.K_PRIMARY)
                    self.state = 1329
                    self.match(SQLiteParser.K_KEY)
                    pass
                elif token in [SQLiteParser.K_UNIQUE]:
                    self.state = 1330
                    self.match(SQLiteParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1333
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1334
                self.indexed_column()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1335
                    self.match(SQLiteParser.COMMA)
                    self.state = 1336
                    self.indexed_column()
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1342
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1343
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1345
                self.match(SQLiteParser.K_CHECK)
                self.state = 1346
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1347
                self.expr(0)
                self.state = 1348
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_FOREIGN]:
                self.state = 1350
                self.match(SQLiteParser.K_FOREIGN)
                self.state = 1351
                self.match(SQLiteParser.K_KEY)
                self.state = 1352
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1353
                self.column_name()
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1354
                    self.match(SQLiteParser.COMMA)
                    self.state = 1355
                    self.column_name()
                    self.state = 1360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1361
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1362
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(SQLiteParser.K_WITH)
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.match(SQLiteParser.K_RECURSIVE)


            self.state = 1370
            self.common_table_expression()
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1371
                self.match(SQLiteParser.COMMA)
                self.state = 1372
                self.common_table_expression()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Qualified_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1378
                self.database_name()
                self.state = 1379
                self.match(SQLiteParser.DOT)


            self.state = 1383
            self.table_name()
            self.state = 1389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_INDEXED]:
                self.state = 1384
                self.match(SQLiteParser.K_INDEXED)
                self.state = 1385
                self.match(SQLiteParser.K_BY)
                self.state = 1386
                self.index_name()
                pass
            elif token in [SQLiteParser.K_NOT]:
                self.state = 1387
                self.match(SQLiteParser.K_NOT)
                self.state = 1388
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_LIMIT, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Ordering_termContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.expr(0)
            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1392
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1393
                self.collation_name()


            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1396
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pragma_value)
        try:
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1401
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Common_table_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.table_name()
            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1405
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1406
                self.column_name()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1407
                    self.match(SQLiteParser.COMMA)
                    self.state = 1408
                    self.column_name()
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1414
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1418
            self.match(SQLiteParser.K_AS)
            self.state = 1419
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1420
            self.select_stmt()
            self.state = 1421
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Result_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1423
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1424
                self.table_name()
                self.state = 1425
                self.match(SQLiteParser.DOT)
                self.state = 1426
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1428
                self.expr(0)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1429
                        self.match(SQLiteParser.K_AS)


                    self.state = 1432
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_subqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1437
                    self.database_name()
                    self.state = 1438
                    self.match(SQLiteParser.DOT)


                self.state = 1442
                self.table_name()
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1443
                        self.match(SQLiteParser.K_AS)


                    self.state = 1446
                    self.table_alias()


                self.state = 1454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_INDEXED]:
                    self.state = 1449
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1450
                    self.match(SQLiteParser.K_BY)
                    self.state = 1451
                    self.index_name()
                    pass
                elif token in [SQLiteParser.K_NOT]:
                    self.state = 1452
                    self.match(SQLiteParser.K_NOT)
                    self.state = 1453
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ON, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1456
                    self.database_name()
                    self.state = 1457
                    self.match(SQLiteParser.DOT)


                self.state = 1461
                self.table_function_name()
                self.state = 1462
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.K_ABORT) | (1 << SQLiteParser.K_ACTION) | (1 << SQLiteParser.K_ADD) | (1 << SQLiteParser.K_AFTER) | (1 << SQLiteParser.K_ALL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_AND) | (1 << SQLiteParser.K_AS) | (1 << SQLiteParser.K_ASC) | (1 << SQLiteParser.K_ATTACH) | (1 << SQLiteParser.K_AUTOINCREMENT) | (1 << SQLiteParser.K_BEFORE) | (1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_BETWEEN) | (1 << SQLiteParser.K_BY) | (1 << SQLiteParser.K_CASCADE) | (1 << SQLiteParser.K_CASE) | (1 << SQLiteParser.K_CAST) | (1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_COLUMN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_CONFLICT) | (1 << SQLiteParser.K_CONSTRAINT) | (1 << SQLiteParser.K_CREATE) | (1 << SQLiteParser.K_CROSS) | (1 << SQLiteParser.K_CURRENT_DATE) | (1 << SQLiteParser.K_CURRENT_TIME) | (1 << SQLiteParser.K_CURRENT_TIMESTAMP) | (1 << SQLiteParser.K_DATABASE) | (1 << SQLiteParser.K_DEFAULT) | (1 << SQLiteParser.K_DEFERRABLE) | (1 << SQLiteParser.K_DEFERRED) | (1 << SQLiteParser.K_DELETE) | (1 << SQLiteParser.K_DESC) | (1 << SQLiteParser.K_DETACH) | (1 << SQLiteParser.K_DISTINCT) | (1 << SQLiteParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.K_EACH - 64)) | (1 << (SQLiteParser.K_ELSE - 64)) | (1 << (SQLiteParser.K_END - 64)) | (1 << (SQLiteParser.K_ESCAPE - 64)) | (1 << (SQLiteParser.K_EXCEPT - 64)) | (1 << (SQLiteParser.K_EXCLUSIVE - 64)) | (1 << (SQLiteParser.K_EXISTS - 64)) | (1 << (SQLiteParser.K_EXPLAIN - 64)) | (1 << (SQLiteParser.K_FAIL - 64)) | (1 << (SQLiteParser.K_FOR - 64)) | (1 << (SQLiteParser.K_FOREIGN - 64)) | (1 << (SQLiteParser.K_FROM - 64)) | (1 << (SQLiteParser.K_FULL - 64)) | (1 << (SQLiteParser.K_GLOB - 64)) | (1 << (SQLiteParser.K_GROUP - 64)) | (1 << (SQLiteParser.K_HAVING - 64)) | (1 << (SQLiteParser.K_IF - 64)) | (1 << (SQLiteParser.K_IGNORE - 64)) | (1 << (SQLiteParser.K_IMMEDIATE - 64)) | (1 << (SQLiteParser.K_IN - 64)) | (1 << (SQLiteParser.K_INDEX - 64)) | (1 << (SQLiteParser.K_INDEXED - 64)) | (1 << (SQLiteParser.K_INITIALLY - 64)) | (1 << (SQLiteParser.K_INNER - 64)) | (1 << (SQLiteParser.K_INSERT - 64)) | (1 << (SQLiteParser.K_INSTEAD - 64)) | (1 << (SQLiteParser.K_INTERSECT - 64)) | (1 << (SQLiteParser.K_INTO - 64)) | (1 << (SQLiteParser.K_IS - 64)) | (1 << (SQLiteParser.K_ISNULL - 64)) | (1 << (SQLiteParser.K_JOIN - 64)) | (1 << (SQLiteParser.K_KEY - 64)) | (1 << (SQLiteParser.K_LEFT - 64)) | (1 << (SQLiteParser.K_LIKE - 64)) | (1 << (SQLiteParser.K_LIMIT - 64)) | (1 << (SQLiteParser.K_MATCH - 64)) | (1 << (SQLiteParser.K_NATURAL - 64)) | (1 << (SQLiteParser.K_NO - 64)) | (1 << (SQLiteParser.K_NOT - 64)) | (1 << (SQLiteParser.K_NOTNULL - 64)) | (1 << (SQLiteParser.K_NULL - 64)) | (1 << (SQLiteParser.K_OF - 64)) | (1 << (SQLiteParser.K_OFFSET - 64)) | (1 << (SQLiteParser.K_ON - 64)) | (1 << (SQLiteParser.K_OR - 64)) | (1 << (SQLiteParser.K_ORDER - 64)) | (1 << (SQLiteParser.K_OUTER - 64)) | (1 << (SQLiteParser.K_PLAN - 64)) | (1 << (SQLiteParser.K_PRAGMA - 64)) | (1 << (SQLiteParser.K_PRIMARY - 64)) | (1 << (SQLiteParser.K_QUERY - 64)) | (1 << (SQLiteParser.K_RAISE - 64)) | (1 << (SQLiteParser.K_RECURSIVE - 64)) | (1 << (SQLiteParser.K_REFERENCES - 64)) | (1 << (SQLiteParser.K_REGEXP - 64)) | (1 << (SQLiteParser.K_REINDEX - 64)) | (1 << (SQLiteParser.K_RELEASE - 64)) | (1 << (SQLiteParser.K_RENAME - 64)) | (1 << (SQLiteParser.K_REPLACE - 64)) | (1 << (SQLiteParser.K_RESTRICT - 64)) | (1 << (SQLiteParser.K_RIGHT - 64)) | (1 << (SQLiteParser.K_ROLLBACK - 64)) | (1 << (SQLiteParser.K_ROW - 64)) | (1 << (SQLiteParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.K_SELECT - 128)) | (1 << (SQLiteParser.K_SET - 128)) | (1 << (SQLiteParser.K_TABLE - 128)) | (1 << (SQLiteParser.K_TEMP - 128)) | (1 << (SQLiteParser.K_TEMPORARY - 128)) | (1 << (SQLiteParser.K_THEN - 128)) | (1 << (SQLiteParser.K_TO - 128)) | (1 << (SQLiteParser.K_TRANSACTION - 128)) | (1 << (SQLiteParser.K_TRIGGER - 128)) | (1 << (SQLiteParser.K_UNION - 128)) | (1 << (SQLiteParser.K_UNIQUE - 128)) | (1 << (SQLiteParser.K_UPDATE - 128)) | (1 << (SQLiteParser.K_USING - 128)) | (1 << (SQLiteParser.K_VACUUM - 128)) | (1 << (SQLiteParser.K_VALUES - 128)) | (1 << (SQLiteParser.K_VIEW - 128)) | (1 << (SQLiteParser.K_VIRTUAL - 128)) | (1 << (SQLiteParser.K_WHEN - 128)) | (1 << (SQLiteParser.K_WHERE - 128)) | (1 << (SQLiteParser.K_WITH - 128)) | (1 << (SQLiteParser.K_WITHOUT - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 1463
                    self.expr(0)
                    self.state = 1468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1464
                        self.match(SQLiteParser.COMMA)
                        self.state = 1465
                        self.expr(0)
                        self.state = 1470
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1473
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1474
                        self.match(SQLiteParser.K_AS)


                    self.state = 1477
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1480
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1481
                    self.table_or_subquery()
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1482
                        self.match(SQLiteParser.COMMA)
                        self.state = 1483
                        self.table_or_subquery()
                        self.state = 1488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1489
                    self.join_clause()
                    pass


                self.state = 1492
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1493
                        self.match(SQLiteParser.K_AS)


                    self.state = 1496
                    self.table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1499
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1500
                self.select_stmt()
                self.state = 1501
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1502
                        self.match(SQLiteParser.K_AS)


                    self.state = 1505
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.table_or_subquery()
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SQLiteParser.K_INNER - 87)) | (1 << (SQLiteParser.K_JOIN - 87)) | (1 << (SQLiteParser.K_LEFT - 87)) | (1 << (SQLiteParser.K_NATURAL - 87)))) != 0):
                self.state = 1511
                self.join_operator()
                self.state = 1512
                self.table_or_subquery()
                self.state = 1513
                self.join_constraint()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.K_CROSS, SQLiteParser.K_INNER, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NATURAL:
                    self.state = 1521
                    self.match(SQLiteParser.K_NATURAL)


                self.state = 1530
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_LEFT]:
                    self.state = 1524
                    self.match(SQLiteParser.K_LEFT)
                    self.state = 1526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_OUTER:
                        self.state = 1525
                        self.match(SQLiteParser.K_OUTER)


                    pass
                elif token in [SQLiteParser.K_INNER]:
                    self.state = 1528
                    self.match(SQLiteParser.K_INNER)
                    pass
                elif token in [SQLiteParser.K_CROSS]:
                    self.state = 1529
                    self.match(SQLiteParser.K_CROSS)
                    pass
                elif token in [SQLiteParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1532
                self.match(SQLiteParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ON]:
                self.state = 1535
                self.match(SQLiteParser.K_ON)
                self.state = 1536
                self.expr(0)
                pass
            elif token in [SQLiteParser.K_USING]:
                self.state = 1537
                self.match(SQLiteParser.K_USING)
                self.state = 1538
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1539
                self.column_name()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1540
                    self.match(SQLiteParser.COMMA)
                    self.state = 1541
                    self.column_name()
                    self.state = 1546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1547
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_coreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(SQLiteParser.K_SELECT)
                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1555
                self.result_column()
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1556
                    self.match(SQLiteParser.COMMA)
                    self.state = 1557
                    self.result_column()
                    self.state = 1562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 1563
                    self.match(SQLiteParser.K_FROM)
                    self.state = 1573
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                    if la_ == 1:
                        self.state = 1564
                        self.table_or_subquery()
                        self.state = 1569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1565
                            self.match(SQLiteParser.COMMA)
                            self.state = 1566
                            self.table_or_subquery()
                            self.state = 1571
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1572
                        self.join_clause()
                        pass




                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 1577
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 1578
                    self.expr(0)


                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 1581
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 1582
                    self.match(SQLiteParser.K_BY)
                    self.state = 1583
                    self.expr(0)
                    self.state = 1588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1584
                        self.match(SQLiteParser.COMMA)
                        self.state = 1585
                        self.expr(0)
                        self.state = 1590
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 1591
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 1592
                        self.expr(0)




                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1597
                self.match(SQLiteParser.K_VALUES)
                self.state = 1598
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1599
                self.expr(0)
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1600
                    self.match(SQLiteParser.COMMA)
                    self.state = 1601
                    self.expr(0)
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1607
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1608
                    self.match(SQLiteParser.COMMA)
                    self.state = 1609
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1610
                    self.expr(0)
                    self.state = 1615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1611
                        self.match(SQLiteParser.COMMA)
                        self.state = 1612
                        self.expr(0)
                        self.state = 1617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1618
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compound_operator)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1627
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1628
                self.match(SQLiteParser.K_UNION)
                self.state = 1629
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1630
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1631
                self.match(SQLiteParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Signed_numberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 1634
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1637
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.K_CURRENT_DATE) | (1 << SQLiteParser.K_CURRENT_TIME) | (1 << SQLiteParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SQLiteParser.K_NULL - 104)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 104)) | (1 << (SQLiteParser.STRING_LITERAL - 104)) | (1 << (SQLiteParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Error_messageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_module_argument)
        try:
            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1645
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SQLiteParser.K_ABORT - 25)) | (1 << (SQLiteParser.K_ACTION - 25)) | (1 << (SQLiteParser.K_ADD - 25)) | (1 << (SQLiteParser.K_AFTER - 25)) | (1 << (SQLiteParser.K_ALL - 25)) | (1 << (SQLiteParser.K_ALTER - 25)) | (1 << (SQLiteParser.K_ANALYZE - 25)) | (1 << (SQLiteParser.K_AND - 25)) | (1 << (SQLiteParser.K_AS - 25)) | (1 << (SQLiteParser.K_ASC - 25)) | (1 << (SQLiteParser.K_ATTACH - 25)) | (1 << (SQLiteParser.K_AUTOINCREMENT - 25)) | (1 << (SQLiteParser.K_BEFORE - 25)) | (1 << (SQLiteParser.K_BEGIN - 25)) | (1 << (SQLiteParser.K_BETWEEN - 25)) | (1 << (SQLiteParser.K_BY - 25)) | (1 << (SQLiteParser.K_CASCADE - 25)) | (1 << (SQLiteParser.K_CASE - 25)) | (1 << (SQLiteParser.K_CAST - 25)) | (1 << (SQLiteParser.K_CHECK - 25)) | (1 << (SQLiteParser.K_COLLATE - 25)) | (1 << (SQLiteParser.K_COLUMN - 25)) | (1 << (SQLiteParser.K_COMMIT - 25)) | (1 << (SQLiteParser.K_CONFLICT - 25)) | (1 << (SQLiteParser.K_CONSTRAINT - 25)) | (1 << (SQLiteParser.K_CREATE - 25)) | (1 << (SQLiteParser.K_CROSS - 25)) | (1 << (SQLiteParser.K_CURRENT_DATE - 25)) | (1 << (SQLiteParser.K_CURRENT_TIME - 25)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLiteParser.K_DATABASE - 25)) | (1 << (SQLiteParser.K_DEFAULT - 25)) | (1 << (SQLiteParser.K_DEFERRABLE - 25)) | (1 << (SQLiteParser.K_DEFERRED - 25)) | (1 << (SQLiteParser.K_DELETE - 25)) | (1 << (SQLiteParser.K_DESC - 25)) | (1 << (SQLiteParser.K_DETACH - 25)) | (1 << (SQLiteParser.K_DISTINCT - 25)) | (1 << (SQLiteParser.K_DROP - 25)) | (1 << (SQLiteParser.K_EACH - 25)) | (1 << (SQLiteParser.K_ELSE - 25)) | (1 << (SQLiteParser.K_END - 25)) | (1 << (SQLiteParser.K_ESCAPE - 25)) | (1 << (SQLiteParser.K_EXCEPT - 25)) | (1 << (SQLiteParser.K_EXCLUSIVE - 25)) | (1 << (SQLiteParser.K_EXISTS - 25)) | (1 << (SQLiteParser.K_EXPLAIN - 25)) | (1 << (SQLiteParser.K_FAIL - 25)) | (1 << (SQLiteParser.K_FOR - 25)) | (1 << (SQLiteParser.K_FOREIGN - 25)) | (1 << (SQLiteParser.K_FROM - 25)) | (1 << (SQLiteParser.K_FULL - 25)) | (1 << (SQLiteParser.K_GLOB - 25)) | (1 << (SQLiteParser.K_GROUP - 25)) | (1 << (SQLiteParser.K_HAVING - 25)) | (1 << (SQLiteParser.K_IF - 25)) | (1 << (SQLiteParser.K_IGNORE - 25)) | (1 << (SQLiteParser.K_IMMEDIATE - 25)) | (1 << (SQLiteParser.K_IN - 25)) | (1 << (SQLiteParser.K_INDEX - 25)) | (1 << (SQLiteParser.K_INDEXED - 25)) | (1 << (SQLiteParser.K_INITIALLY - 25)) | (1 << (SQLiteParser.K_INNER - 25)) | (1 << (SQLiteParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.K_INSTEAD - 89)) | (1 << (SQLiteParser.K_INTERSECT - 89)) | (1 << (SQLiteParser.K_INTO - 89)) | (1 << (SQLiteParser.K_IS - 89)) | (1 << (SQLiteParser.K_ISNULL - 89)) | (1 << (SQLiteParser.K_JOIN - 89)) | (1 << (SQLiteParser.K_KEY - 89)) | (1 << (SQLiteParser.K_LEFT - 89)) | (1 << (SQLiteParser.K_LIKE - 89)) | (1 << (SQLiteParser.K_LIMIT - 89)) | (1 << (SQLiteParser.K_MATCH - 89)) | (1 << (SQLiteParser.K_NATURAL - 89)) | (1 << (SQLiteParser.K_NO - 89)) | (1 << (SQLiteParser.K_NOT - 89)) | (1 << (SQLiteParser.K_NOTNULL - 89)) | (1 << (SQLiteParser.K_NULL - 89)) | (1 << (SQLiteParser.K_OF - 89)) | (1 << (SQLiteParser.K_OFFSET - 89)) | (1 << (SQLiteParser.K_ON - 89)) | (1 << (SQLiteParser.K_OR - 89)) | (1 << (SQLiteParser.K_ORDER - 89)) | (1 << (SQLiteParser.K_OUTER - 89)) | (1 << (SQLiteParser.K_PLAN - 89)) | (1 << (SQLiteParser.K_PRAGMA - 89)) | (1 << (SQLiteParser.K_PRIMARY - 89)) | (1 << (SQLiteParser.K_QUERY - 89)) | (1 << (SQLiteParser.K_RAISE - 89)) | (1 << (SQLiteParser.K_RECURSIVE - 89)) | (1 << (SQLiteParser.K_REFERENCES - 89)) | (1 << (SQLiteParser.K_REGEXP - 89)) | (1 << (SQLiteParser.K_REINDEX - 89)) | (1 << (SQLiteParser.K_RELEASE - 89)) | (1 << (SQLiteParser.K_RENAME - 89)) | (1 << (SQLiteParser.K_REPLACE - 89)) | (1 << (SQLiteParser.K_RESTRICT - 89)) | (1 << (SQLiteParser.K_RIGHT - 89)) | (1 << (SQLiteParser.K_ROLLBACK - 89)) | (1 << (SQLiteParser.K_ROW - 89)) | (1 << (SQLiteParser.K_SAVEPOINT - 89)) | (1 << (SQLiteParser.K_SELECT - 89)) | (1 << (SQLiteParser.K_SET - 89)) | (1 << (SQLiteParser.K_TABLE - 89)) | (1 << (SQLiteParser.K_TEMP - 89)) | (1 << (SQLiteParser.K_TEMPORARY - 89)) | (1 << (SQLiteParser.K_THEN - 89)) | (1 << (SQLiteParser.K_TO - 89)) | (1 << (SQLiteParser.K_TRANSACTION - 89)) | (1 << (SQLiteParser.K_TRIGGER - 89)) | (1 << (SQLiteParser.K_UNION - 89)) | (1 << (SQLiteParser.K_UNIQUE - 89)) | (1 << (SQLiteParser.K_UPDATE - 89)) | (1 << (SQLiteParser.K_USING - 89)) | (1 << (SQLiteParser.K_VACUUM - 89)) | (1 << (SQLiteParser.K_VALUES - 89)) | (1 << (SQLiteParser.K_VIEW - 89)) | (1 << (SQLiteParser.K_VIRTUAL - 89)) | (1 << (SQLiteParser.K_WHEN - 89)) | (1 << (SQLiteParser.K_WHERE - 89)) | (1 << (SQLiteParser.K_WITH - 89)) | (1 << (SQLiteParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_database_name

        def enterRule(self, listener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = SQLiteParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_function_name"):
                listener.enterTable_function_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_function_name"):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.New_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNew_table_name"):
                listener.enterNew_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNew_table_name"):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Collation_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Trigger_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.View_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_table_alias)
        try:
            self.state = 1691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1685
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1686
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1687
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1688
                self.table_alias()
                self.state = 1689
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Transaction_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_any_name)
        try:
            self.state = 1702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1696
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1697
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1698
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1699
                self.any_name()
                self.state = 1700
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




