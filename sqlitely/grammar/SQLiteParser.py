# Generated from SQLite.g4 by ANTLR 4.9
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u00a3\u06c2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\3\2\3\2\7\2\u00af\n\2\f\2")
        buf.write(u"\16\2\u00b2\13\2\3\2\3\2\3\3\3\3\3\4\7\4\u00b9\n\4\f")
        buf.write(u"\4\16\4\u00bc\13\4\3\4\3\4\6\4\u00c0\n\4\r\4\16\4\u00c1")
        buf.write(u"\3\4\7\4\u00c5\n\4\f\4\16\4\u00c8\13\4\3\4\7\4\u00cb")
        buf.write(u"\n\4\f\4\16\4\u00ce\13\4\3\5\3\5\3\5\5\5\u00d3\n\5\5")
        buf.write(u"\5\u00d5\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00f5\n\5\3\6\3\6\3")
        buf.write(u"\6\3\6\3\6\5\6\u00fc\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write(u"\u0104\n\6\3\6\5\6\u0107\n\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write(u"\3\7\5\7\u0110\n\7\3\b\3\b\5\b\u0114\n\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\t\3\t\5\t\u011c\n\t\3\t\3\t\5\t\u0120\n\t\5\t")
        buf.write(u"\u0122\n\t\3\n\3\n\3\n\5\n\u0127\n\n\5\n\u0129\n\n\3")
        buf.write(u"\13\5\13\u012c\n\13\3\13\3\13\3\13\5\13\u0131\n\13\3")
        buf.write(u"\13\3\13\5\13\u0135\n\13\3\13\6\13\u0138\n\13\r\13\16")
        buf.write(u"\13\u0139\3\13\3\13\3\13\3\13\3\13\7\13\u0141\n\13\f")
        buf.write(u"\13\16\13\u0144\13\13\5\13\u0146\n\13\3\13\3\13\3\13")
        buf.write(u"\3\13\5\13\u014c\n\13\5\13\u014e\n\13\3\f\3\f\5\f\u0152")
        buf.write(u"\n\f\3\f\3\f\3\f\3\f\5\f\u0158\n\f\3\f\3\f\3\f\5\f\u015d")
        buf.write(u"\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0166\n\f\f\f\16")
        buf.write(u"\f\u0169\13\f\3\f\3\f\3\f\5\f\u016e\n\f\3\r\3\r\5\r\u0172")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\5\r\u0178\n\r\3\r\3\r\3\r\5\r\u017d")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u0184\n\r\f\r\16\r\u0187")
        buf.write(u"\13\r\3\r\3\r\7\r\u018b\n\r\f\r\16\r\u018e\13\r\3\r\3")
        buf.write(u"\r\3\r\5\r\u0193\n\r\3\r\3\r\5\r\u0197\n\r\3\16\3\16")
        buf.write(u"\5\16\u019b\n\16\3\16\3\16\3\16\3\16\5\16\u01a1\n\16")
        buf.write(u"\3\16\3\16\3\16\5\16\u01a6\n\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\5\16\u01ad\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\7\16\u01b6\n\16\f\16\16\16\u01b9\13\16\5\16\u01bb\n")
        buf.write(u"\16\5\16\u01bd\n\16\3\16\3\16\3\16\3\16\5\16\u01c3\n")
        buf.write(u"\16\3\16\3\16\3\16\3\16\5\16\u01c9\n\16\3\16\3\16\5\16")
        buf.write(u"\u01cd\n\16\3\16\3\16\3\16\3\16\3\16\5\16\u01d4\n\16")
        buf.write(u"\3\16\3\16\6\16\u01d8\n\16\r\16\16\16\u01d9\3\16\3\16")
        buf.write(u"\3\17\3\17\5\17\u01e0\n\17\3\17\3\17\3\17\3\17\5\17\u01e6")
        buf.write(u"\n\17\3\17\3\17\3\17\5\17\u01eb\n\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\17\7\17\u01f2\n\17\f\17\16\17\u01f5\13\17\3\17")
        buf.write(u"\3\17\5\17\u01f9\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\3\20\5\20\u0204\n\20\3\20\3\20\3\20\5\20\u0209")
        buf.write(u"\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u0212\n")
        buf.write(u"\20\f\20\16\20\u0215\13\20\3\20\3\20\5\20\u0219\n\20")
        buf.write(u"\3\21\5\21\u021c\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u0223")
        buf.write(u"\n\21\3\22\5\22\u0226\n\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write(u"\22\u022d\n\22\3\22\3\22\3\22\3\22\3\22\7\22\u0234\n")
        buf.write(u"\22\f\22\16\22\u0237\13\22\5\22\u0239\n\22\3\22\3\22")
        buf.write(u"\3\22\3\22\5\22\u023f\n\22\5\22\u0241\n\22\3\23\3\23")
        buf.write(u"\5\23\u0245\n\23\3\23\3\23\3\24\3\24\3\24\3\24\5\24\u024d")
        buf.write(u"\n\24\3\24\3\24\3\24\5\24\u0252\n\24\3\24\3\24\3\25\3")
        buf.write(u"\25\3\25\3\25\5\25\u025a\n\25\3\25\3\25\3\25\5\25\u025f")
        buf.write(u"\n\25\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u0267\n\26\3")
        buf.write(u"\26\3\26\3\26\5\26\u026c\n\26\3\26\3\26\3\27\3\27\3\27")
        buf.write(u"\3\27\5\27\u0274\n\27\3\27\3\27\3\27\5\27\u0279\n\27")
        buf.write(u"\3\27\3\27\3\30\5\30\u027e\n\30\3\30\3\30\3\30\3\30\7")
        buf.write(u"\30\u0284\n\30\f\30\16\30\u0287\13\30\3\30\3\30\3\30")
        buf.write(u"\3\30\3\30\7\30\u028e\n\30\f\30\16\30\u0291\13\30\5\30")
        buf.write(u"\u0293\n\30\3\30\3\30\3\30\3\30\5\30\u0299\n\30\5\30")
        buf.write(u"\u029b\n\30\3\31\5\31\u029e\n\31\3\31\3\31\3\31\3\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\5\31\u02b1\n\31\3\31\3\31\3\31\3\31\5\31")
        buf.write(u"\u02b7\n\31\3\31\3\31\3\31\3\31\3\31\7\31\u02be\n\31")
        buf.write(u"\f\31\16\31\u02c1\13\31\3\31\3\31\5\31\u02c5\n\31\3\31")
        buf.write(u"\3\31\3\31\3\31\3\31\7\31\u02cc\n\31\f\31\16\31\u02cf")
        buf.write(u"\13\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u02d7\n\31")
        buf.write(u"\f\31\16\31\u02da\13\31\3\31\3\31\7\31\u02de\n\31\f\31")
        buf.write(u"\16\31\u02e1\13\31\3\31\3\31\3\31\5\31\u02e6\n\31\3\32")
        buf.write(u"\3\32\3\32\3\32\5\32\u02ec\n\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\3\32\5\32\u02f5\n\32\3\33\3\33\3\33\3\33\3\33")
        buf.write(u"\5\33\u02fc\n\33\3\33\3\33\5\33\u0300\n\33\5\33\u0302")
        buf.write(u"\n\33\3\34\3\34\5\34\u0306\n\34\3\34\3\34\3\35\3\35\3")
        buf.write(u"\35\5\35\u030d\n\35\5\35\u030f\n\35\3\35\3\35\5\35\u0313")
        buf.write(u"\n\35\3\35\5\35\u0316\n\35\3\36\3\36\3\36\3\37\5\37\u031c")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0324\n\37\f")
        buf.write(u"\37\16\37\u0327\13\37\5\37\u0329\n\37\3\37\3\37\3\37")
        buf.write(u"\3\37\5\37\u032f\n\37\5\37\u0331\n\37\3 \5 \u0334\n ")
        buf.write(u"\3 \3 \3 \3 \7 \u033a\n \f \16 \u033d\13 \3 \3 \3 \3")
        buf.write(u" \3 \7 \u0344\n \f \16 \u0347\13 \5 \u0349\n \3 \3 \3")
        buf.write(u" \3 \5 \u034f\n \5 \u0351\n \3!\3!\5!\u0355\n!\3!\3!")
        buf.write(u"\3!\7!\u035a\n!\f!\16!\u035d\13!\3!\3!\3!\3!\7!\u0363")
        buf.write(u"\n!\f!\16!\u0366\13!\3!\5!\u0369\n!\5!\u036b\n!\3!\3")
        buf.write(u"!\5!\u036f\n!\3!\3!\3!\3!\3!\7!\u0376\n!\f!\16!\u0379")
        buf.write(u"\13!\3!\3!\5!\u037d\n!\5!\u037f\n!\3!\3!\3!\3!\3!\7!")
        buf.write(u"\u0386\n!\f!\16!\u0389\13!\3!\3!\3!\3!\3!\3!\7!\u0391")
        buf.write(u"\n!\f!\16!\u0394\13!\3!\3!\7!\u0398\n!\f!\16!\u039b\13")
        buf.write(u"!\5!\u039d\n!\3\"\5\"\u03a0\n\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write(u"\"\3\"\3\"\3\"\3\"\3\"\5\"\u03ad\n\"\3\"\3\"\3\"\3\"")
        buf.write(u"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u03b9\n\"\f\"\16\"\u03bc")
        buf.write(u"\13\"\3\"\3\"\5\"\u03c0\n\"\3#\5#\u03c3\n#\3#\3#\3#\3")
        buf.write(u"#\3#\3#\3#\3#\3#\3#\3#\5#\u03d0\n#\3#\3#\3#\3#\3#\3#")
        buf.write(u"\3#\3#\3#\3#\7#\u03dc\n#\f#\16#\u03df\13#\3#\3#\5#\u03e3")
        buf.write(u"\n#\3#\3#\3#\3#\3#\7#\u03ea\n#\f#\16#\u03ed\13#\5#\u03ef")
        buf.write(u"\n#\3#\3#\3#\3#\5#\u03f5\n#\5#\u03f7\n#\3$\3$\3%\3%\5")
        buf.write(u"%\u03fd\n%\3%\7%\u0400\n%\f%\16%\u0403\13%\3&\3&\3&\3")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\5&\u0410\n&\3\'\3\'\6\'\u0414")
        buf.write(u"\n\'\r\'\16\'\u0415\5\'\u0418\n\'\3(\3(\3)\3)\5)\u041e")
        buf.write(u"\n)\3)\3)\3)\5)\u0423\n)\3)\3)\5)\u0427\n)\3)\5)\u042a")
        buf.write(u"\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(u")\u043c\n)\3)\3)\3)\5)\u0441\n)\3*\3*\5*\u0445\n*\3+")
        buf.write(u"\3+\3+\5+\u044a\n+\3,\3,\3,\3,\3,\3,\5,\u0452\n,\3,\3")
        buf.write(u",\3,\5,\u0457\n,\3,\3,\3,\3,\3,\3,\3,\5,\u0460\n,\3,")
        buf.write(u"\3,\3,\7,\u0465\n,\f,\16,\u0468\13,\3,\5,\u046b\n,\3")
        buf.write(u",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u047b\n,")
        buf.write(u"\3,\5,\u047e\n,\3,\3,\3,\3,\3,\3,\5,\u0486\n,\3,\3,\3")
        buf.write(u",\3,\3,\6,\u048d\n,\r,\16,\u048e\3,\3,\5,\u0493\n,\3")
        buf.write(u",\3,\3,\5,\u0498\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,")
        buf.write(u"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5")
        buf.write(u",\u04b6\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u04c2\n,")
        buf.write(u"\3,\3,\3,\5,\u04c7\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5")
        buf.write(u",\u04d3\n,\3,\3,\3,\3,\5,\u04d9\n,\3,\3,\3,\3,\3,\5,")
        buf.write(u"\u04e0\n,\3,\3,\5,\u04e4\n,\3,\3,\3,\3,\3,\3,\7,\u04ec")
        buf.write(u"\n,\f,\16,\u04ef\13,\5,\u04f1\n,\3,\3,\3,\3,\5,\u04f7")
        buf.write(u"\n,\3,\5,\u04fa\n,\7,\u04fc\n,\f,\16,\u04ff\13,\3-\3")
        buf.write(u"-\3-\3-\3-\3-\7-\u0507\n-\f-\16-\u050a\13-\3-\3-\5-\u050e")
        buf.write(u"\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u051a\n-\3-\3-\5")
        buf.write(u"-\u051e\n-\7-\u0520\n-\f-\16-\u0523\13-\3-\5-\u0526\n")
        buf.write(u"-\3-\3-\3-\3-\3-\5-\u052d\n-\5-\u052f\n-\3.\3.\3.\3.")
        buf.write(u"\3.\3.\5.\u0537\n.\3.\3.\3/\3/\5/\u053d\n/\3/\3/\5/\u0541")
        buf.write(u"\n/\3/\5/\u0544\n/\3\60\3\60\5\60\u0548\n\60\3\60\3\60")
        buf.write(u"\3\60\5\60\u054d\n\60\3\60\3\60\3\60\3\60\7\60\u0553")
        buf.write(u"\n\60\f\60\16\60\u0556\13\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u0566")
        buf.write(u"\n\60\f\60\16\60\u0569\13\60\3\60\3\60\3\60\5\60\u056e")
        buf.write(u"\n\60\3\61\3\61\5\61\u0572\n\61\3\61\3\61\3\61\7\61\u0577")
        buf.write(u"\n\61\f\61\16\61\u057a\13\61\3\62\3\62\3\62\5\62\u057f")
        buf.write(u"\n\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0587\n\62\3")
        buf.write(u"\63\3\63\3\63\5\63\u058c\n\63\3\63\5\63\u058f\n\63\3")
        buf.write(u"\64\3\64\3\64\5\64\u0594\n\64\3\65\3\65\3\65\3\65\3\65")
        buf.write(u"\7\65\u059b\n\65\f\65\16\65\u059e\13\65\3\65\3\65\5\65")
        buf.write(u"\u05a2\n\65\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3")
        buf.write(u"\66\3\66\3\66\3\66\5\66\u05b0\n\66\3\66\5\66\u05b3\n")
        buf.write(u"\66\5\66\u05b5\n\66\3\67\3\67\3\67\5\67\u05ba\n\67\3")
        buf.write(u"\67\3\67\5\67\u05be\n\67\3\67\5\67\u05c1\n\67\3\67\3")
        buf.write(u"\67\3\67\3\67\3\67\5\67\u05c8\n\67\3\67\3\67\3\67\5\67")
        buf.write(u"\u05cd\n\67\3\67\3\67\3\67\3\67\3\67\7\67\u05d4\n\67")
        buf.write(u"\f\67\16\67\u05d7\13\67\5\67\u05d9\n\67\3\67\3\67\5\67")
        buf.write(u"\u05dd\n\67\3\67\5\67\u05e0\n\67\3\67\3\67\3\67\3\67")
        buf.write(u"\7\67\u05e6\n\67\f\67\16\67\u05e9\13\67\3\67\5\67\u05ec")
        buf.write(u"\n\67\3\67\3\67\5\67\u05f0\n\67\3\67\5\67\u05f3\n\67")
        buf.write(u"\3\67\3\67\3\67\3\67\5\67\u05f9\n\67\3\67\5\67\u05fc")
        buf.write(u"\n\67\5\67\u05fe\n\67\38\38\38\38\38\78\u0605\n8\f8\16")
        buf.write(u"8\u0608\138\39\39\59\u060c\n9\39\39\59\u0610\n9\39\3")
        buf.write(u"9\59\u0614\n9\39\59\u0617\n9\3:\3:\3:\3:\3:\3:\3:\7:")
        buf.write(u"\u0620\n:\f:\16:\u0623\13:\3:\3:\5:\u0627\n:\3;\3;\5")
        buf.write(u";\u062b\n;\3;\3;\3;\7;\u0630\n;\f;\16;\u0633\13;\3;\3")
        buf.write(u";\3;\3;\7;\u0639\n;\f;\16;\u063c\13;\3;\5;\u063f\n;\5")
        buf.write(u";\u0641\n;\3;\3;\5;\u0645\n;\3;\3;\3;\3;\3;\7;\u064c")
        buf.write(u"\n;\f;\16;\u064f\13;\3;\3;\5;\u0653\n;\5;\u0655\n;\3")
        buf.write(u";\3;\3;\3;\3;\7;\u065c\n;\f;\16;\u065f\13;\3;\3;\3;\3")
        buf.write(u";\3;\3;\7;\u0667\n;\f;\16;\u066a\13;\3;\3;\7;\u066e\n")
        buf.write(u";\f;\16;\u0671\13;\5;\u0673\n;\3<\3<\3<\3<\3<\5<\u067a")
        buf.write(u"\n<\3=\5=\u067d\n=\3=\3=\3>\3>\3?\3?\3@\3@\3A\3A\5A\u0689")
        buf.write(u"\nA\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\3G\3G\3H\3H\3I\3I\3")
        buf.write(u"J\3J\3K\3K\3L\3L\3M\3M\3N\3N\3O\3O\3P\3P\3Q\3Q\3R\3R")
        buf.write(u"\3S\3S\3T\3T\3T\3T\3T\3T\5T\u06b5\nT\3U\3U\3V\3V\3V\3")
        buf.write(u"V\3V\3V\3V\5V\u06c0\nV\3V\3\u0185\3VW\2\4\6\b\n\f\16")
        buf.write(u"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BD")
        buf.write(u"FHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write(u"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write(u"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write(u"\2\25\5\2<<GGUU\4\2\61\61DD\4\2\7\7mm\3\2\u0086\u0087")
        buf.write(u"\4\2\37\37@@\r\2\5\5\7\7./\63\63::MMiikkttxx\u008d\u008d")
        buf.write(u"\4\2$$>>\7\2\33\33JJTT}}\u0080\u0080\4\2\t\t\16\17\3")
        buf.write(u"\2\n\13\3\2\20\23\3\2\24\27\6\2PPddffyy\4\2==\u008e\u008e")
        buf.write(u"\5\2\33\33JJ\u0080\u0080\t\2\668KKkk\u0090\u0090\u009a")
        buf.write(u"\u009a\u009d\u009d\u009f\u009f\4\2\n\fii\4\2\u009a\u009a")
        buf.write(u"\u009c\u009c\5\2\33JL\u008f\u0091\u0098\2\u07cf\2\u00b0")
        buf.write(u"\3\2\2\2\4\u00b5\3\2\2\2\6\u00ba\3\2\2\2\b\u00d4\3\2")
        buf.write(u"\2\2\n\u00f6\3\2\2\2\f\u0108\3\2\2\2\16\u0111\3\2\2\2")
        buf.write(u"\20\u0119\3\2\2\2\22\u0123\3\2\2\2\24\u012b\3\2\2\2\26")
        buf.write(u"\u014f\3\2\2\2\30\u016f\3\2\2\2\32\u0198\3\2\2\2\34\u01dd")
        buf.write(u"\3\2\2\2\36\u01fd\3\2\2\2 \u021b\3\2\2\2\"\u0225\3\2")
        buf.write(u"\2\2$\u0242\3\2\2\2&\u0248\3\2\2\2(\u0255\3\2\2\2*\u0262")
        buf.write(u"\3\2\2\2,\u026f\3\2\2\2.\u027d\3\2\2\2\60\u029d\3\2\2")
        buf.write(u"\2\62\u02e7\3\2\2\2\64\u02f6\3\2\2\2\66\u0303\3\2\2\2")
        buf.write(u"8\u0309\3\2\2\2:\u0317\3\2\2\2<\u031b\3\2\2\2>\u0333")
        buf.write(u"\3\2\2\2@\u039c\3\2\2\2B\u039f\3\2\2\2D\u03c2\3\2\2\2")
        buf.write(u"F\u03f8\3\2\2\2H\u03fa\3\2\2\2J\u0404\3\2\2\2L\u0417")
        buf.write(u"\3\2\2\2N\u0419\3\2\2\2P\u041d\3\2\2\2R\u0444\3\2\2\2")
        buf.write(u"T\u0449\3\2\2\2V\u0497\3\2\2\2X\u0500\3\2\2\2Z\u0530")
        buf.write(u"\3\2\2\2\\\u053c\3\2\2\2^\u0547\3\2\2\2`\u056f\3\2\2")
        buf.write(u"\2b\u057e\3\2\2\2d\u0588\3\2\2\2f\u0593\3\2\2\2h\u0595")
        buf.write(u"\3\2\2\2j\u05b4\3\2\2\2l\u05fd\3\2\2\2n\u05ff\3\2\2\2")
        buf.write(u"p\u0616\3\2\2\2r\u0626\3\2\2\2t\u0672\3\2\2\2v\u0679")
        buf.write(u"\3\2\2\2x\u067c\3\2\2\2z\u0680\3\2\2\2|\u0682\3\2\2\2")
        buf.write(u"~\u0684\3\2\2\2\u0080\u0688\3\2\2\2\u0082\u068a\3\2\2")
        buf.write(u"\2\u0084\u068c\3\2\2\2\u0086\u068e\3\2\2\2\u0088\u0690")
        buf.write(u"\3\2\2\2\u008a\u0692\3\2\2\2\u008c\u0694\3\2\2\2\u008e")
        buf.write(u"\u0696\3\2\2\2\u0090\u0698\3\2\2\2\u0092\u069a\3\2\2")
        buf.write(u"\2\u0094\u069c\3\2\2\2\u0096\u069e\3\2\2\2\u0098\u06a0")
        buf.write(u"\3\2\2\2\u009a\u06a2\3\2\2\2\u009c\u06a4\3\2\2\2\u009e")
        buf.write(u"\u06a6\3\2\2\2\u00a0\u06a8\3\2\2\2\u00a2\u06aa\3\2\2")
        buf.write(u"\2\u00a4\u06ac\3\2\2\2\u00a6\u06b4\3\2\2\2\u00a8\u06b6")
        buf.write(u"\3\2\2\2\u00aa\u06bf\3\2\2\2\u00ac\u00af\5\6\4\2\u00ad")
        buf.write(u"\u00af\5\4\3\2\u00ae\u00ac\3\2\2\2\u00ae\u00ad\3\2\2")
        buf.write(u"\2\u00af\u00b2\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b0\u00b1")
        buf.write(u"\3\2\2\2\u00b1\u00b3\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b3")
        buf.write(u"\u00b4\7\2\2\3\u00b4\3\3\2\2\2\u00b5\u00b6\7\u00a3\2")
        buf.write(u"\2\u00b6\5\3\2\2\2\u00b7\u00b9\7\3\2\2\u00b8\u00b7\3")
        buf.write(u"\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba")
        buf.write(u"\u00bb\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc\u00ba\3\2\2")
        buf.write(u"\2\u00bd\u00c6\5\b\5\2\u00be\u00c0\7\3\2\2\u00bf\u00be")
        buf.write(u"\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1")
        buf.write(u"\u00c2\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5\5\b\5")
        buf.write(u"\2\u00c4\u00bf\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4")
        buf.write(u"\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00cc\3\2\2\2\u00c8")
        buf.write(u"\u00c6\3\2\2\2\u00c9\u00cb\7\3\2\2\u00ca\u00c9\3\2\2")
        buf.write(u"\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd")
        buf.write(u"\3\2\2\2\u00cd\7\3\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d2")
        buf.write(u"\7I\2\2\u00d0\u00d1\7u\2\2\u00d1\u00d3\7r\2\2\u00d2\u00d0")
        buf.write(u"\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d5\3\2\2\2\u00d4")
        buf.write(u"\u00cf\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00f4\3\2\2")
        buf.write(u"\2\u00d6\u00f5\5\n\6\2\u00d7\u00f5\5\f\7\2\u00d8\u00f5")
        buf.write(u"\5\16\b\2\u00d9\u00f5\5\20\t\2\u00da\u00f5\5\22\n\2\u00db")
        buf.write(u"\u00f5\5\24\13\2\u00dc\u00f5\5\26\f\2\u00dd\u00f5\5\30")
        buf.write(u"\r\2\u00de\u00f5\5\32\16\2\u00df\u00f5\5\34\17\2\u00e0")
        buf.write(u"\u00f5\5\36\20\2\u00e1\u00f5\5 \21\2\u00e2\u00f5\5\"")
        buf.write(u"\22\2\u00e3\u00f5\5$\23\2\u00e4\u00f5\5&\24\2\u00e5\u00f5")
        buf.write(u"\5(\25\2\u00e6\u00f5\5*\26\2\u00e7\u00f5\5,\27\2\u00e8")
        buf.write(u"\u00f5\5.\30\2\u00e9\u00f5\5\60\31\2\u00ea\u00f5\5\62")
        buf.write(u"\32\2\u00eb\u00f5\5\64\33\2\u00ec\u00f5\5\66\34\2\u00ed")
        buf.write(u"\u00f5\58\35\2\u00ee\u00f5\5:\36\2\u00ef\u00f5\5<\37")
        buf.write(u"\2\u00f0\u00f5\5> \2\u00f1\u00f5\5B\"\2\u00f2\u00f5\5")
        buf.write(u"D#\2\u00f3\u00f5\5F$\2\u00f4\u00d6\3\2\2\2\u00f4\u00d7")
        buf.write(u"\3\2\2\2\u00f4\u00d8\3\2\2\2\u00f4\u00d9\3\2\2\2\u00f4")
        buf.write(u"\u00da\3\2\2\2\u00f4\u00db\3\2\2\2\u00f4\u00dc\3\2\2")
        buf.write(u"\2\u00f4\u00dd\3\2\2\2\u00f4\u00de\3\2\2\2\u00f4\u00df")
        buf.write(u"\3\2\2\2\u00f4\u00e0\3\2\2\2\u00f4\u00e1\3\2\2\2\u00f4")
        buf.write(u"\u00e2\3\2\2\2\u00f4\u00e3\3\2\2\2\u00f4\u00e4\3\2\2")
        buf.write(u"\2\u00f4\u00e5\3\2\2\2\u00f4\u00e6\3\2\2\2\u00f4\u00e7")
        buf.write(u"\3\2\2\2\u00f4\u00e8\3\2\2\2\u00f4\u00e9\3\2\2\2\u00f4")
        buf.write(u"\u00ea\3\2\2\2\u00f4\u00eb\3\2\2\2\u00f4\u00ec\3\2\2")
        buf.write(u"\2\u00f4\u00ed\3\2\2\2\u00f4\u00ee\3\2\2\2\u00f4\u00ef")
        buf.write(u"\3\2\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1\3\2\2\2\u00f4")
        buf.write(u"\u00f2\3\2\2\2\u00f4\u00f3\3\2\2\2\u00f5\t\3\2\2\2\u00f6")
        buf.write(u"\u00f7\7 \2\2\u00f7\u00fb\7\u0085\2\2\u00f8\u00f9\5\u008a")
        buf.write(u"F\2\u00f9\u00fa\7\4\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f8")
        buf.write(u"\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd")
        buf.write(u"\u0106\5\u008eH\2\u00fe\u00ff\7|\2\2\u00ff\u0100\7\u0089")
        buf.write(u"\2\2\u0100\u0107\5\u0092J\2\u0101\u0103\7\35\2\2\u0102")
        buf.write(u"\u0104\7\60\2\2\u0103\u0102\3\2\2\2\u0103\u0104\3\2\2")
        buf.write(u"\2\u0104\u0105\3\2\2\2\u0105\u0107\5H%\2\u0106\u00fe")
        buf.write(u"\3\2\2\2\u0106\u0101\3\2\2\2\u0107\13\3\2\2\2\u0108\u010f")
        buf.write(u"\7!\2\2\u0109\u0110\5\u008aF\2\u010a\u0110\5\u0090I\2")
        buf.write(u"\u010b\u010c\5\u008aF\2\u010c\u010d\7\4\2\2\u010d\u010e")
        buf.write(u"\5\u0090I\2\u010e\u0110\3\2\2\2\u010f\u0109\3\2\2\2\u010f")
        buf.write(u"\u010a\3\2\2\2\u010f\u010b\3\2\2\2\u010f\u0110\3\2\2")
        buf.write(u"\2\u0110\r\3\2\2\2\u0111\u0113\7%\2\2\u0112\u0114\79")
        buf.write(u"\2\2\u0113\u0112\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115")
        buf.write(u"\3\2\2\2\u0115\u0116\5V,\2\u0116\u0117\7#\2\2\u0117\u0118")
        buf.write(u"\5\u008aF\2\u0118\17\3\2\2\2\u0119\u011b\7(\2\2\u011a")
        buf.write(u"\u011c\t\2\2\2\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2")
        buf.write(u"\2\u011c\u0121\3\2\2\2\u011d\u011f\7\u008a\2\2\u011e")
        buf.write(u"\u0120\5\u00a8U\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2")
        buf.write(u"\2\2\u0120\u0122\3\2\2\2\u0121\u011d\3\2\2\2\u0121\u0122")
        buf.write(u"\3\2\2\2\u0122\21\3\2\2\2\u0123\u0128\t\3\2\2\u0124\u0126")
        buf.write(u"\7\u008a\2\2\u0125\u0127\5\u00a8U\2\u0126\u0125\3\2\2")
        buf.write(u"\2\u0126\u0127\3\2\2\2\u0127\u0129\3\2\2\2\u0128\u0124")
        buf.write(u"\3\2\2\2\u0128\u0129\3\2\2\2\u0129\23\3\2\2\2\u012a\u012c")
        buf.write(u"\5`\61\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write(u"\u012d\3\2\2\2\u012d\u0137\5t;\2\u012e\u0130\7\u008c")
        buf.write(u"\2\2\u012f\u0131\7\37\2\2\u0130\u012f\3\2\2\2\u0130\u0131")
        buf.write(u"\3\2\2\2\u0131\u0135\3\2\2\2\u0132\u0135\7]\2\2\u0133")
        buf.write(u"\u0135\7F\2\2\u0134\u012e\3\2\2\2\u0134\u0132\3\2\2\2")
        buf.write(u"\u0134\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0138")
        buf.write(u"\5t;\2\u0137\u0134\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write(u"\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0145\3\2\2")
        buf.write(u"\2\u013b\u013c\7p\2\2\u013c\u013d\7*\2\2\u013d\u0142")
        buf.write(u"\5d\63\2\u013e\u013f\7\7\2\2\u013f\u0141\5d\63\2\u0140")
        buf.write(u"\u013e\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2")
        buf.write(u"\2\u0142\u0143\3\2\2\2\u0143\u0146\3\2\2\2\u0144\u0142")
        buf.write(u"\3\2\2\2\u0145\u013b\3\2\2\2\u0145\u0146\3\2\2\2\u0146")
        buf.write(u"\u014d\3\2\2\2\u0147\u0148\7e\2\2\u0148\u014b\5V,\2\u0149")
        buf.write(u"\u014a\t\4\2\2\u014a\u014c\5V,\2\u014b\u0149\3\2\2\2")
        buf.write(u"\u014b\u014c\3\2\2\2\u014c\u014e\3\2\2\2\u014d\u0147")
        buf.write(u"\3\2\2\2\u014d\u014e\3\2\2\2\u014e\25\3\2\2\2\u014f\u0151")
        buf.write(u"\7\64\2\2\u0150\u0152\7\u008d\2\2\u0151\u0150\3\2\2\2")
        buf.write(u"\u0151\u0152\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0157")
        buf.write(u"\7W\2\2\u0154\u0155\7S\2\2\u0155\u0156\7i\2\2\u0156\u0158")
        buf.write(u"\7H\2\2\u0157\u0154\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write(u"\u015c\3\2\2\2\u0159\u015a\5\u008aF\2\u015a\u015b\7\4")
        buf.write(u"\2\2\u015b\u015d\3\2\2\2\u015c\u0159\3\2\2\2\u015c\u015d")
        buf.write(u"\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015f\5\u009aN\2\u015f")
        buf.write(u"\u0160\7n\2\2\u0160\u0161\5\u008eH\2\u0161\u0162\7\5")
        buf.write(u"\2\2\u0162\u0167\5\\/\2\u0163\u0164\7\7\2\2\u0164\u0166")
        buf.write(u"\5\\/\2\u0165\u0163\3\2\2\2\u0166\u0169\3\2\2\2\u0167")
        buf.write(u"\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016a\3\2\2")
        buf.write(u"\2\u0169\u0167\3\2\2\2\u016a\u016d\7\6\2\2\u016b\u016c")
        buf.write(u"\7\u0096\2\2\u016c\u016e\5V,\2\u016d\u016b\3\2\2\2\u016d")
        buf.write(u"\u016e\3\2\2\2\u016e\27\3\2\2\2\u016f\u0171\7\64\2\2")
        buf.write(u"\u0170\u0172\t\5\2\2\u0171\u0170\3\2\2\2\u0171\u0172")
        buf.write(u"\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0177\7\u0085\2\2")
        buf.write(u"\u0174\u0175\7S\2\2\u0175\u0176\7i\2\2\u0176\u0178\7")
        buf.write(u"H\2\2\u0177\u0174\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017c")
        buf.write(u"\3\2\2\2\u0179\u017a\5\u008aF\2\u017a\u017b\7\4\2\2\u017b")
        buf.write(u"\u017d\3\2\2\2\u017c\u0179\3\2\2\2\u017c\u017d\3\2\2")
        buf.write(u"\2\u017d\u017e\3\2\2\2\u017e\u0196\5\u008eH\2\u017f\u0180")
        buf.write(u"\7\5\2\2\u0180\u0185\5H%\2\u0181\u0182\7\7\2\2\u0182")
        buf.write(u"\u0184\5H%\2\u0183\u0181\3\2\2\2\u0184\u0187\3\2\2\2")
        buf.write(u"\u0185\u0186\3\2\2\2\u0185\u0183\3\2\2\2\u0186\u018c")
        buf.write(u"\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u0189\7\7\2\2\u0189")
        buf.write(u"\u018b\5^\60\2\u018a\u0188\3\2\2\2\u018b\u018e\3\2\2")
        buf.write(u"\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018f")
        buf.write(u"\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0192\7\6\2\2\u0190")
        buf.write(u"\u0191\7\u0098\2\2\u0191\u0193\7\u0099\2\2\u0192\u0190")
        buf.write(u"\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0197\3\2\2\2\u0194")
        buf.write(u"\u0195\7#\2\2\u0195\u0197\5> \2\u0196\u017f\3\2\2\2\u0196")
        buf.write(u"\u0194\3\2\2\2\u0197\31\3\2\2\2\u0198\u019a\7\64\2\2")
        buf.write(u"\u0199\u019b\t\5\2\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write(u"\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01a0\7\u008b\2\2")
        buf.write(u"\u019d\u019e\7S\2\2\u019e\u019f\7i\2\2\u019f\u01a1\7")
        buf.write(u"H\2\2\u01a0\u019d\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a5")
        buf.write(u"\3\2\2\2\u01a2\u01a3\5\u008aF\2\u01a3\u01a4\7\4\2\2\u01a4")
        buf.write(u"\u01a6\3\2\2\2\u01a5\u01a2\3\2\2\2\u01a5\u01a6\3\2\2")
        buf.write(u"\2\u01a6\u01a7\3\2\2\2\u01a7\u01ac\5\u009cO\2\u01a8\u01ad")
        buf.write(u"\7\'\2\2\u01a9\u01ad\7\36\2\2\u01aa\u01ab\7\\\2\2\u01ab")
        buf.write(u"\u01ad\7l\2\2\u01ac\u01a8\3\2\2\2\u01ac\u01a9\3\2\2\2")
        buf.write(u"\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01bc")
        buf.write(u"\3\2\2\2\u01ae\u01bd\7=\2\2\u01af\u01bd\7[\2\2\u01b0")
        buf.write(u"\u01ba\7\u008e\2\2\u01b1\u01b2\7l\2\2\u01b2\u01b7\5\u0094")
        buf.write(u"K\2\u01b3\u01b4\7\7\2\2\u01b4\u01b6\5\u0094K\2\u01b5")
        buf.write(u"\u01b3\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2")
        buf.write(u"\2\u01b7\u01b8\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7")
        buf.write(u"\3\2\2\2\u01ba\u01b1\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb")
        buf.write(u"\u01bd\3\2\2\2\u01bc\u01ae\3\2\2\2\u01bc\u01af\3\2\2")
        buf.write(u"\2\u01bc\u01b0\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c2")
        buf.write(u"\7n\2\2\u01bf\u01c0\5\u008aF\2\u01c0\u01c1\7\4\2\2\u01c1")
        buf.write(u"\u01c3\3\2\2\2\u01c2\u01bf\3\2\2\2\u01c2\u01c3\3\2\2")
        buf.write(u"\2\u01c3\u01c4\3\2\2\2\u01c4\u01c8\5\u008eH\2\u01c5\u01c6")
        buf.write(u"\7L\2\2\u01c6\u01c7\7B\2\2\u01c7\u01c9\7\u0081\2\2\u01c8")
        buf.write(u"\u01c5\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cc\3\2\2")
        buf.write(u"\2\u01ca\u01cb\7\u0095\2\2\u01cb\u01cd\5V,\2\u01cc\u01ca")
        buf.write(u"\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce")
        buf.write(u"\u01d7\7(\2\2\u01cf\u01d4\5B\"\2\u01d0\u01d4\5\60\31")
        buf.write(u"\2\u01d1\u01d4\5 \21\2\u01d2\u01d4\5> \2\u01d3\u01cf")
        buf.write(u"\3\2\2\2\u01d3\u01d0\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d3")
        buf.write(u"\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\7\3\2")
        buf.write(u"\2\u01d6\u01d8\3\2\2\2\u01d7\u01d3\3\2\2\2\u01d8\u01d9")
        buf.write(u"\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write(u"\u01db\3\2\2\2\u01db\u01dc\7D\2\2\u01dc\33\3\2\2\2\u01dd")
        buf.write(u"\u01df\7\64\2\2\u01de\u01e0\t\5\2\2\u01df\u01de\3\2\2")
        buf.write(u"\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e5")
        buf.write(u"\7\u0093\2\2\u01e2\u01e3\7S\2\2\u01e3\u01e4\7i\2\2\u01e4")
        buf.write(u"\u01e6\7H\2\2\u01e5\u01e2\3\2\2\2\u01e5\u01e6\3\2\2\2")
        buf.write(u"\u01e6\u01ea\3\2\2\2\u01e7\u01e8\5\u008aF\2\u01e8\u01e9")
        buf.write(u"\7\4\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01e7\3\2\2\2\u01ea")
        buf.write(u"\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01f8\5\u009e")
        buf.write(u"P\2\u01ed\u01ee\7\5\2\2\u01ee\u01f3\5\u0094K\2\u01ef")
        buf.write(u"\u01f0\7\7\2\2\u01f0\u01f2\5\u0094K\2\u01f1\u01ef\3\2")
        buf.write(u"\2\2\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4")
        buf.write(u"\3\2\2\2\u01f4\u01f6\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6")
        buf.write(u"\u01f7\7\6\2\2\u01f7\u01f9\3\2\2\2\u01f8\u01ed\3\2\2")
        buf.write(u"\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb")
        buf.write(u"\7#\2\2\u01fb\u01fc\5> \2\u01fc\35\3\2\2\2\u01fd\u01fe")
        buf.write(u"\7\64\2\2\u01fe\u01ff\7\u0094\2\2\u01ff\u0203\7\u0085")
        buf.write(u"\2\2\u0200\u0201\7S\2\2\u0201\u0202\7i\2\2\u0202\u0204")
        buf.write(u"\7H\2\2\u0203\u0200\3\2\2\2\u0203\u0204\3\2\2\2\u0204")
        buf.write(u"\u0208\3\2\2\2\u0205\u0206\5\u008aF\2\u0206\u0207\7\4")
        buf.write(u"\2\2\u0207\u0209\3\2\2\2\u0208\u0205\3\2\2\2\u0208\u0209")
        buf.write(u"\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\5\u008eH\2\u020b")
        buf.write(u"\u020c\7\u008f\2\2\u020c\u0218\5\u00a0Q\2\u020d\u020e")
        buf.write(u"\7\5\2\2\u020e\u0213\5\u0080A\2\u020f\u0210\7\7\2\2\u0210")
        buf.write(u"\u0212\5\u0080A\2\u0211\u020f\3\2\2\2\u0212\u0215\3\2")
        buf.write(u"\2\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0216")
        buf.write(u"\3\2\2\2\u0215\u0213\3\2\2\2\u0216\u0217\7\6\2\2\u0217")
        buf.write(u"\u0219\3\2\2\2\u0218\u020d\3\2\2\2\u0218\u0219\3\2\2")
        buf.write(u"\2\u0219\37\3\2\2\2\u021a\u021c\5`\61\2\u021b\u021a\3")
        buf.write(u"\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\3\2\2\2\u021d")
        buf.write(u"\u021e\7=\2\2\u021e\u021f\7N\2\2\u021f\u0222\5b\62\2")
        buf.write(u"\u0220\u0221\7\u0096\2\2\u0221\u0223\5V,\2\u0222\u0220")
        buf.write(u"\3\2\2\2\u0222\u0223\3\2\2\2\u0223!\3\2\2\2\u0224\u0226")
        buf.write(u"\5`\61\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226")
        buf.write(u"\u0227\3\2\2\2\u0227\u0228\7=\2\2\u0228\u0229\7N\2\2")
        buf.write(u"\u0229\u022c\5b\62\2\u022a\u022b\7\u0096\2\2\u022b\u022d")
        buf.write(u"\5V,\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write(u"\u0240\3\2\2\2\u022e\u022f\7p\2\2\u022f\u0230\7*\2\2")
        buf.write(u"\u0230\u0235\5d\63\2\u0231\u0232\7\7\2\2\u0232\u0234")
        buf.write(u"\5d\63\2\u0233\u0231\3\2\2\2\u0234\u0237\3\2\2\2\u0235")
        buf.write(u"\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0239\3\2\2")
        buf.write(u"\2\u0237\u0235\3\2\2\2\u0238\u022e\3\2\2\2\u0238\u0239")
        buf.write(u"\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\7e\2\2\u023b")
        buf.write(u"\u023e\5V,\2\u023c\u023d\t\4\2\2\u023d\u023f\5V,\2\u023e")
        buf.write(u"\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0241\3\2\2")
        buf.write(u"\2\u0240\u0238\3\2\2\2\u0240\u0241\3\2\2\2\u0241#\3\2")
        buf.write(u"\2\2\u0242\u0244\7?\2\2\u0243\u0245\79\2\2\u0244\u0243")
        buf.write(u"\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write(u"\u0247\5\u008aF\2\u0247%\3\2\2\2\u0248\u0249\7A\2\2\u0249")
        buf.write(u"\u024c\7W\2\2\u024a\u024b\7S\2\2\u024b\u024d\7H\2\2\u024c")
        buf.write(u"\u024a\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u0251\3\2\2")
        buf.write(u"\2\u024e\u024f\5\u008aF\2\u024f\u0250\7\4\2\2\u0250\u0252")
        buf.write(u"\3\2\2\2\u0251\u024e\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write(u"\u0253\3\2\2\2\u0253\u0254\5\u009aN\2\u0254\'\3\2\2\2")
        buf.write(u"\u0255\u0256\7A\2\2\u0256\u0259\7\u0085\2\2\u0257\u0258")
        buf.write(u"\7S\2\2\u0258\u025a\7H\2\2\u0259\u0257\3\2\2\2\u0259")
        buf.write(u"\u025a\3\2\2\2\u025a\u025e\3\2\2\2\u025b\u025c\5\u008a")
        buf.write(u"F\2\u025c\u025d\7\4\2\2\u025d\u025f\3\2\2\2\u025e\u025b")
        buf.write(u"\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write(u"\u0261\5\u008eH\2\u0261)\3\2\2\2\u0262\u0263\7A\2\2\u0263")
        buf.write(u"\u0266\7\u008b\2\2\u0264\u0265\7S\2\2\u0265\u0267\7H")
        buf.write(u"\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u026b")
        buf.write(u"\3\2\2\2\u0268\u0269\5\u008aF\2\u0269\u026a\7\4\2\2\u026a")
        buf.write(u"\u026c\3\2\2\2\u026b\u0268\3\2\2\2\u026b\u026c\3\2\2")
        buf.write(u"\2\u026c\u026d\3\2\2\2\u026d\u026e\5\u009cO\2\u026e+")
        buf.write(u"\3\2\2\2\u026f\u0270\7A\2\2\u0270\u0273\7\u0093\2\2\u0271")
        buf.write(u"\u0272\7S\2\2\u0272\u0274\7H\2\2\u0273\u0271\3\2\2\2")
        buf.write(u"\u0273\u0274\3\2\2\2\u0274\u0278\3\2\2\2\u0275\u0276")
        buf.write(u"\5\u008aF\2\u0276\u0277\7\4\2\2\u0277\u0279\3\2\2\2\u0278")
        buf.write(u"\u0275\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3\2\2")
        buf.write(u"\2\u027a\u027b\5\u009eP\2\u027b-\3\2\2\2\u027c\u027e")
        buf.write(u"\5`\61\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e")
        buf.write(u"\u027f\3\2\2\2\u027f\u0285\5t;\2\u0280\u0281\5v<\2\u0281")
        buf.write(u"\u0282\5t;\2\u0282\u0284\3\2\2\2\u0283\u0280\3\2\2\2")
        buf.write(u"\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0286")
        buf.write(u"\3\2\2\2\u0286\u0292\3\2\2\2\u0287\u0285\3\2\2\2\u0288")
        buf.write(u"\u0289\7p\2\2\u0289\u028a\7*\2\2\u028a\u028f\5d\63\2")
        buf.write(u"\u028b\u028c\7\7\2\2\u028c\u028e\5d\63\2\u028d\u028b")
        buf.write(u"\3\2\2\2\u028e\u0291\3\2\2\2\u028f\u028d\3\2\2\2\u028f")
        buf.write(u"\u0290\3\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2")
        buf.write(u"\2\u0292\u0288\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u029a")
        buf.write(u"\3\2\2\2\u0294\u0295\7e\2\2\u0295\u0298\5V,\2\u0296\u0297")
        buf.write(u"\t\4\2\2\u0297\u0299\5V,\2\u0298\u0296\3\2\2\2\u0298")
        buf.write(u"\u0299\3\2\2\2\u0299\u029b\3\2\2\2\u029a\u0294\3\2\2")
        buf.write(u"\2\u029a\u029b\3\2\2\2\u029b/\3\2\2\2\u029c\u029e\5`")
        buf.write(u"\61\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02b0")
        buf.write(u"\3\2\2\2\u029f\u02b1\7[\2\2\u02a0\u02b1\7}\2\2\u02a1")
        buf.write(u"\u02a2\7[\2\2\u02a2\u02a3\7o\2\2\u02a3\u02b1\7}\2\2\u02a4")
        buf.write(u"\u02a5\7[\2\2\u02a5\u02a6\7o\2\2\u02a6\u02b1\7\u0080")
        buf.write(u"\2\2\u02a7\u02a8\7[\2\2\u02a8\u02a9\7o\2\2\u02a9\u02b1")
        buf.write(u"\7\33\2\2\u02aa\u02ab\7[\2\2\u02ab\u02ac\7o\2\2\u02ac")
        buf.write(u"\u02b1\7J\2\2\u02ad\u02ae\7[\2\2\u02ae\u02af\7o\2\2\u02af")
        buf.write(u"\u02b1\7T\2\2\u02b0\u029f\3\2\2\2\u02b0\u02a0\3\2\2\2")
        buf.write(u"\u02b0\u02a1\3\2\2\2\u02b0\u02a4\3\2\2\2\u02b0\u02a7")
        buf.write(u"\3\2\2\2\u02b0\u02aa\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b1")
        buf.write(u"\u02b2\3\2\2\2\u02b2\u02b6\7^\2\2\u02b3\u02b4\5\u008a")
        buf.write(u"F\2\u02b4\u02b5\7\4\2\2\u02b5\u02b7\3\2\2\2\u02b6\u02b3")
        buf.write(u"\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8")
        buf.write(u"\u02c4\5\u008eH\2\u02b9\u02ba\7\5\2\2\u02ba\u02bf\5\u0094")
        buf.write(u"K\2\u02bb\u02bc\7\7\2\2\u02bc\u02be\5\u0094K\2\u02bd")
        buf.write(u"\u02bb\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf\u02bd\3\2\2")
        buf.write(u"\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2\3\2\2\2\u02c1\u02bf")
        buf.write(u"\3\2\2\2\u02c2\u02c3\7\6\2\2\u02c3\u02c5\3\2\2\2\u02c4")
        buf.write(u"\u02b9\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02e5\3\2\2")
        buf.write(u"\2\u02c6\u02c7\7\u0092\2\2\u02c7\u02c8\7\5\2\2\u02c8")
        buf.write(u"\u02cd\5V,\2\u02c9\u02ca\7\7\2\2\u02ca\u02cc\5V,\2\u02cb")
        buf.write(u"\u02c9\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2")
        buf.write(u"\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0\3\2\2\2\u02cf\u02cd")
        buf.write(u"\3\2\2\2\u02d0\u02df\7\6\2\2\u02d1\u02d2\7\7\2\2\u02d2")
        buf.write(u"\u02d3\7\5\2\2\u02d3\u02d8\5V,\2\u02d4\u02d5\7\7\2\2")
        buf.write(u"\u02d5\u02d7\5V,\2\u02d6\u02d4\3\2\2\2\u02d7\u02da\3")
        buf.write(u"\2\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9")
        buf.write(u"\u02db\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\7\6\2")
        buf.write(u"\2\u02dc\u02de\3\2\2\2\u02dd\u02d1\3\2\2\2\u02de\u02e1")
        buf.write(u"\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0")
        buf.write(u"\u02e6\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2\u02e6\5> \2")
        buf.write(u"\u02e3\u02e4\7:\2\2\u02e4\u02e6\7\u0092\2\2\u02e5\u02c6")
        buf.write(u"\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e6")
        buf.write(u"\61\3\2\2\2\u02e7\u02eb\7s\2\2\u02e8\u02e9\5\u008aF\2")
        buf.write(u"\u02e9\u02ea\7\4\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e8")
        buf.write(u"\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed")
        buf.write(u"\u02f4\5\u00a2R\2\u02ee\u02ef\7\b\2\2\u02ef\u02f5\5f")
        buf.write(u"\64\2\u02f0\u02f1\7\5\2\2\u02f1\u02f2\5f\64\2\u02f2\u02f3")
        buf.write(u"\7\6\2\2\u02f3\u02f5\3\2\2\2\u02f4\u02ee\3\2\2\2\u02f4")
        buf.write(u"\u02f0\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\63\3\2\2\2\u02f6")
        buf.write(u"\u0301\7z\2\2\u02f7\u0302\5\u0096L\2\u02f8\u02f9\5\u008a")
        buf.write(u"F\2\u02f9\u02fa\7\4\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02f8")
        buf.write(u"\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd")
        buf.write(u"\u0300\5\u008eH\2\u02fe\u0300\5\u009aN\2\u02ff\u02fd")
        buf.write(u"\3\2\2\2\u02ff\u02fe\3\2\2\2\u0300\u0302\3\2\2\2\u0301")
        buf.write(u"\u02f7\3\2\2\2\u0301\u02fb\3\2\2\2\u0301\u0302\3\2\2")
        buf.write(u"\2\u0302\65\3\2\2\2\u0303\u0305\7{\2\2\u0304\u0306\7")
        buf.write(u"\u0082\2\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write(u"\u0307\3\2\2\2\u0307\u0308\5\u00a4S\2\u0308\67\3\2\2")
        buf.write(u"\2\u0309\u030e\7\u0080\2\2\u030a\u030c\7\u008a\2\2\u030b")
        buf.write(u"\u030d\5\u00a8U\2\u030c\u030b\3\2\2\2\u030c\u030d\3\2")
        buf.write(u"\2\2\u030d\u030f\3\2\2\2\u030e\u030a\3\2\2\2\u030e\u030f")
        buf.write(u"\3\2\2\2\u030f\u0315\3\2\2\2\u0310\u0312\7\u0089\2\2")
        buf.write(u"\u0311\u0313\7\u0082\2\2\u0312\u0311\3\2\2\2\u0312\u0313")
        buf.write(u"\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316\5\u00a4S\2\u0315")
        buf.write(u"\u0310\3\2\2\2\u0315\u0316\3\2\2\2\u03169\3\2\2\2\u0317")
        buf.write(u"\u0318\7\u0082\2\2\u0318\u0319\5\u00a4S\2\u0319;\3\2")
        buf.write(u"\2\2\u031a\u031c\5`\61\2\u031b\u031a\3\2\2\2\u031b\u031c")
        buf.write(u"\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u0328\5t;\2\u031e")
        buf.write(u"\u031f\7p\2\2\u031f\u0320\7*\2\2\u0320\u0325\5d\63\2")
        buf.write(u"\u0321\u0322\7\7\2\2\u0322\u0324\5d\63\2\u0323\u0321")
        buf.write(u"\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323\3\2\2\2\u0325")
        buf.write(u"\u0326\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325\3\2\2")
        buf.write(u"\2\u0328\u031e\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0330")
        buf.write(u"\3\2\2\2\u032a\u032b\7e\2\2\u032b\u032e\5V,\2\u032c\u032d")
        buf.write(u"\t\4\2\2\u032d\u032f\5V,\2\u032e\u032c\3\2\2\2\u032e")
        buf.write(u"\u032f\3\2\2\2\u032f\u0331\3\2\2\2\u0330\u032a\3\2\2")
        buf.write(u"\2\u0330\u0331\3\2\2\2\u0331=\3\2\2\2\u0332\u0334\5`")
        buf.write(u"\61\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335")
        buf.write(u"\3\2\2\2\u0335\u033b\5@!\2\u0336\u0337\5v<\2\u0337\u0338")
        buf.write(u"\5@!\2\u0338\u033a\3\2\2\2\u0339\u0336\3\2\2\2\u033a")
        buf.write(u"\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2")
        buf.write(u"\2\u033c\u0348\3\2\2\2\u033d\u033b\3\2\2\2\u033e\u033f")
        buf.write(u"\7p\2\2\u033f\u0340\7*\2\2\u0340\u0345\5d\63\2\u0341")
        buf.write(u"\u0342\7\7\2\2\u0342\u0344\5d\63\2\u0343\u0341\3\2\2")
        buf.write(u"\2\u0344\u0347\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346")
        buf.write(u"\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0348")
        buf.write(u"\u033e\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u0350\3\2\2")
        buf.write(u"\2\u034a\u034b\7e\2\2\u034b\u034e\5V,\2\u034c\u034d\t")
        buf.write(u"\4\2\2\u034d\u034f\5V,\2\u034e\u034c\3\2\2\2\u034e\u034f")
        buf.write(u"\3\2\2\2\u034f\u0351\3\2\2\2\u0350\u034a\3\2\2\2\u0350")
        buf.write(u"\u0351\3\2\2\2\u0351?\3\2\2\2\u0352\u0354\7\u0083\2\2")
        buf.write(u"\u0353\u0355\t\6\2\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write(u"\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u035b\5j\66\2\u0357")
        buf.write(u"\u0358\7\7\2\2\u0358\u035a\5j\66\2\u0359\u0357\3\2\2")
        buf.write(u"\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c")
        buf.write(u"\3\2\2\2\u035c\u036a\3\2\2\2\u035d\u035b\3\2\2\2\u035e")
        buf.write(u"\u0368\7N\2\2\u035f\u0364\5l\67\2\u0360\u0361\7\7\2\2")
        buf.write(u"\u0361\u0363\5l\67\2\u0362\u0360\3\2\2\2\u0363\u0366")
        buf.write(u"\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write(u"\u0369\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u0369\5n8\2")
        buf.write(u"\u0368\u035f\3\2\2\2\u0368\u0367\3\2\2\2\u0369\u036b")
        buf.write(u"\3\2\2\2\u036a\u035e\3\2\2\2\u036a\u036b\3\2\2\2\u036b")
        buf.write(u"\u036e\3\2\2\2\u036c\u036d\7\u0096\2\2\u036d\u036f\5")
        buf.write(u"V,\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u037e")
        buf.write(u"\3\2\2\2\u0370\u0371\7Q\2\2\u0371\u0372\7*\2\2\u0372")
        buf.write(u"\u0377\5V,\2\u0373\u0374\7\7\2\2\u0374\u0376\5V,\2\u0375")
        buf.write(u"\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375\3\2\2")
        buf.write(u"\2\u0377\u0378\3\2\2\2\u0378\u037c\3\2\2\2\u0379\u0377")
        buf.write(u"\3\2\2\2\u037a\u037b\7R\2\2\u037b\u037d\5V,\2\u037c\u037a")
        buf.write(u"\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\3\2\2\2\u037e")
        buf.write(u"\u0370\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u039d\3\2\2")
        buf.write(u"\2\u0380\u0381\7\u0092\2\2\u0381\u0382\7\5\2\2\u0382")
        buf.write(u"\u0387\5V,\2\u0383\u0384\7\7\2\2\u0384\u0386\5V,\2\u0385")
        buf.write(u"\u0383\3\2\2\2\u0386\u0389\3\2\2\2\u0387\u0385\3\2\2")
        buf.write(u"\2\u0387\u0388\3\2\2\2\u0388\u038a\3\2\2\2\u0389\u0387")
        buf.write(u"\3\2\2\2\u038a\u0399\7\6\2\2\u038b\u038c\7\7\2\2\u038c")
        buf.write(u"\u038d\7\5\2\2\u038d\u0392\5V,\2\u038e\u038f\7\7\2\2")
        buf.write(u"\u038f\u0391\5V,\2\u0390\u038e\3\2\2\2\u0391\u0394\3")
        buf.write(u"\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write(u"\u0395\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u0396\7\6\2")
        buf.write(u"\2\u0396\u0398\3\2\2\2\u0397\u038b\3\2\2\2\u0398\u039b")
        buf.write(u"\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u039a\3\2\2\2\u039a")
        buf.write(u"\u039d\3\2\2\2\u039b\u0399\3\2\2\2\u039c\u0352\3\2\2")
        buf.write(u"\2\u039c\u0380\3\2\2\2\u039dA\3\2\2\2\u039e\u03a0\5`")
        buf.write(u"\61\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write(u"\3\2\2\2\u03a1\u03ac\7\u008e\2\2\u03a2\u03a3\7o\2\2\u03a3")
        buf.write(u"\u03ad\7\u0080\2\2\u03a4\u03a5\7o\2\2\u03a5\u03ad\7\33")
        buf.write(u"\2\2\u03a6\u03a7\7o\2\2\u03a7\u03ad\7}\2\2\u03a8\u03a9")
        buf.write(u"\7o\2\2\u03a9\u03ad\7J\2\2\u03aa\u03ab\7o\2\2\u03ab\u03ad")
        buf.write(u"\7T\2\2\u03ac\u03a2\3\2\2\2\u03ac\u03a4\3\2\2\2\u03ac")
        buf.write(u"\u03a6\3\2\2\2\u03ac\u03a8\3\2\2\2\u03ac\u03aa\3\2\2")
        buf.write(u"\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af")
        buf.write(u"\5b\62\2\u03af\u03b0\7\u0084\2\2\u03b0\u03b1\5\u0094")
        buf.write(u"K\2\u03b1\u03b2\7\b\2\2\u03b2\u03ba\5V,\2\u03b3\u03b4")
        buf.write(u"\7\7\2\2\u03b4\u03b5\5\u0094K\2\u03b5\u03b6\7\b\2\2\u03b6")
        buf.write(u"\u03b7\5V,\2\u03b7\u03b9\3\2\2\2\u03b8\u03b3\3\2\2\2")
        buf.write(u"\u03b9\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb")
        buf.write(u"\3\2\2\2\u03bb\u03bf\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd")
        buf.write(u"\u03be\7\u0096\2\2\u03be\u03c0\5V,\2\u03bf\u03bd\3\2")
        buf.write(u"\2\2\u03bf\u03c0\3\2\2\2\u03c0C\3\2\2\2\u03c1\u03c3\5")
        buf.write(u"`\61\2\u03c2\u03c1\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write(u"\u03c4\3\2\2\2\u03c4\u03cf\7\u008e\2\2\u03c5\u03c6\7")
        buf.write(u"o\2\2\u03c6\u03d0\7\u0080\2\2\u03c7\u03c8\7o\2\2\u03c8")
        buf.write(u"\u03d0\7\33\2\2\u03c9\u03ca\7o\2\2\u03ca\u03d0\7}\2\2")
        buf.write(u"\u03cb\u03cc\7o\2\2\u03cc\u03d0\7J\2\2\u03cd\u03ce\7")
        buf.write(u"o\2\2\u03ce\u03d0\7T\2\2\u03cf\u03c5\3\2\2\2\u03cf\u03c7")
        buf.write(u"\3\2\2\2\u03cf\u03c9\3\2\2\2\u03cf\u03cb\3\2\2\2\u03cf")
        buf.write(u"\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2")
        buf.write(u"\2\u03d1\u03d2\5b\62\2\u03d2\u03d3\7\u0084\2\2\u03d3")
        buf.write(u"\u03d4\5\u0094K\2\u03d4\u03d5\7\b\2\2\u03d5\u03dd\5V")
        buf.write(u",\2\u03d6\u03d7\7\7\2\2\u03d7\u03d8\5\u0094K\2\u03d8")
        buf.write(u"\u03d9\7\b\2\2\u03d9\u03da\5V,\2\u03da\u03dc\3\2\2\2")
        buf.write(u"\u03db\u03d6\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db")
        buf.write(u"\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e2\3\2\2\2\u03df")
        buf.write(u"\u03dd\3\2\2\2\u03e0\u03e1\7\u0096\2\2\u03e1\u03e3\5")
        buf.write(u"V,\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03f6")
        buf.write(u"\3\2\2\2\u03e4\u03e5\7p\2\2\u03e5\u03e6\7*\2\2\u03e6")
        buf.write(u"\u03eb\5d\63\2\u03e7\u03e8\7\7\2\2\u03e8\u03ea\5d\63")
        buf.write(u"\2\u03e9\u03e7\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9")
        buf.write(u"\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed")
        buf.write(u"\u03eb\3\2\2\2\u03ee\u03e4\3\2\2\2\u03ee\u03ef\3\2\2")
        buf.write(u"\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\7e\2\2\u03f1\u03f4")
        buf.write(u"\5V,\2\u03f2\u03f3\t\4\2\2\u03f3\u03f5\5V,\2\u03f4\u03f2")
        buf.write(u"\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f7\3\2\2\2\u03f6")
        buf.write(u"\u03ee\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7E\3\2\2\2\u03f8")
        buf.write(u"\u03f9\7\u0091\2\2\u03f9G\3\2\2\2\u03fa\u03fc\5\u0094")
        buf.write(u"K\2\u03fb\u03fd\5J&\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd")
        buf.write(u"\3\2\2\2\u03fd\u0401\3\2\2\2\u03fe\u0400\5P)\2\u03ff")
        buf.write(u"\u03fe\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2")
        buf.write(u"\2\u0401\u0402\3\2\2\2\u0402I\3\2\2\2\u0403\u0401\3\2")
        buf.write(u"\2\2\u0404\u040f\5L\'\2\u0405\u0406\7\5\2\2\u0406\u0407")
        buf.write(u"\5x=\2\u0407\u0408\7\6\2\2\u0408\u0410\3\2\2\2\u0409")
        buf.write(u"\u040a\7\5\2\2\u040a\u040b\5x=\2\u040b\u040c\7\7\2\2")
        buf.write(u"\u040c\u040d\5x=\2\u040d\u040e\7\6\2\2\u040e\u0410\3")
        buf.write(u"\2\2\2\u040f\u0405\3\2\2\2\u040f\u0409\3\2\2\2\u040f")
        buf.write(u"\u0410\3\2\2\2\u0410K\3\2\2\2\u0411\u0418\7\u009b\2\2")
        buf.write(u"\u0412\u0414\5N(\2\u0413\u0412\3\2\2\2\u0414\u0415\3")
        buf.write(u"\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416")
        buf.write(u"\u0418\3\2\2\2\u0417\u0411\3\2\2\2\u0417\u0413\3\2\2")
        buf.write(u"\2\u0418M\3\2\2\2\u0419\u041a\n\7\2\2\u041aO\3\2\2\2")
        buf.write(u"\u041b\u041c\7\63\2\2\u041c\u041e\5R*\2\u041d\u041b\3")
        buf.write(u"\2\2\2\u041d\u041e\3\2\2\2\u041e\u0440\3\2\2\2\u041f")
        buf.write(u"\u0420\7t\2\2\u0420\u0422\7b\2\2\u0421\u0423\t\b\2\2")
        buf.write(u"\u0422\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0424")
        buf.write(u"\3\2\2\2\u0424\u0426\5T+\2\u0425\u0427\7&\2\2\u0426\u0425")
        buf.write(u"\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0441\3\2\2\2\u0428")
        buf.write(u"\u042a\7i\2\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write(u"\u042a\u042b\3\2\2\2\u042b\u042c\7k\2\2\u042c\u0441\5")
        buf.write(u"T+\2\u042d\u042e\7\u008d\2\2\u042e\u0441\5T+\2\u042f")
        buf.write(u"\u0430\7.\2\2\u0430\u0431\7\5\2\2\u0431\u0432\5V,\2\u0432")
        buf.write(u"\u0433\7\6\2\2\u0433\u0441\3\2\2\2\u0434\u043b\7:\2\2")
        buf.write(u"\u0435\u043c\5x=\2\u0436\u043c\5z>\2\u0437\u0438\7\5")
        buf.write(u"\2\2\u0438\u0439\5V,\2\u0439\u043a\7\6\2\2\u043a\u043c")
        buf.write(u"\3\2\2\2\u043b\u0435\3\2\2\2\u043b\u0436\3\2\2\2\u043b")
        buf.write(u"\u0437\3\2\2\2\u043c\u0441\3\2\2\2\u043d\u043e\7/\2\2")
        buf.write(u"\u043e\u0441\5\u0096L\2\u043f\u0441\5X-\2\u0440\u041f")
        buf.write(u"\3\2\2\2\u0440\u0429\3\2\2\2\u0440\u042d\3\2\2\2\u0440")
        buf.write(u"\u042f\3\2\2\2\u0440\u0434\3\2\2\2\u0440\u043d\3\2\2")
        buf.write(u"\2\u0440\u043f\3\2\2\2\u0441Q\3\2\2\2\u0442\u0445\7\u009b")
        buf.write(u"\2\2\u0443\u0445\5N(\2\u0444\u0442\3\2\2\2\u0444\u0443")
        buf.write(u"\3\2\2\2\u0445S\3\2\2\2\u0446\u0447\7n\2\2\u0447\u0448")
        buf.write(u"\7\62\2\2\u0448\u044a\t\t\2\2\u0449\u0446\3\2\2\2\u0449")
        buf.write(u"\u044a\3\2\2\2\u044aU\3\2\2\2\u044b\u044c\b,\1\2\u044c")
        buf.write(u"\u0498\5z>\2\u044d\u0498\7\u009e\2\2\u044e\u044f\5\u008a")
        buf.write(u"F\2\u044f\u0450\7\4\2\2\u0450\u0452\3\2\2\2\u0451\u044e")
        buf.write(u"\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write(u"\u0454\5\u008eH\2\u0454\u0455\7\4\2\2\u0455\u0457\3\2")
        buf.write(u"\2\2\u0456\u0451\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0458")
        buf.write(u"\3\2\2\2\u0458\u0498\5\u0094K\2\u0459\u045a\5|?\2\u045a")
        buf.write(u"\u045b\5V,\27\u045b\u0498\3\2\2\2\u045c\u045d\5\u0088")
        buf.write(u"E\2\u045d\u046a\7\5\2\2\u045e\u0460\7@\2\2\u045f\u045e")
        buf.write(u"\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0461\3\2\2\2\u0461")
        buf.write(u"\u0466\5V,\2\u0462\u0463\7\7\2\2\u0463\u0465\5V,\2\u0464")
        buf.write(u"\u0462\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464\3\2\2")
        buf.write(u"\2\u0466\u0467\3\2\2\2\u0467\u046b\3\2\2\2\u0468\u0466")
        buf.write(u"\3\2\2\2\u0469\u046b\7\t\2\2\u046a\u045f\3\2\2\2\u046a")
        buf.write(u"\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2")
        buf.write(u"\2\u046c\u046d\7\6\2\2\u046d\u0498\3\2\2\2\u046e\u046f")
        buf.write(u"\7\5\2\2\u046f\u0470\5V,\2\u0470\u0471\7\6\2\2\u0471")
        buf.write(u"\u0498\3\2\2\2\u0472\u0473\7-\2\2\u0473\u0474\7\5\2\2")
        buf.write(u"\u0474\u0475\5V,\2\u0475\u0476\7#\2\2\u0476\u0477\5J")
        buf.write(u"&\2\u0477\u0478\7\6\2\2\u0478\u0498\3\2\2\2\u0479\u047b")
        buf.write(u"\7i\2\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write(u"\u047c\3\2\2\2\u047c\u047e\7H\2\2\u047d\u047a\3\2\2\2")
        buf.write(u"\u047d\u047e\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480")
        buf.write(u"\7\5\2\2\u0480\u0481\5> \2\u0481\u0482\7\6\2\2\u0482")
        buf.write(u"\u0498\3\2\2\2\u0483\u0485\7,\2\2\u0484\u0486\5V,\2\u0485")
        buf.write(u"\u0484\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u048c\3\2\2")
        buf.write(u"\2\u0487\u0488\7\u0095\2\2\u0488\u0489\5V,\2\u0489\u048a")
        buf.write(u"\7\u0088\2\2\u048a\u048b\5V,\2\u048b\u048d\3\2\2\2\u048c")
        buf.write(u"\u0487\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048c\3\2\2")
        buf.write(u"\2\u048e\u048f\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u0491")
        buf.write(u"\7C\2\2\u0491\u0493\5V,\2\u0492\u0490\3\2\2\2\u0492\u0493")
        buf.write(u"\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0495\7D\2\2\u0495")
        buf.write(u"\u0498\3\2\2\2\u0496\u0498\5Z.\2\u0497\u044b\3\2\2\2")
        buf.write(u"\u0497\u044d\3\2\2\2\u0497\u0456\3\2\2\2\u0497\u0459")
        buf.write(u"\3\2\2\2\u0497\u045c\3\2\2\2\u0497\u046e\3\2\2\2\u0497")
        buf.write(u"\u0472\3\2\2\2\u0497\u047d\3\2\2\2\u0497\u0483\3\2\2")
        buf.write(u"\2\u0497\u0496\3\2\2\2\u0498\u04fd\3\2\2\2\u0499\u049a")
        buf.write(u"\f\26\2\2\u049a\u049b\7\r\2\2\u049b\u04fc\5V,\27\u049c")
        buf.write(u"\u049d\f\25\2\2\u049d\u049e\t\n\2\2\u049e\u04fc\5V,\26")
        buf.write(u"\u049f\u04a0\f\24\2\2\u04a0\u04a1\t\13\2\2\u04a1\u04fc")
        buf.write(u"\5V,\25\u04a2\u04a3\f\23\2\2\u04a3\u04a4\t\f\2\2\u04a4")
        buf.write(u"\u04fc\5V,\24\u04a5\u04a6\f\22\2\2\u04a6\u04a7\t\r\2")
        buf.write(u"\2\u04a7\u04fc\5V,\23\u04a8\u04b5\f\21\2\2\u04a9\u04b6")
        buf.write(u"\7\b\2\2\u04aa\u04b6\7\30\2\2\u04ab\u04b6\7\31\2\2\u04ac")
        buf.write(u"\u04b6\7\32\2\2\u04ad\u04b6\7_\2\2\u04ae\u04af\7_\2\2")
        buf.write(u"\u04af\u04b6\7i\2\2\u04b0\u04b6\7V\2\2\u04b1\u04b6\7")
        buf.write(u"d\2\2\u04b2\u04b6\7P\2\2\u04b3\u04b6\7f\2\2\u04b4\u04b6")
        buf.write(u"\7y\2\2\u04b5\u04a9\3\2\2\2\u04b5\u04aa\3\2\2\2\u04b5")
        buf.write(u"\u04ab\3\2\2\2\u04b5\u04ac\3\2\2\2\u04b5\u04ad\3\2\2")
        buf.write(u"\2\u04b5\u04ae\3\2\2\2\u04b5\u04b0\3\2\2\2\u04b5\u04b1")
        buf.write(u"\3\2\2\2\u04b5\u04b2\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b5")
        buf.write(u"\u04b4\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04fc\5V,\22")
        buf.write(u"\u04b8\u04b9\f\20\2\2\u04b9\u04ba\7\"\2\2\u04ba\u04fc")
        buf.write(u"\5V,\21\u04bb\u04bc\f\17\2\2\u04bc\u04bd\7o\2\2\u04bd")
        buf.write(u"\u04fc\5V,\20\u04be\u04bf\f\b\2\2\u04bf\u04c1\7_\2\2")
        buf.write(u"\u04c0\u04c2\7i\2\2\u04c1\u04c0\3\2\2\2\u04c1\u04c2\3")
        buf.write(u"\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04fc\5V,\t\u04c4\u04c6")
        buf.write(u"\f\7\2\2\u04c5\u04c7\7i\2\2\u04c6\u04c5\3\2\2\2\u04c6")
        buf.write(u"\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\7)\2\2")
        buf.write(u"\u04c9\u04ca\5V,\2\u04ca\u04cb\7\"\2\2\u04cb\u04cc\5")
        buf.write(u"V,\b\u04cc\u04fc\3\2\2\2\u04cd\u04ce\f\13\2\2\u04ce\u04cf")
        buf.write(u"\7/\2\2\u04cf\u04fc\5\u0096L\2\u04d0\u04d2\f\n\2\2\u04d1")
        buf.write(u"\u04d3\7i\2\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2")
        buf.write(u"\u04d3\u04d4\3\2\2\2\u04d4\u04d5\t\16\2\2\u04d5\u04d8")
        buf.write(u"\5V,\2\u04d6\u04d7\7E\2\2\u04d7\u04d9\5V,\2\u04d8\u04d6")
        buf.write(u"\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04fc\3\2\2\2\u04da")
        buf.write(u"\u04df\f\t\2\2\u04db\u04e0\7`\2\2\u04dc\u04e0\7j\2\2")
        buf.write(u"\u04dd\u04de\7i\2\2\u04de\u04e0\7k\2\2\u04df\u04db\3")
        buf.write(u"\2\2\2\u04df\u04dc\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0")
        buf.write(u"\u04fc\3\2\2\2\u04e1\u04e3\f\6\2\2\u04e2\u04e4\7i\2\2")
        buf.write(u"\u04e3\u04e2\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e5")
        buf.write(u"\3\2\2\2\u04e5\u04f9\7V\2\2\u04e6\u04f0\7\5\2\2\u04e7")
        buf.write(u"\u04f1\5> \2\u04e8\u04ed\5V,\2\u04e9\u04ea\7\7\2\2\u04ea")
        buf.write(u"\u04ec\5V,\2\u04eb\u04e9\3\2\2\2\u04ec\u04ef\3\2\2\2")
        buf.write(u"\u04ed\u04eb\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f1")
        buf.write(u"\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04e7\3\2\2\2\u04f0")
        buf.write(u"\u04e8\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f2\3\2\2")
        buf.write(u"\2\u04f2\u04fa\7\6\2\2\u04f3\u04f4\5\u008aF\2\u04f4\u04f5")
        buf.write(u"\7\4\2\2\u04f5\u04f7\3\2\2\2\u04f6\u04f3\3\2\2\2\u04f6")
        buf.write(u"\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fa\5\u008e")
        buf.write(u"H\2\u04f9\u04e6\3\2\2\2\u04f9\u04f6\3\2\2\2\u04fa\u04fc")
        buf.write(u"\3\2\2\2\u04fb\u0499\3\2\2\2\u04fb\u049c\3\2\2\2\u04fb")
        buf.write(u"\u049f\3\2\2\2\u04fb\u04a2\3\2\2\2\u04fb\u04a5\3\2\2")
        buf.write(u"\2\u04fb\u04a8\3\2\2\2\u04fb\u04b8\3\2\2\2\u04fb\u04bb")
        buf.write(u"\3\2\2\2\u04fb\u04be\3\2\2\2\u04fb\u04c4\3\2\2\2\u04fb")
        buf.write(u"\u04cd\3\2\2\2\u04fb\u04d0\3\2\2\2\u04fb\u04da\3\2\2")
        buf.write(u"\2\u04fb\u04e1\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04fb")
        buf.write(u"\3\2\2\2\u04fd\u04fe\3\2\2\2\u04feW\3\2\2\2\u04ff\u04fd")
        buf.write(u"\3\2\2\2\u0500\u0501\7x\2\2\u0501\u050d\5\u0098M\2\u0502")
        buf.write(u"\u0503\7\5\2\2\u0503\u0508\5\u0094K\2\u0504\u0505\7\7")
        buf.write(u"\2\2\u0505\u0507\5\u0094K\2\u0506\u0504\3\2\2\2\u0507")
        buf.write(u"\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2")
        buf.write(u"\2\u0509\u050b\3\2\2\2\u050a\u0508\3\2\2\2\u050b\u050c")
        buf.write(u"\7\6\2\2\u050c\u050e\3\2\2\2\u050d\u0502\3\2\2\2\u050d")
        buf.write(u"\u050e\3\2\2\2\u050e\u0521\3\2\2\2\u050f\u0510\7n\2\2")
        buf.write(u"\u0510\u0519\t\17\2\2\u0511\u0512\7\u0084\2\2\u0512\u051a")
        buf.write(u"\7k\2\2\u0513\u0514\7\u0084\2\2\u0514\u051a\7:\2\2\u0515")
        buf.write(u"\u051a\7+\2\2\u0516\u051a\7~\2\2\u0517\u0518\7h\2\2\u0518")
        buf.write(u"\u051a\7\34\2\2\u0519\u0511\3\2\2\2\u0519\u0513\3\2\2")
        buf.write(u"\2\u0519\u0515\3\2\2\2\u0519\u0516\3\2\2\2\u0519\u0517")
        buf.write(u"\3\2\2\2\u051a\u051e\3\2\2\2\u051b\u051c\7f\2\2\u051c")
        buf.write(u"\u051e\5\u0086D\2\u051d\u050f\3\2\2\2\u051d\u051b\3\2")
        buf.write(u"\2\2\u051e\u0520\3\2\2\2\u051f\u051d\3\2\2\2\u0520\u0523")
        buf.write(u"\3\2\2\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522")
        buf.write(u"\u052e\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u0526\7i\2\2")
        buf.write(u"\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527")
        buf.write(u"\3\2\2\2\u0527\u052c\7;\2\2\u0528\u0529\7Y\2\2\u0529")
        buf.write(u"\u052d\7<\2\2\u052a\u052b\7Y\2\2\u052b\u052d\7U\2\2\u052c")
        buf.write(u"\u0528\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2")
        buf.write(u"\2\u052d\u052f\3\2\2\2\u052e\u0525\3\2\2\2\u052e\u052f")
        buf.write(u"\3\2\2\2\u052fY\3\2\2\2\u0530\u0531\7v\2\2\u0531\u0536")
        buf.write(u"\7\5\2\2\u0532\u0537\7T\2\2\u0533\u0534\t\20\2\2\u0534")
        buf.write(u"\u0535\7\7\2\2\u0535\u0537\5~@\2\u0536\u0532\3\2\2\2")
        buf.write(u"\u0536\u0533\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539")
        buf.write(u"\7\6\2\2\u0539[\3\2\2\2\u053a\u053d\5\u0094K\2\u053b")
        buf.write(u"\u053d\5V,\2\u053c\u053a\3\2\2\2\u053c\u053b\3\2\2\2")
        buf.write(u"\u053d\u0540\3\2\2\2\u053e\u053f\7/\2\2\u053f\u0541\5")
        buf.write(u"\u0096L\2\u0540\u053e\3\2\2\2\u0540\u0541\3\2\2\2\u0541")
        buf.write(u"\u0543\3\2\2\2\u0542\u0544\t\b\2\2\u0543\u0542\3\2\2")
        buf.write(u"\2\u0543\u0544\3\2\2\2\u0544]\3\2\2\2\u0545\u0546\7\63")
        buf.write(u"\2\2\u0546\u0548\5R*\2\u0547\u0545\3\2\2\2\u0547\u0548")
        buf.write(u"\3\2\2\2\u0548\u056d\3\2\2\2\u0549\u054a\7t\2\2\u054a")
        buf.write(u"\u054d\7b\2\2\u054b\u054d\7\u008d\2\2\u054c\u0549\3\2")
        buf.write(u"\2\2\u054c\u054b\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f")
        buf.write(u"\7\5\2\2\u054f\u0554\5\\/\2\u0550\u0551\7\7\2\2\u0551")
        buf.write(u"\u0553\5\\/\2\u0552\u0550\3\2\2\2\u0553\u0556\3\2\2\2")
        buf.write(u"\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0557")
        buf.write(u"\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u0558\7\6\2\2\u0558")
        buf.write(u"\u0559\5T+\2\u0559\u056e\3\2\2\2\u055a\u055b\7.\2\2\u055b")
        buf.write(u"\u055c\7\5\2\2\u055c\u055d\5V,\2\u055d\u055e\7\6\2\2")
        buf.write(u"\u055e\u056e\3\2\2\2\u055f\u0560\7M\2\2\u0560\u0561\7")
        buf.write(u"b\2\2\u0561\u0562\7\5\2\2\u0562\u0567\5\u0094K\2\u0563")
        buf.write(u"\u0564\7\7\2\2\u0564\u0566\5\u0094K\2\u0565\u0563\3\2")
        buf.write(u"\2\2\u0566\u0569\3\2\2\2\u0567\u0565\3\2\2\2\u0567\u0568")
        buf.write(u"\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u0567\3\2\2\2\u056a")
        buf.write(u"\u056b\7\6\2\2\u056b\u056c\5X-\2\u056c\u056e\3\2\2\2")
        buf.write(u"\u056d\u054c\3\2\2\2\u056d\u055a\3\2\2\2\u056d\u055f")
        buf.write(u"\3\2\2\2\u056e_\3\2\2\2\u056f\u0571\7\u0097\2\2\u0570")
        buf.write(u"\u0572\7w\2\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2\2\2")
        buf.write(u"\u0572\u0573\3\2\2\2\u0573\u0578\5h\65\2\u0574\u0575")
        buf.write(u"\7\7\2\2\u0575\u0577\5h\65\2\u0576\u0574\3\2\2\2\u0577")
        buf.write(u"\u057a\3\2\2\2\u0578\u0576\3\2\2\2\u0578\u0579\3\2\2")
        buf.write(u"\2\u0579a\3\2\2\2\u057a\u0578\3\2\2\2\u057b\u057c\5\u008a")
        buf.write(u"F\2\u057c\u057d\7\4\2\2\u057d\u057f\3\2\2\2\u057e\u057b")
        buf.write(u"\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write(u"\u0586\5\u008eH\2\u0581\u0582\7X\2\2\u0582\u0583\7*\2")
        buf.write(u"\2\u0583\u0587\5\u009aN\2\u0584\u0585\7i\2\2\u0585\u0587")
        buf.write(u"\7X\2\2\u0586\u0581\3\2\2\2\u0586\u0584\3\2\2\2\u0586")
        buf.write(u"\u0587\3\2\2\2\u0587c\3\2\2\2\u0588\u058b\5V,\2\u0589")
        buf.write(u"\u058a\7/\2\2\u058a\u058c\5\u0096L\2\u058b\u0589\3\2")
        buf.write(u"\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2\u058d\u058f")
        buf.write(u"\t\b\2\2\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f")
        buf.write(u"e\3\2\2\2\u0590\u0594\5x=\2\u0591\u0594\5\u0086D\2\u0592")
        buf.write(u"\u0594\7\u009a\2\2\u0593\u0590\3\2\2\2\u0593\u0591\3")
        buf.write(u"\2\2\2\u0593\u0592\3\2\2\2\u0594g\3\2\2\2\u0595\u05a1")
        buf.write(u"\5\u008eH\2\u0596\u0597\7\5\2\2\u0597\u059c\5\u0094K")
        buf.write(u"\2\u0598\u0599\7\7\2\2\u0599\u059b\5\u0094K\2\u059a\u0598")
        buf.write(u"\3\2\2\2\u059b\u059e\3\2\2\2\u059c\u059a\3\2\2\2\u059c")
        buf.write(u"\u059d\3\2\2\2\u059d\u059f\3\2\2\2\u059e\u059c\3\2\2")
        buf.write(u"\2\u059f\u05a0\7\6\2\2\u05a0\u05a2\3\2\2\2\u05a1\u0596")
        buf.write(u"\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3")
        buf.write(u"\u05a4\7#\2\2\u05a4\u05a5\7\5\2\2\u05a5\u05a6\5> \2\u05a6")
        buf.write(u"\u05a7\7\6\2\2\u05a7i\3\2\2\2\u05a8\u05b5\7\t\2\2\u05a9")
        buf.write(u"\u05aa\5\u008eH\2\u05aa\u05ab\7\4\2\2\u05ab\u05ac\7\t")
        buf.write(u"\2\2\u05ac\u05b5\3\2\2\2\u05ad\u05b2\5V,\2\u05ae\u05b0")
        buf.write(u"\7#\2\2\u05af\u05ae\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0")
        buf.write(u"\u05b1\3\2\2\2\u05b1\u05b3\5\u0082B\2\u05b2\u05af\3\2")
        buf.write(u"\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b5\3\2\2\2\u05b4\u05a8")
        buf.write(u"\3\2\2\2\u05b4\u05a9\3\2\2\2\u05b4\u05ad\3\2\2\2\u05b5")
        buf.write(u"k\3\2\2\2\u05b6\u05b7\5\u008aF\2\u05b7\u05b8\7\4\2\2")
        buf.write(u"\u05b8\u05ba\3\2\2\2\u05b9\u05b6\3\2\2\2\u05b9\u05ba")
        buf.write(u"\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05c0\5\u008eH\2\u05bc")
        buf.write(u"\u05be\7#\2\2\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2")
        buf.write(u"\u05be\u05bf\3\2\2\2\u05bf\u05c1\5\u00a6T\2\u05c0\u05bd")
        buf.write(u"\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c7\3\2\2\2\u05c2")
        buf.write(u"\u05c3\7X\2\2\u05c3\u05c4\7*\2\2\u05c4\u05c8\5\u009a")
        buf.write(u"N\2\u05c5\u05c6\7i\2\2\u05c6\u05c8\7X\2\2\u05c7\u05c2")
        buf.write(u"\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8")
        buf.write(u"\u05fe\3\2\2\2\u05c9\u05ca\5\u008aF\2\u05ca\u05cb\7\4")
        buf.write(u"\2\2\u05cb\u05cd\3\2\2\2\u05cc\u05c9\3\2\2\2\u05cc\u05cd")
        buf.write(u"\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\5\u008cG\2\u05cf")
        buf.write(u"\u05d8\7\5\2\2\u05d0\u05d5\5V,\2\u05d1\u05d2\7\7\2\2")
        buf.write(u"\u05d2\u05d4\5V,\2\u05d3\u05d1\3\2\2\2\u05d4\u05d7\3")
        buf.write(u"\2\2\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6")
        buf.write(u"\u05d9\3\2\2\2\u05d7\u05d5\3\2\2\2\u05d8\u05d0\3\2\2")
        buf.write(u"\2\u05d8\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05df")
        buf.write(u"\7\6\2\2\u05db\u05dd\7#\2\2\u05dc\u05db\3\2\2\2\u05dc")
        buf.write(u"\u05dd\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e0\5\u00a6")
        buf.write(u"T\2\u05df\u05dc\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05fe")
        buf.write(u"\3\2\2\2\u05e1\u05eb\7\5\2\2\u05e2\u05e7\5l\67\2\u05e3")
        buf.write(u"\u05e4\7\7\2\2\u05e4\u05e6\5l\67\2\u05e5\u05e3\3\2\2")
        buf.write(u"\2\u05e6\u05e9\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e7\u05e8")
        buf.write(u"\3\2\2\2\u05e8\u05ec\3\2\2\2\u05e9\u05e7\3\2\2\2\u05ea")
        buf.write(u"\u05ec\5n8\2\u05eb\u05e2\3\2\2\2\u05eb\u05ea\3\2\2\2")
        buf.write(u"\u05ec\u05ed\3\2\2\2\u05ed\u05f2\7\6\2\2\u05ee\u05f0")
        buf.write(u"\7#\2\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0")
        buf.write(u"\u05f1\3\2\2\2\u05f1\u05f3\5\u00a6T\2\u05f2\u05ef\3\2")
        buf.write(u"\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05fe\3\2\2\2\u05f4\u05f5")
        buf.write(u"\7\5\2\2\u05f5\u05f6\5> \2\u05f6\u05fb\7\6\2\2\u05f7")
        buf.write(u"\u05f9\7#\2\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3\2\2\2")
        buf.write(u"\u05f9\u05fa\3\2\2\2\u05fa\u05fc\5\u00a6T\2\u05fb\u05f8")
        buf.write(u"\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fe\3\2\2\2\u05fd")
        buf.write(u"\u05b9\3\2\2\2\u05fd\u05cc\3\2\2\2\u05fd\u05e1\3\2\2")
        buf.write(u"\2\u05fd\u05f4\3\2\2\2\u05fem\3\2\2\2\u05ff\u0606\5l")
        buf.write(u"\67\2\u0600\u0601\5p9\2\u0601\u0602\5l\67\2\u0602\u0603")
        buf.write(u"\5r:\2\u0603\u0605\3\2\2\2\u0604\u0600\3\2\2\2\u0605")
        buf.write(u"\u0608\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2")
        buf.write(u"\2\u0607o\3\2\2\2\u0608\u0606\3\2\2\2\u0609\u0617\7\7")
        buf.write(u"\2\2\u060a\u060c\7g\2\2\u060b\u060a\3\2\2\2\u060b\u060c")
        buf.write(u"\3\2\2\2\u060c\u0613\3\2\2\2\u060d\u060f\7c\2\2\u060e")
        buf.write(u"\u0610\7q\2\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2\2")
        buf.write(u"\u0610\u0614\3\2\2\2\u0611\u0614\7Z\2\2\u0612\u0614\7")
        buf.write(u"\65\2\2\u0613\u060d\3\2\2\2\u0613\u0611\3\2\2\2\u0613")
        buf.write(u"\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2")
        buf.write(u"\2\u0615\u0617\7a\2\2\u0616\u0609\3\2\2\2\u0616\u060b")
        buf.write(u"\3\2\2\2\u0617q\3\2\2\2\u0618\u0619\7n\2\2\u0619\u0627")
        buf.write(u"\5V,\2\u061a\u061b\7\u008f\2\2\u061b\u061c\7\5\2\2\u061c")
        buf.write(u"\u0621\5\u0094K\2\u061d\u061e\7\7\2\2\u061e\u0620\5\u0094")
        buf.write(u"K\2\u061f\u061d\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f")
        buf.write(u"\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623")
        buf.write(u"\u0621\3\2\2\2\u0624\u0625\7\6\2\2\u0625\u0627\3\2\2")
        buf.write(u"\2\u0626\u0618\3\2\2\2\u0626\u061a\3\2\2\2\u0626\u0627")
        buf.write(u"\3\2\2\2\u0627s\3\2\2\2\u0628\u062a\7\u0083\2\2\u0629")
        buf.write(u"\u062b\t\6\2\2\u062a\u0629\3\2\2\2\u062a\u062b\3\2\2")
        buf.write(u"\2\u062b\u062c\3\2\2\2\u062c\u0631\5j\66\2\u062d\u062e")
        buf.write(u"\7\7\2\2\u062e\u0630\5j\66\2\u062f\u062d\3\2\2\2\u0630")
        buf.write(u"\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0631\u0632\3\2\2")
        buf.write(u"\2\u0632\u0640\3\2\2\2\u0633\u0631\3\2\2\2\u0634\u063e")
        buf.write(u"\7N\2\2\u0635\u063a\5l\67\2\u0636\u0637\7\7\2\2\u0637")
        buf.write(u"\u0639\5l\67\2\u0638\u0636\3\2\2\2\u0639\u063c\3\2\2")
        buf.write(u"\2\u063a\u0638\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063f")
        buf.write(u"\3\2\2\2\u063c\u063a\3\2\2\2\u063d\u063f\5n8\2\u063e")
        buf.write(u"\u0635\3\2\2\2\u063e\u063d\3\2\2\2\u063f\u0641\3\2\2")
        buf.write(u"\2\u0640\u0634\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0644")
        buf.write(u"\3\2\2\2\u0642\u0643\7\u0096\2\2\u0643\u0645\5V,\2\u0644")
        buf.write(u"\u0642\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0654\3\2\2")
        buf.write(u"\2\u0646\u0647\7Q\2\2\u0647\u0648\7*\2\2\u0648\u064d")
        buf.write(u"\5V,\2\u0649\u064a\7\7\2\2\u064a\u064c\5V,\2\u064b\u0649")
        buf.write(u"\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b\3\2\2\2\u064d")
        buf.write(u"\u064e\3\2\2\2\u064e\u0652\3\2\2\2\u064f\u064d\3\2\2")
        buf.write(u"\2\u0650\u0651\7R\2\2\u0651\u0653\5V,\2\u0652\u0650\3")
        buf.write(u"\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\3\2\2\2\u0654")
        buf.write(u"\u0646\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u0673\3\2\2")
        buf.write(u"\2\u0656\u0657\7\u0092\2\2\u0657\u0658\7\5\2\2\u0658")
        buf.write(u"\u065d\5V,\2\u0659\u065a\7\7\2\2\u065a\u065c\5V,\2\u065b")
        buf.write(u"\u0659\3\2\2\2\u065c\u065f\3\2\2\2\u065d\u065b\3\2\2")
        buf.write(u"\2\u065d\u065e\3\2\2\2\u065e\u0660\3\2\2\2\u065f\u065d")
        buf.write(u"\3\2\2\2\u0660\u066f\7\6\2\2\u0661\u0662\7\7\2\2\u0662")
        buf.write(u"\u0663\7\5\2\2\u0663\u0668\5V,\2\u0664\u0665\7\7\2\2")
        buf.write(u"\u0665\u0667\5V,\2\u0666\u0664\3\2\2\2\u0667\u066a\3")
        buf.write(u"\2\2\2\u0668\u0666\3\2\2\2\u0668\u0669\3\2\2\2\u0669")
        buf.write(u"\u066b\3\2\2\2\u066a\u0668\3\2\2\2\u066b\u066c\7\6\2")
        buf.write(u"\2\u066c\u066e\3\2\2\2\u066d\u0661\3\2\2\2\u066e\u0671")
        buf.write(u"\3\2\2\2\u066f\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write(u"\u0673\3\2\2\2\u0671\u066f\3\2\2\2\u0672\u0628\3\2\2")
        buf.write(u"\2\u0672\u0656\3\2\2\2\u0673u\3\2\2\2\u0674\u067a\7\u008c")
        buf.write(u"\2\2\u0675\u0676\7\u008c\2\2\u0676\u067a\7\37\2\2\u0677")
        buf.write(u"\u067a\7]\2\2\u0678\u067a\7F\2\2\u0679\u0674\3\2\2\2")
        buf.write(u"\u0679\u0675\3\2\2\2\u0679\u0677\3\2\2\2\u0679\u0678")
        buf.write(u"\3\2\2\2\u067aw\3\2\2\2\u067b\u067d\t\13\2\2\u067c\u067b")
        buf.write(u"\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e")
        buf.write(u"\u067f\7\u009d\2\2\u067fy\3\2\2\2\u0680\u0681\t\21\2")
        buf.write(u"\2\u0681{\3\2\2\2\u0682\u0683\t\22\2\2\u0683}\3\2\2\2")
        buf.write(u"\u0684\u0685\7\u009a\2\2\u0685\177\3\2\2\2\u0686\u0689")
        buf.write(u"\5H%\2\u0687\u0689\5V,\2\u0688\u0686\3\2\2\2\u0688\u0687")
        buf.write(u"\3\2\2\2\u0689\u0081\3\2\2\2\u068a\u068b\t\23\2\2\u068b")
        buf.write(u"\u0083\3\2\2\2\u068c\u068d\t\24\2\2\u068d\u0085\3\2\2")
        buf.write(u"\2\u068e\u068f\5\u00aaV\2\u068f\u0087\3\2\2\2\u0690\u0691")
        buf.write(u"\5\u00aaV\2\u0691\u0089\3\2\2\2\u0692\u0693\5\u00aaV")
        buf.write(u"\2\u0693\u008b\3\2\2\2\u0694\u0695\5\u00aaV\2\u0695\u008d")
        buf.write(u"\3\2\2\2\u0696\u0697\5\u00aaV\2\u0697\u008f\3\2\2\2\u0698")
        buf.write(u"\u0699\5\u00aaV\2\u0699\u0091\3\2\2\2\u069a\u069b\5\u00aa")
        buf.write(u"V\2\u069b\u0093\3\2\2\2\u069c\u069d\5\u00aaV\2\u069d")
        buf.write(u"\u0095\3\2\2\2\u069e\u069f\5\u00aaV\2\u069f\u0097\3\2")
        buf.write(u"\2\2\u06a0\u06a1\5\u00aaV\2\u06a1\u0099\3\2\2\2\u06a2")
        buf.write(u"\u06a3\5\u00aaV\2\u06a3\u009b\3\2\2\2\u06a4\u06a5\5\u00aa")
        buf.write(u"V\2\u06a5\u009d\3\2\2\2\u06a6\u06a7\5\u00aaV\2\u06a7")
        buf.write(u"\u009f\3\2\2\2\u06a8\u06a9\5\u00aaV\2\u06a9\u00a1\3\2")
        buf.write(u"\2\2\u06aa\u06ab\5\u00aaV\2\u06ab\u00a3\3\2\2\2\u06ac")
        buf.write(u"\u06ad\5\u00aaV\2\u06ad\u00a5\3\2\2\2\u06ae\u06b5\7\u009c")
        buf.write(u"\2\2\u06af\u06b5\7\u009a\2\2\u06b0\u06b1\7\5\2\2\u06b1")
        buf.write(u"\u06b2\5\u00a6T\2\u06b2\u06b3\7\6\2\2\u06b3\u06b5\3\2")
        buf.write(u"\2\2\u06b4\u06ae\3\2\2\2\u06b4\u06af\3\2\2\2\u06b4\u06b0")
        buf.write(u"\3\2\2\2\u06b5\u00a7\3\2\2\2\u06b6\u06b7\5\u00aaV\2\u06b7")
        buf.write(u"\u00a9\3\2\2\2\u06b8\u06c0\7\u009c\2\2\u06b9\u06c0\5")
        buf.write(u"\u0084C\2\u06ba\u06c0\7\u009a\2\2\u06bb\u06bc\7\5\2\2")
        buf.write(u"\u06bc\u06bd\5\u00aaV\2\u06bd\u06be\7\6\2\2\u06be\u06c0")
        buf.write(u"\3\2\2\2\u06bf\u06b8\3\2\2\2\u06bf\u06b9\3\2\2\2\u06bf")
        buf.write(u"\u06ba\3\2\2\2\u06bf\u06bb\3\2\2\2\u06c0\u00ab\3\2\2")
        buf.write(u"\2\u00f7\u00ae\u00b0\u00ba\u00c1\u00c6\u00cc\u00d2\u00d4")
        buf.write(u"\u00f4\u00fb\u0103\u0106\u010f\u0113\u011b\u011f\u0121")
        buf.write(u"\u0126\u0128\u012b\u0130\u0134\u0139\u0142\u0145\u014b")
        buf.write(u"\u014d\u0151\u0157\u015c\u0167\u016d\u0171\u0177\u017c")
        buf.write(u"\u0185\u018c\u0192\u0196\u019a\u01a0\u01a5\u01ac\u01b7")
        buf.write(u"\u01ba\u01bc\u01c2\u01c8\u01cc\u01d3\u01d9\u01df\u01e5")
        buf.write(u"\u01ea\u01f3\u01f8\u0203\u0208\u0213\u0218\u021b\u0222")
        buf.write(u"\u0225\u022c\u0235\u0238\u023e\u0240\u0244\u024c\u0251")
        buf.write(u"\u0259\u025e\u0266\u026b\u0273\u0278\u027d\u0285\u028f")
        buf.write(u"\u0292\u0298\u029a\u029d\u02b0\u02b6\u02bf\u02c4\u02cd")
        buf.write(u"\u02d8\u02df\u02e5\u02eb\u02f4\u02fb\u02ff\u0301\u0305")
        buf.write(u"\u030c\u030e\u0312\u0315\u031b\u0325\u0328\u032e\u0330")
        buf.write(u"\u0333\u033b\u0345\u0348\u034e\u0350\u0354\u035b\u0364")
        buf.write(u"\u0368\u036a\u036e\u0377\u037c\u037e\u0387\u0392\u0399")
        buf.write(u"\u039c\u039f\u03ac\u03ba\u03bf\u03c2\u03cf\u03dd\u03e2")
        buf.write(u"\u03eb\u03ee\u03f4\u03f6\u03fc\u0401\u040f\u0415\u0417")
        buf.write(u"\u041d\u0422\u0426\u0429\u043b\u0440\u0444\u0449\u0451")
        buf.write(u"\u0456\u045f\u0466\u046a\u047a\u047d\u0485\u048e\u0492")
        buf.write(u"\u0497\u04b5\u04c1\u04c6\u04d2\u04d8\u04df\u04e3\u04ed")
        buf.write(u"\u04f0\u04f6\u04f9\u04fb\u04fd\u0508\u050d\u0519\u051d")
        buf.write(u"\u0521\u0525\u052c\u052e\u0536\u053c\u0540\u0543\u0547")
        buf.write(u"\u054c\u0554\u0567\u056d\u0571\u0578\u057e\u0586\u058b")
        buf.write(u"\u058e\u0593\u059c\u05a1\u05af\u05b2\u05b4\u05b9\u05bd")
        buf.write(u"\u05c0\u05c7\u05cc\u05d5\u05d8\u05dc\u05df\u05e7\u05eb")
        buf.write(u"\u05ef\u05f2\u05f8\u05fb\u05fd\u0606\u060b\u060f\u0613")
        buf.write(u"\u0616\u0621\u0626\u062a\u0631\u063a\u063e\u0640\u0644")
        buf.write(u"\u064d\u0652\u0654\u065d\u0668\u066f\u0672\u0679\u067c")
        buf.write(u"\u0688\u06b4\u06bf")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'.'", u"'('", u"')'", u"','", 
                     u"'='", u"'*'", u"'+'", u"'-'", u"'~'", u"'||'", u"'/'", 
                     u"'%'", u"'<<'", u"'>>'", u"'&'", u"'|'", u"'<'", u"'<='", 
                     u"'>'", u"'>='", u"'=='", u"'!='", u"'<>'" ]

    symbolicNames = [ u"<INVALID>", u"SCOL", u"DOT", u"OPEN_PAR", u"CLOSE_PAR", 
                      u"COMMA", u"ASSIGN", u"STAR", u"PLUS", u"MINUS", u"TILDE", 
                      u"PIPE2", u"DIV", u"MOD", u"LT2", u"GT2", u"AMP", 
                      u"PIPE", u"LT", u"LT_EQ", u"GT", u"GT_EQ", u"EQ", 
                      u"NOT_EQ1", u"NOT_EQ2", u"K_ABORT", u"K_ACTION", u"K_ADD", 
                      u"K_AFTER", u"K_ALL", u"K_ALTER", u"K_ANALYZE", u"K_AND", 
                      u"K_AS", u"K_ASC", u"K_ATTACH", u"K_AUTOINCREMENT", 
                      u"K_BEFORE", u"K_BEGIN", u"K_BETWEEN", u"K_BY", u"K_CASCADE", 
                      u"K_CASE", u"K_CAST", u"K_CHECK", u"K_COLLATE", u"K_COLUMN", 
                      u"K_COMMIT", u"K_CONFLICT", u"K_CONSTRAINT", u"K_CREATE", 
                      u"K_CROSS", u"K_CURRENT_DATE", u"K_CURRENT_TIME", 
                      u"K_CURRENT_TIMESTAMP", u"K_DATABASE", u"K_DEFAULT", 
                      u"K_DEFERRABLE", u"K_DEFERRED", u"K_DELETE", u"K_DESC", 
                      u"K_DETACH", u"K_DISTINCT", u"K_DROP", u"K_EACH", 
                      u"K_ELSE", u"K_END", u"K_ESCAPE", u"K_EXCEPT", u"K_EXCLUSIVE", 
                      u"K_EXISTS", u"K_EXPLAIN", u"K_FAIL", u"K_FALSE", 
                      u"K_FOR", u"K_FOREIGN", u"K_FROM", u"K_FULL", u"K_GLOB", 
                      u"K_GROUP", u"K_HAVING", u"K_IF", u"K_IGNORE", u"K_IMMEDIATE", 
                      u"K_IN", u"K_INDEX", u"K_INDEXED", u"K_INITIALLY", 
                      u"K_INNER", u"K_INSERT", u"K_INSTEAD", u"K_INTERSECT", 
                      u"K_INTO", u"K_IS", u"K_ISNULL", u"K_JOIN", u"K_KEY", 
                      u"K_LEFT", u"K_LIKE", u"K_LIMIT", u"K_MATCH", u"K_NATURAL", 
                      u"K_NO", u"K_NOT", u"K_NOTNULL", u"K_NULL", u"K_OF", 
                      u"K_OFFSET", u"K_ON", u"K_OR", u"K_ORDER", u"K_OUTER", 
                      u"K_PLAN", u"K_PRAGMA", u"K_PRIMARY", u"K_QUERY", 
                      u"K_RAISE", u"K_RECURSIVE", u"K_REFERENCES", u"K_REGEXP", 
                      u"K_REINDEX", u"K_RELEASE", u"K_RENAME", u"K_REPLACE", 
                      u"K_RESTRICT", u"K_RIGHT", u"K_ROLLBACK", u"K_ROW", 
                      u"K_SAVEPOINT", u"K_SELECT", u"K_SET", u"K_TABLE", 
                      u"K_TEMP", u"K_TEMPORARY", u"K_THEN", u"K_TO", u"K_TRANSACTION", 
                      u"K_TRIGGER", u"K_UNION", u"K_UNIQUE", u"K_UPDATE", 
                      u"K_USING", u"K_TRUE", u"K_VACUUM", u"K_VALUES", u"K_VIEW", 
                      u"K_VIRTUAL", u"K_WHEN", u"K_WHERE", u"K_WITH", u"K_WITHOUT", 
                      u"C_ROWID", u"STRING_LITERAL", u"ENCLOSED_IDENTIFIER", 
                      u"IDENTIFIER", u"NUMERIC_LITERAL", u"BIND_PARAMETER", 
                      u"BLOB_LITERAL", u"SINGLE_LINE_COMMENT", u"MULTILINE_COMMENT", 
                      u"SPACES", u"UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_compound_select_stmt = 9
    RULE_create_index_stmt = 10
    RULE_create_table_stmt = 11
    RULE_create_trigger_stmt = 12
    RULE_create_view_stmt = 13
    RULE_create_virtual_table_stmt = 14
    RULE_delete_stmt = 15
    RULE_delete_stmt_limited = 16
    RULE_detach_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_drop_trigger_stmt = 20
    RULE_drop_view_stmt = 21
    RULE_factored_select_stmt = 22
    RULE_insert_stmt = 23
    RULE_pragma_stmt = 24
    RULE_reindex_stmt = 25
    RULE_release_stmt = 26
    RULE_rollback_stmt = 27
    RULE_savepoint_stmt = 28
    RULE_simple_select_stmt = 29
    RULE_select_stmt = 30
    RULE_select_or_values = 31
    RULE_update_stmt = 32
    RULE_update_stmt_limited = 33
    RULE_vacuum_stmt = 34
    RULE_column_def = 35
    RULE_type_name = 36
    RULE_type_name_text = 37
    RULE_type_or_constraint_name_word = 38
    RULE_column_constraint = 39
    RULE_constraint_name = 40
    RULE_conflict_clause = 41
    RULE_expr = 42
    RULE_foreign_key_clause = 43
    RULE_raise_function = 44
    RULE_indexed_column = 45
    RULE_table_constraint = 46
    RULE_with_clause = 47
    RULE_qualified_table_name = 48
    RULE_ordering_term = 49
    RULE_pragma_value = 50
    RULE_common_table_expression = 51
    RULE_result_column = 52
    RULE_table_or_subquery = 53
    RULE_join_clause = 54
    RULE_join_operator = 55
    RULE_join_constraint = 56
    RULE_select_core = 57
    RULE_compound_operator = 58
    RULE_signed_number = 59
    RULE_literal_value = 60
    RULE_unary_operator = 61
    RULE_error_message = 62
    RULE_module_argument = 63
    RULE_column_alias = 64
    RULE_keyword = 65
    RULE_name = 66
    RULE_function_name = 67
    RULE_database_name = 68
    RULE_table_function_name = 69
    RULE_table_name = 70
    RULE_table_or_index_name = 71
    RULE_new_table_name = 72
    RULE_column_name = 73
    RULE_collation_name = 74
    RULE_foreign_table = 75
    RULE_index_name = 76
    RULE_trigger_name = 77
    RULE_view_name = 78
    RULE_module_name = 79
    RULE_pragma_name = 80
    RULE_savepoint_name = 81
    RULE_table_alias = 82
    RULE_transaction_name = 83
    RULE_any_name = 84

    ruleNames =  [ u"parse", u"error", u"sql_stmt_list", u"sql_stmt", u"alter_table_stmt", 
                   u"analyze_stmt", u"attach_stmt", u"begin_stmt", u"commit_stmt", 
                   u"compound_select_stmt", u"create_index_stmt", u"create_table_stmt", 
                   u"create_trigger_stmt", u"create_view_stmt", u"create_virtual_table_stmt", 
                   u"delete_stmt", u"delete_stmt_limited", u"detach_stmt", 
                   u"drop_index_stmt", u"drop_table_stmt", u"drop_trigger_stmt", 
                   u"drop_view_stmt", u"factored_select_stmt", u"insert_stmt", 
                   u"pragma_stmt", u"reindex_stmt", u"release_stmt", u"rollback_stmt", 
                   u"savepoint_stmt", u"simple_select_stmt", u"select_stmt", 
                   u"select_or_values", u"update_stmt", u"update_stmt_limited", 
                   u"vacuum_stmt", u"column_def", u"type_name", u"type_name_text", 
                   u"type_or_constraint_name_word", u"column_constraint", 
                   u"constraint_name", u"conflict_clause", u"expr", u"foreign_key_clause", 
                   u"raise_function", u"indexed_column", u"table_constraint", 
                   u"with_clause", u"qualified_table_name", u"ordering_term", 
                   u"pragma_value", u"common_table_expression", u"result_column", 
                   u"table_or_subquery", u"join_clause", u"join_operator", 
                   u"join_constraint", u"select_core", u"compound_operator", 
                   u"signed_number", u"literal_value", u"unary_operator", 
                   u"error_message", u"module_argument", u"column_alias", 
                   u"keyword", u"name", u"function_name", u"database_name", 
                   u"table_function_name", u"table_name", u"table_or_index_name", 
                   u"new_table_name", u"column_name", u"collation_name", 
                   u"foreign_table", u"index_name", u"trigger_name", u"view_name", 
                   u"module_name", u"pragma_name", u"savepoint_name", u"table_alias", 
                   u"transaction_name", u"any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FALSE=73
    K_FOR=74
    K_FOREIGN=75
    K_FROM=76
    K_FULL=77
    K_GLOB=78
    K_GROUP=79
    K_HAVING=80
    K_IF=81
    K_IGNORE=82
    K_IMMEDIATE=83
    K_IN=84
    K_INDEX=85
    K_INDEXED=86
    K_INITIALLY=87
    K_INNER=88
    K_INSERT=89
    K_INSTEAD=90
    K_INTERSECT=91
    K_INTO=92
    K_IS=93
    K_ISNULL=94
    K_JOIN=95
    K_KEY=96
    K_LEFT=97
    K_LIKE=98
    K_LIMIT=99
    K_MATCH=100
    K_NATURAL=101
    K_NO=102
    K_NOT=103
    K_NOTNULL=104
    K_NULL=105
    K_OF=106
    K_OFFSET=107
    K_ON=108
    K_OR=109
    K_ORDER=110
    K_OUTER=111
    K_PLAN=112
    K_PRAGMA=113
    K_PRIMARY=114
    K_QUERY=115
    K_RAISE=116
    K_RECURSIVE=117
    K_REFERENCES=118
    K_REGEXP=119
    K_REINDEX=120
    K_RELEASE=121
    K_RENAME=122
    K_REPLACE=123
    K_RESTRICT=124
    K_RIGHT=125
    K_ROLLBACK=126
    K_ROW=127
    K_SAVEPOINT=128
    K_SELECT=129
    K_SET=130
    K_TABLE=131
    K_TEMP=132
    K_TEMPORARY=133
    K_THEN=134
    K_TO=135
    K_TRANSACTION=136
    K_TRIGGER=137
    K_UNION=138
    K_UNIQUE=139
    K_UPDATE=140
    K_USING=141
    K_TRUE=142
    K_VACUUM=143
    K_VALUES=144
    K_VIEW=145
    K_VIRTUAL=146
    K_WHEN=147
    K_WHERE=148
    K_WITH=149
    K_WITHOUT=150
    C_ROWID=151
    STRING_LITERAL=152
    ENCLOSED_IDENTIFIER=153
    IDENTIFIER=154
    NUMERIC_LITERAL=155
    BIND_PARAMETER=156
    BLOB_LITERAL=157
    SINGLE_LINE_COMMENT=158
    MULTILINE_COMMENT=159
    SPACES=160
    UNEXPECTED_CHAR=161

    def __init__(self, input, output=sys.stdout):
        super(SQLiteParser, self).__init__(input, output=output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ParseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_ATTACH) | (1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_CREATE) | (1 << SQLiteParser.K_DELETE) | (1 << SQLiteParser.K_DETACH) | (1 << SQLiteParser.K_DROP))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.K_END - 66)) | (1 << (SQLiteParser.K_EXPLAIN - 66)) | (1 << (SQLiteParser.K_INSERT - 66)) | (1 << (SQLiteParser.K_PRAGMA - 66)) | (1 << (SQLiteParser.K_REINDEX - 66)) | (1 << (SQLiteParser.K_RELEASE - 66)) | (1 << (SQLiteParser.K_REPLACE - 66)) | (1 << (SQLiteParser.K_ROLLBACK - 66)) | (1 << (SQLiteParser.K_SAVEPOINT - 66)) | (1 << (SQLiteParser.K_SELECT - 66)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (SQLiteParser.K_UPDATE - 140)) | (1 << (SQLiteParser.K_VACUUM - 140)) | (1 << (SQLiteParser.K_VALUES - 140)) | (1 << (SQLiteParser.K_WITH - 140)) | (1 << (SQLiteParser.UNEXPECTED_CHAR - 140)))) != 0):
                self.state = 172
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH]:
                    self.state = 170
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 171
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 177
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.match(SQLiteParser.UNEXPECTED_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 181
                self.match(SQLiteParser.SCOL)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 187
            self.sql_stmt()
            self.state = 196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 189 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 188
                        self.match(SQLiteParser.SCOL)
                        self.state = 191 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 193
                    self.sql_stmt() 
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 199
                    self.match(SQLiteParser.SCOL) 
                self.state = 204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_table_stmtContext,0)


        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_trigger_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_view_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_EXPLAIN:
                self.state = 205
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_QUERY:
                    self.state = 206
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 207
                    self.match(SQLiteParser.K_PLAN)




            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 212
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 213
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 214
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 215
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 216
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 217
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 218
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 219
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 220
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 221
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 222
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 223
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 224
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 225
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 226
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 227
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 228
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 229
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 230
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 231
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 232
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 233
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 234
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 235
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 236
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 237
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 238
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 239
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 240
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 241
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Alter_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAlter_table_stmt"):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlter_table_stmt"):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(SQLiteParser.K_ALTER)
            self.state = 245
            self.match(SQLiteParser.K_TABLE)
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 246
                self.database_name()
                self.state = 247
                self.match(SQLiteParser.DOT)


            self.state = 251
            self.table_name()
            self.state = 260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_RENAME]:
                self.state = 252
                self.match(SQLiteParser.K_RENAME)
                self.state = 253
                self.match(SQLiteParser.K_TO)
                self.state = 254
                self.new_table_name()
                pass
            elif token in [SQLiteParser.K_ADD]:
                self.state = 255
                self.match(SQLiteParser.K_ADD)
                self.state = 257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 259
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Analyze_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 263
                self.database_name()

            elif la_ == 2:
                self.state = 264
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 265
                self.database_name()
                self.state = 266
                self.match(SQLiteParser.DOT)
                self.state = 267
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Attach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(SQLiteParser.K_ATTACH)
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 272
                self.match(SQLiteParser.K_DATABASE)


            self.state = 275
            self.expr(0)
            self.state = 276
            self.match(SQLiteParser.K_AS)
            self.state = 277
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Begin_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(SQLiteParser.K_BEGIN)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0):
                self.state = 280
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 283
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 284
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Commit_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.K_COMMIT or _la==SQLiteParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 290
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_UNION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ALL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 296
                self.with_clause()


            self.state = 299
            self.select_core()
            self.state = 309 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 306
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_UNION]:
                    self.state = 300
                    self.match(SQLiteParser.K_UNION)
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_ALL:
                        self.state = 301
                        self.match(SQLiteParser.K_ALL)


                    pass
                elif token in [SQLiteParser.K_INTERSECT]:
                    self.state = 304
                    self.match(SQLiteParser.K_INTERSECT)
                    pass
                elif token in [SQLiteParser.K_EXCEPT]:
                    self.state = 305
                    self.match(SQLiteParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 308
                self.select_core()
                self.state = 311 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION):
                    break

            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 313
                self.match(SQLiteParser.K_ORDER)
                self.state = 314
                self.match(SQLiteParser.K_BY)
                self.state = 315
                self.ordering_term()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 316
                    self.match(SQLiteParser.COMMA)
                    self.state = 317
                    self.ordering_term()
                    self.state = 322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 325
                self.match(SQLiteParser.K_LIMIT)
                self.state = 326
                self.expr(0)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 327
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 328
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_index_stmt"):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_index_stmt"):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(SQLiteParser.K_CREATE)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_UNIQUE:
                self.state = 334
                self.match(SQLiteParser.K_UNIQUE)


            self.state = 337
            self.match(SQLiteParser.K_INDEX)
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 338
                self.match(SQLiteParser.K_IF)
                self.state = 339
                self.match(SQLiteParser.K_NOT)
                self.state = 340
                self.match(SQLiteParser.K_EXISTS)


            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 343
                self.database_name()
                self.state = 344
                self.match(SQLiteParser.DOT)


            self.state = 348
            self.index_name()
            self.state = 349
            self.match(SQLiteParser.K_ON)
            self.state = 350
            self.table_name()
            self.state = 351
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 352
            self.indexed_column()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 353
                self.match(SQLiteParser.COMMA)
                self.state = 354
                self.indexed_column()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 360
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 361
                self.match(SQLiteParser.K_WHERE)
                self.state = 362
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def C_ROWID(self):
            return self.getToken(SQLiteParser.C_ROWID, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_table_stmt"):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_table_stmt"):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(SQLiteParser.K_CREATE)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 366
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 369
            self.match(SQLiteParser.K_TABLE)
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 370
                self.match(SQLiteParser.K_IF)
                self.state = 371
                self.match(SQLiteParser.K_NOT)
                self.state = 372
                self.match(SQLiteParser.K_EXISTS)


            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 375
                self.database_name()
                self.state = 376
                self.match(SQLiteParser.DOT)


            self.state = 380
            self.table_name()
            self.state = 404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 381
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 382
                self.column_def()
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 383
                        self.match(SQLiteParser.COMMA)
                        self.state = 384
                        self.column_def() 
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 390
                    self.match(SQLiteParser.COMMA)
                    self.state = 391
                    self.table_constraint()
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 397
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WITHOUT:
                    self.state = 398
                    self.match(SQLiteParser.K_WITHOUT)
                    self.state = 399
                    self.match(SQLiteParser.C_ROWID)


                pass
            elif token in [SQLiteParser.K_AS]:
                self.state = 402
                self.match(SQLiteParser.K_AS)
                self.state = 403
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Database_nameContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_OF(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_OF)
            else:
                return self.getToken(SQLiteParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_trigger_stmt"):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_trigger_stmt"):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(SQLiteParser.K_CREATE)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 407
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 410
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 411
                self.match(SQLiteParser.K_IF)
                self.state = 412
                self.match(SQLiteParser.K_NOT)
                self.state = 413
                self.match(SQLiteParser.K_EXISTS)


            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 416
                self.database_name()
                self.state = 417
                self.match(SQLiteParser.DOT)


            self.state = 421
            self.trigger_name()
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_BEFORE]:
                self.state = 422
                self.match(SQLiteParser.K_BEFORE)
                pass
            elif token in [SQLiteParser.K_AFTER]:
                self.state = 423
                self.match(SQLiteParser.K_AFTER)
                pass
            elif token in [SQLiteParser.K_INSTEAD]:
                self.state = 424
                self.match(SQLiteParser.K_INSTEAD)
                self.state = 425
                self.match(SQLiteParser.K_OF)
                pass
            elif token in [SQLiteParser.K_DELETE, SQLiteParser.K_INSERT, SQLiteParser.K_UPDATE]:
                pass
            else:
                pass
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_DELETE]:
                self.state = 428
                self.match(SQLiteParser.K_DELETE)
                pass
            elif token in [SQLiteParser.K_INSERT]:
                self.state = 429
                self.match(SQLiteParser.K_INSERT)
                pass
            elif token in [SQLiteParser.K_UPDATE]:
                self.state = 430
                self.match(SQLiteParser.K_UPDATE)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_OF:
                    self.state = 431
                    self.match(SQLiteParser.K_OF)
                    self.state = 432
                    self.column_name()
                    self.state = 437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 433
                        self.match(SQLiteParser.COMMA)
                        self.state = 434
                        self.column_name()
                        self.state = 439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 444
            self.match(SQLiteParser.K_ON)
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 445
                self.database_name()
                self.state = 446
                self.match(SQLiteParser.DOT)


            self.state = 450
            self.table_name()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_FOR:
                self.state = 451
                self.match(SQLiteParser.K_FOR)
                self.state = 452
                self.match(SQLiteParser.K_EACH)
                self.state = 453
                self.match(SQLiteParser.K_ROW)


            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHEN:
                self.state = 456
                self.match(SQLiteParser.K_WHEN)
                self.state = 457
                self.expr(0)


            self.state = 460
            self.match(SQLiteParser.K_BEGIN)
            self.state = 469 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 462
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 463
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 464
                    self.select_stmt()
                    pass


                self.state = 467
                self.match(SQLiteParser.SCOL)
                self.state = 471 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_DELETE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.K_INSERT - 89)) | (1 << (SQLiteParser.K_REPLACE - 89)) | (1 << (SQLiteParser.K_SELECT - 89)) | (1 << (SQLiteParser.K_UPDATE - 89)) | (1 << (SQLiteParser.K_VALUES - 89)) | (1 << (SQLiteParser.K_WITH - 89)))) != 0)):
                    break

            self.state = 473
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_view_stmt"):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_view_stmt"):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(SQLiteParser.K_CREATE)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 476
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 479
            self.match(SQLiteParser.K_VIEW)
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 480
                self.match(SQLiteParser.K_IF)
                self.state = 481
                self.match(SQLiteParser.K_NOT)
                self.state = 482
                self.match(SQLiteParser.K_EXISTS)


            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 485
                self.database_name()
                self.state = 486
                self.match(SQLiteParser.DOT)


            self.state = 490
            self.view_name()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 491
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 492
                self.column_name()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 493
                    self.match(SQLiteParser.COMMA)
                    self.state = 494
                    self.column_name()
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 500
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 504
            self.match(SQLiteParser.K_AS)
            self.state = 505
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_virtual_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_virtual_table_stmt"):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_virtual_table_stmt"):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(SQLiteParser.K_CREATE)
            self.state = 508
            self.match(SQLiteParser.K_VIRTUAL)
            self.state = 509
            self.match(SQLiteParser.K_TABLE)
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 510
                self.match(SQLiteParser.K_IF)
                self.state = 511
                self.match(SQLiteParser.K_NOT)
                self.state = 512
                self.match(SQLiteParser.K_EXISTS)


            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 515
                self.database_name()
                self.state = 516
                self.match(SQLiteParser.DOT)


            self.state = 520
            self.table_name()
            self.state = 521
            self.match(SQLiteParser.K_USING)
            self.state = 522
            self.module_name()
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 523
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 524
                self.module_argument()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 525
                    self.match(SQLiteParser.COMMA)
                    self.state = 526
                    self.module_argument()
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 532
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 536
                self.with_clause()


            self.state = 539
            self.match(SQLiteParser.K_DELETE)
            self.state = 540
            self.match(SQLiteParser.K_FROM)
            self.state = 541
            self.qualified_table_name()
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 542
                self.match(SQLiteParser.K_WHERE)
                self.state = 543
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 546
                self.with_clause()


            self.state = 549
            self.match(SQLiteParser.K_DELETE)
            self.state = 550
            self.match(SQLiteParser.K_FROM)
            self.state = 551
            self.qualified_table_name()
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 552
                self.match(SQLiteParser.K_WHERE)
                self.state = 553
                self.expr(0)


            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 556
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 557
                    self.match(SQLiteParser.K_BY)
                    self.state = 558
                    self.ordering_term()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 559
                        self.match(SQLiteParser.COMMA)
                        self.state = 560
                        self.ordering_term()
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 568
                self.match(SQLiteParser.K_LIMIT)
                self.state = 569
                self.expr(0)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 570
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 571
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Detach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SQLiteParser.K_DETACH)
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 577
                self.match(SQLiteParser.K_DATABASE)


            self.state = 580
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_index_stmt"):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_index_stmt"):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = SQLiteParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(SQLiteParser.K_DROP)
            self.state = 583
            self.match(SQLiteParser.K_INDEX)
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 584
                self.match(SQLiteParser.K_IF)
                self.state = 585
                self.match(SQLiteParser.K_EXISTS)


            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 588
                self.database_name()
                self.state = 589
                self.match(SQLiteParser.DOT)


            self.state = 593
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_table_stmt"):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_table_stmt"):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = SQLiteParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(SQLiteParser.K_DROP)
            self.state = 596
            self.match(SQLiteParser.K_TABLE)
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 597
                self.match(SQLiteParser.K_IF)
                self.state = 598
                self.match(SQLiteParser.K_EXISTS)


            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 601
                self.database_name()
                self.state = 602
                self.match(SQLiteParser.DOT)


            self.state = 606
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_trigger_stmt"):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_trigger_stmt"):
                listener.exitDrop_trigger_stmt(self)




    def drop_trigger_stmt(self):

        localctx = SQLiteParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(SQLiteParser.K_DROP)
            self.state = 609
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 610
                self.match(SQLiteParser.K_IF)
                self.state = 611
                self.match(SQLiteParser.K_EXISTS)


            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 614
                self.database_name()
                self.state = 615
                self.match(SQLiteParser.DOT)


            self.state = 619
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_view_stmt"):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_view_stmt"):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = SQLiteParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(SQLiteParser.K_DROP)
            self.state = 622
            self.match(SQLiteParser.K_VIEW)
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 623
                self.match(SQLiteParser.K_IF)
                self.state = 624
                self.match(SQLiteParser.K_EXISTS)


            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 627
                self.database_name()
                self.state = 628
                self.match(SQLiteParser.DOT)


            self.state = 632
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Factored_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 634
                self.with_clause()


            self.state = 637
            self.select_core()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 638
                self.compound_operator()
                self.state = 639
                self.select_core()
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 646
                self.match(SQLiteParser.K_ORDER)
                self.state = 647
                self.match(SQLiteParser.K_BY)
                self.state = 648
                self.ordering_term()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 649
                    self.match(SQLiteParser.COMMA)
                    self.state = 650
                    self.ordering_term()
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 658
                self.match(SQLiteParser.K_LIMIT)
                self.state = 659
                self.expr(0)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 660
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 661
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Insert_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 666
                self.with_clause()


            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 669
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 670
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 671
                self.match(SQLiteParser.K_INSERT)
                self.state = 672
                self.match(SQLiteParser.K_OR)
                self.state = 673
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 674
                self.match(SQLiteParser.K_INSERT)
                self.state = 675
                self.match(SQLiteParser.K_OR)
                self.state = 676
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 677
                self.match(SQLiteParser.K_INSERT)
                self.state = 678
                self.match(SQLiteParser.K_OR)
                self.state = 679
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 680
                self.match(SQLiteParser.K_INSERT)
                self.state = 681
                self.match(SQLiteParser.K_OR)
                self.state = 682
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 683
                self.match(SQLiteParser.K_INSERT)
                self.state = 684
                self.match(SQLiteParser.K_OR)
                self.state = 685
                self.match(SQLiteParser.K_IGNORE)
                pass


            self.state = 688
            self.match(SQLiteParser.K_INTO)
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 689
                self.database_name()
                self.state = 690
                self.match(SQLiteParser.DOT)


            self.state = 694
            self.table_name()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 695
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 696
                self.column_name()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 697
                    self.match(SQLiteParser.COMMA)
                    self.state = 698
                    self.column_name()
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 704
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 708
                self.match(SQLiteParser.K_VALUES)
                self.state = 709
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 710
                self.expr(0)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 711
                    self.match(SQLiteParser.COMMA)
                    self.state = 712
                    self.expr(0)
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 718
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 719
                    self.match(SQLiteParser.COMMA)
                    self.state = 720
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 721
                    self.expr(0)
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 722
                        self.match(SQLiteParser.COMMA)
                        self.state = 723
                        self.expr(0)
                        self.state = 728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 729
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 736
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 737
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 738
                self.match(SQLiteParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 742
                self.database_name()
                self.state = 743
                self.match(SQLiteParser.DOT)


            self.state = 747
            self.pragma_name()
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 748
                self.match(SQLiteParser.ASSIGN)
                self.state = 749
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 750
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 751
                self.pragma_value()
                self.state = 752
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Reindex_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterReindex_stmt"):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReindex_stmt"):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(SQLiteParser.K_REINDEX)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 757
                self.collation_name()

            elif la_ == 2:
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.database_name()
                    self.state = 759
                    self.match(SQLiteParser.DOT)


                self.state = 765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 763
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 764
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Release_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(SQLiteParser.K_RELEASE)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 770
                self.match(SQLiteParser.K_SAVEPOINT)


            self.state = 773
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Rollback_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 776
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.transaction_name()




            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TO:
                self.state = 782
                self.match(SQLiteParser.K_TO)
                self.state = 784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.match(SQLiteParser.K_SAVEPOINT)


                self.state = 786
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 790
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Simple_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 792
                self.with_clause()


            self.state = 795
            self.select_core()
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 796
                self.match(SQLiteParser.K_ORDER)
                self.state = 797
                self.match(SQLiteParser.K_BY)
                self.state = 798
                self.ordering_term()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 799
                    self.match(SQLiteParser.COMMA)
                    self.state = 800
                    self.ordering_term()
                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 808
                self.match(SQLiteParser.K_LIMIT)
                self.state = 809
                self.expr(0)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 810
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 811
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 816
                self.with_clause()


            self.state = 819
            self.select_or_values()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 820
                self.compound_operator()
                self.state = 821
                self.select_or_values()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 828
                self.match(SQLiteParser.K_ORDER)
                self.state = 829
                self.match(SQLiteParser.K_BY)
                self.state = 830
                self.ordering_term()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 831
                    self.match(SQLiteParser.COMMA)
                    self.state = 832
                    self.ordering_term()
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 840
                self.match(SQLiteParser.K_LIMIT)
                self.state = 841
                self.expr(0)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 842
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 843
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_or_valuesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_or_values

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = SQLiteParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.match(SQLiteParser.K_SELECT)
                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 849
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 852
                self.result_column()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 853
                    self.match(SQLiteParser.COMMA)
                    self.state = 854
                    self.result_column()
                    self.state = 859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 860
                    self.match(SQLiteParser.K_FROM)
                    self.state = 870
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 861
                        self.table_or_subquery()
                        self.state = 866
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 862
                            self.match(SQLiteParser.COMMA)
                            self.state = 863
                            self.table_or_subquery()
                            self.state = 868
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 869
                        self.join_clause()
                        pass




                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 874
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 875
                    self.expr(0)


                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 878
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 879
                    self.match(SQLiteParser.K_BY)
                    self.state = 880
                    self.expr(0)
                    self.state = 885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 881
                        self.match(SQLiteParser.COMMA)
                        self.state = 882
                        self.expr(0)
                        self.state = 887
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 888
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 889
                        self.expr(0)




                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(SQLiteParser.K_VALUES)
                self.state = 895
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 896
                self.expr(0)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 897
                    self.match(SQLiteParser.COMMA)
                    self.state = 898
                    self.expr(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 904
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 905
                    self.match(SQLiteParser.COMMA)
                    self.state = 906
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 907
                    self.expr(0)
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 908
                        self.match(SQLiteParser.COMMA)
                        self.state = 909
                        self.expr(0)
                        self.state = 914
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 915
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 924
                self.with_clause()


            self.state = 927
            self.match(SQLiteParser.K_UPDATE)
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 928
                self.match(SQLiteParser.K_OR)
                self.state = 929
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 930
                self.match(SQLiteParser.K_OR)
                self.state = 931
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 932
                self.match(SQLiteParser.K_OR)
                self.state = 933
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 934
                self.match(SQLiteParser.K_OR)
                self.state = 935
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 936
                self.match(SQLiteParser.K_OR)
                self.state = 937
                self.match(SQLiteParser.K_IGNORE)


            self.state = 940
            self.qualified_table_name()
            self.state = 941
            self.match(SQLiteParser.K_SET)
            self.state = 942
            self.column_name()
            self.state = 943
            self.match(SQLiteParser.ASSIGN)
            self.state = 944
            self.expr(0)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 945
                self.match(SQLiteParser.COMMA)
                self.state = 946
                self.column_name()
                self.state = 947
                self.match(SQLiteParser.ASSIGN)
                self.state = 948
                self.expr(0)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 955
                self.match(SQLiteParser.K_WHERE)
                self.state = 956
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def ASSIGN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 959
                self.with_clause()


            self.state = 962
            self.match(SQLiteParser.K_UPDATE)
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 963
                self.match(SQLiteParser.K_OR)
                self.state = 964
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 965
                self.match(SQLiteParser.K_OR)
                self.state = 966
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 967
                self.match(SQLiteParser.K_OR)
                self.state = 968
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 969
                self.match(SQLiteParser.K_OR)
                self.state = 970
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 971
                self.match(SQLiteParser.K_OR)
                self.state = 972
                self.match(SQLiteParser.K_IGNORE)


            self.state = 975
            self.qualified_table_name()
            self.state = 976
            self.match(SQLiteParser.K_SET)
            self.state = 977
            self.column_name()
            self.state = 978
            self.match(SQLiteParser.ASSIGN)
            self.state = 979
            self.expr(0)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 980
                self.match(SQLiteParser.COMMA)
                self.state = 981
                self.column_name()
                self.state = 982
                self.match(SQLiteParser.ASSIGN)
                self.state = 983
                self.expr(0)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 990
                self.match(SQLiteParser.K_WHERE)
                self.state = 991
                self.expr(0)


            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 994
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 995
                    self.match(SQLiteParser.K_BY)
                    self.state = 996
                    self.ordering_term()
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 997
                        self.match(SQLiteParser.COMMA)
                        self.state = 998
                        self.ordering_term()
                        self.state = 1003
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1006
                self.match(SQLiteParser.K_LIMIT)
                self.state = 1007
                self.expr(0)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 1008
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1009
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Vacuum_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(SQLiteParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.column_name()
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1017
                self.type_name()


            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_CONSTRAINT) | (1 << SQLiteParser.K_DEFAULT))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (SQLiteParser.K_NOT - 103)) | (1 << (SQLiteParser.K_NULL - 103)) | (1 << (SQLiteParser.K_PRIMARY - 103)) | (1 << (SQLiteParser.K_REFERENCES - 103)) | (1 << (SQLiteParser.K_UNIQUE - 103)))) != 0):
                self.state = 1020
                self.column_constraint()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_name_text(self):
            return self.getTypedRuleContext(SQLiteParser.Type_name_textContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.type_name_text()
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1027
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1028
                self.signed_number()
                self.state = 1029
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1031
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1032
                self.signed_number()
                self.state = 1033
                self.match(SQLiteParser.COMMA)
                self.state = 1034
                self.signed_number()
                self.state = 1035
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_name_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENCLOSED_IDENTIFIER(self):
            return self.getToken(SQLiteParser.ENCLOSED_IDENTIFIER, 0)

        def type_or_constraint_name_word(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Type_or_constraint_name_wordContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Type_or_constraint_name_wordContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name_text

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name_text"):
                listener.enterType_name_text(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name_text"):
                listener.exitType_name_text(self)




    def type_name_text(self):

        localctx = SQLiteParser.Type_name_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_type_name_text)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(SQLiteParser.ENCLOSED_IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1040
                        self.type_or_constraint_name_word()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1043 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_or_constraint_name_wordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_or_constraint_name_wordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_or_constraint_name_word

        def enterRule(self, listener):
            if hasattr(listener, "enterType_or_constraint_name_word"):
                listener.enterType_or_constraint_name_word(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_or_constraint_name_word"):
                listener.exitType_or_constraint_name_word(self)




    def type_or_constraint_name_word(self):

        localctx = SQLiteParser.Type_or_constraint_name_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_type_or_constraint_name_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            _la = self._input.LA(1)
            if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.COMMA) | (1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_CONSTRAINT) | (1 << SQLiteParser.K_DEFAULT))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLiteParser.K_FOREIGN - 75)) | (1 << (SQLiteParser.K_NOT - 75)) | (1 << (SQLiteParser.K_NULL - 75)) | (1 << (SQLiteParser.K_PRIMARY - 75)) | (1 << (SQLiteParser.K_REFERENCES - 75)))) != 0) or _la==SQLiteParser.K_UNIQUE:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Constraint_nameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_CONSTRAINT:
                self.state = 1049
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1050
                self.constraint_name()


            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY]:
                self.state = 1053
                self.match(SQLiteParser.K_PRIMARY)
                self.state = 1054
                self.match(SQLiteParser.K_KEY)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                    self.state = 1055
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1058
                self.conflict_clause()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AUTOINCREMENT:
                    self.state = 1059
                    self.match(SQLiteParser.K_AUTOINCREMENT)


                pass
            elif token in [SQLiteParser.K_NOT, SQLiteParser.K_NULL]:
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1062
                    self.match(SQLiteParser.K_NOT)


                self.state = 1065
                self.match(SQLiteParser.K_NULL)
                self.state = 1066
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_UNIQUE]:
                self.state = 1067
                self.match(SQLiteParser.K_UNIQUE)
                self.state = 1068
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1069
                self.match(SQLiteParser.K_CHECK)
                self.state = 1070
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1071
                self.expr(0)
                self.state = 1072
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_DEFAULT]:
                self.state = 1074
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 1081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1075
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 1076
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 1077
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1078
                    self.expr(0)
                    self.state = 1079
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.K_COLLATE]:
                self.state = 1083
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1084
                self.collation_name()
                pass
            elif token in [SQLiteParser.K_REFERENCES]:
                self.state = 1085
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Constraint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENCLOSED_IDENTIFIER(self):
            return self.getToken(SQLiteParser.ENCLOSED_IDENTIFIER, 0)

        def type_or_constraint_name_word(self):
            return self.getTypedRuleContext(SQLiteParser.Type_or_constraint_name_wordContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_constraint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterConstraint_name"):
                listener.enterConstraint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstraint_name"):
                listener.exitConstraint_name(self)




    def constraint_name(self):

        localctx = SQLiteParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constraint_name)
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(SQLiteParser.ENCLOSED_IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self.type_or_constraint_name_word()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Conflict_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ON:
                self.state = 1092
                self.match(SQLiteParser.K_ON)
                self.state = 1093
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1094
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.K_FAIL - 72)) | (1 << (SQLiteParser.K_IGNORE - 72)) | (1 << (SQLiteParser.K_REPLACE - 72)) | (1 << (SQLiteParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_WHEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1098
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 1099
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 1108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1103
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1100
                        self.database_name()
                        self.state = 1101
                        self.match(SQLiteParser.DOT)


                    self.state = 1105
                    self.table_name()
                    self.state = 1106
                    self.match(SQLiteParser.DOT)


                self.state = 1110
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 1111
                self.unary_operator()
                self.state = 1112
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 1114
                self.function_name()
                self.state = 1115
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FALSE, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_TRUE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT, SQLiteParser.STRING_LITERAL, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.BLOB_LITERAL]:
                    self.state = 1117
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1116
                        self.match(SQLiteParser.K_DISTINCT)


                    self.state = 1119
                    self.expr(0)
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1120
                        self.match(SQLiteParser.COMMA)
                        self.state = 1121
                        self.expr(0)
                        self.state = 1126
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 1127
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 1130
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 1132
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1133
                self.expr(0)
                self.state = 1134
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1136
                self.match(SQLiteParser.K_CAST)
                self.state = 1137
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1138
                self.expr(0)
                self.state = 1139
                self.match(SQLiteParser.K_AS)
                self.state = 1140
                self.type_name()
                self.state = 1141
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_EXISTS or _la==SQLiteParser.K_NOT:
                    self.state = 1144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_NOT:
                        self.state = 1143
                        self.match(SQLiteParser.K_NOT)


                    self.state = 1146
                    self.match(SQLiteParser.K_EXISTS)


                self.state = 1149
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1150
                self.select_stmt()
                self.state = 1151
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1153
                self.match(SQLiteParser.K_CASE)
                self.state = 1155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1154
                    self.expr(0)


                self.state = 1162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1157
                    self.match(SQLiteParser.K_WHEN)
                    self.state = 1158
                    self.expr(0)
                    self.state = 1159
                    self.match(SQLiteParser.K_THEN)
                    self.state = 1160
                    self.expr(0)
                    self.state = 1164 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.K_WHEN):
                        break

                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ELSE:
                    self.state = 1166
                    self.match(SQLiteParser.K_ELSE)
                    self.state = 1167
                    self.expr(0)


                self.state = 1170
                self.match(SQLiteParser.K_END)
                pass

            elif la_ == 10:
                self.state = 1172
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1275
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1175
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1176
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1177
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1178
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1179
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1180
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1181
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1182
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1183
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1184
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1185
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1186
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1187
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1188
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1189
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1190
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1203
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                        if la_ == 1:
                            self.state = 1191
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1192
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1193
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1194
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1195
                            self.match(SQLiteParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 1196
                            self.match(SQLiteParser.K_IS)
                            self.state = 1197
                            self.match(SQLiteParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1198
                            self.match(SQLiteParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 1199
                            self.match(SQLiteParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1200
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1201
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1202
                            self.match(SQLiteParser.K_REGEXP)
                            pass


                        self.state = 1205
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1206
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1207
                        self.match(SQLiteParser.K_AND)
                        self.state = 1208
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1209
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1210
                        self.match(SQLiteParser.K_OR)
                        self.state = 1211
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1212
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1213
                        self.match(SQLiteParser.K_IS)
                        self.state = 1215
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                        if la_ == 1:
                            self.state = 1214
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1217
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1218
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1219
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1222
                        self.match(SQLiteParser.K_BETWEEN)
                        self.state = 1223
                        self.expr(0)
                        self.state = 1224
                        self.match(SQLiteParser.K_AND)
                        self.state = 1225
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1227
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1228
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 1229
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1230
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1231
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1234
                        _la = self._input.LA(1)
                        if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (SQLiteParser.K_GLOB - 78)) | (1 << (SQLiteParser.K_LIKE - 78)) | (1 << (SQLiteParser.K_MATCH - 78)) | (1 << (SQLiteParser.K_REGEXP - 78)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1235
                        self.expr(0)
                        self.state = 1238
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                        if la_ == 1:
                            self.state = 1236
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1237
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1240
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1245
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.K_ISNULL]:
                            self.state = 1241
                            self.match(SQLiteParser.K_ISNULL)
                            pass
                        elif token in [SQLiteParser.K_NOTNULL]:
                            self.state = 1242
                            self.match(SQLiteParser.K_NOTNULL)
                            pass
                        elif token in [SQLiteParser.K_NOT]:
                            self.state = 1243
                            self.match(SQLiteParser.K_NOT)
                            self.state = 1244
                            self.match(SQLiteParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1247
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1249
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1248
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1251
                        self.match(SQLiteParser.K_IN)
                        self.state = 1271
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                        if la_ == 1:
                            self.state = 1252
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1262
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                            if la_ == 1:
                                self.state = 1253
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1254
                                self.expr(0)
                                self.state = 1259
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1255
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1256
                                    self.expr(0)
                                    self.state = 1261
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1264
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1268
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                            if la_ == 1:
                                self.state = 1265
                                self.database_name()
                                self.state = 1266
                                self.match(SQLiteParser.DOT)


                            self.state = 1270
                            self.table_name()
                            pass


                        pass

             
                self.state = 1277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_key_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_MATCH(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_MATCH)
            else:
                return self.getToken(SQLiteParser.K_MATCH, i)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_DELETE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DELETE)
            else:
                return self.getToken(SQLiteParser.K_DELETE, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def K_NULL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NULL)
            else:
                return self.getToken(SQLiteParser.K_NULL, i)

        def K_DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DEFAULT)
            else:
                return self.getToken(SQLiteParser.K_DEFAULT, i)

        def K_CASCADE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CASCADE)
            else:
                return self.getToken(SQLiteParser.K_CASCADE, i)

        def K_RESTRICT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_RESTRICT)
            else:
                return self.getToken(SQLiteParser.K_RESTRICT, i)

        def K_NO(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NO)
            else:
                return self.getToken(SQLiteParser.K_NO, i)

        def K_ACTION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ACTION)
            else:
                return self.getToken(SQLiteParser.K_ACTION, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(SQLiteParser.K_REFERENCES)
            self.state = 1279
            self.foreign_table()
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1280
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1281
                self.column_name()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1282
                    self.match(SQLiteParser.COMMA)
                    self.state = 1283
                    self.column_name()
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1289
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_MATCH or _la==SQLiteParser.K_ON:
                self.state = 1307
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_ON]:
                    self.state = 1293
                    self.match(SQLiteParser.K_ON)
                    self.state = 1294
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_DELETE or _la==SQLiteParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1303
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                    if la_ == 1:
                        self.state = 1295
                        self.match(SQLiteParser.K_SET)
                        self.state = 1296
                        self.match(SQLiteParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 1297
                        self.match(SQLiteParser.K_SET)
                        self.state = 1298
                        self.match(SQLiteParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 1299
                        self.match(SQLiteParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 1300
                        self.match(SQLiteParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 1301
                        self.match(SQLiteParser.K_NO)
                        self.state = 1302
                        self.match(SQLiteParser.K_ACTION)
                        pass


                    pass
                elif token in [SQLiteParser.K_MATCH]:
                    self.state = 1305
                    self.match(SQLiteParser.K_MATCH)
                    self.state = 1306
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1314
                    self.match(SQLiteParser.K_NOT)


                self.state = 1317
                self.match(SQLiteParser.K_DEFERRABLE)
                self.state = 1322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1318
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1319
                    self.match(SQLiteParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1320
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1321
                    self.match(SQLiteParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Raise_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(SQLiteParser.K_RAISE)
            self.state = 1327
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_IGNORE]:
                self.state = 1328
                self.match(SQLiteParser.K_IGNORE)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_FAIL, SQLiteParser.K_ROLLBACK]:
                self.state = 1329
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or _la==SQLiteParser.K_FAIL or _la==SQLiteParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1330
                self.match(SQLiteParser.COMMA)
                self.state = 1331
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1334
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Indexed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1336
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1337
                self.expr(0)
                pass


            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1340
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1341
                self.collation_name()


            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1344
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Constraint_nameContext,0)


        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_CONSTRAINT:
                self.state = 1347
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1348
                self.constraint_name()


            self.state = 1387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY, SQLiteParser.K_UNIQUE]:
                self.state = 1354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_PRIMARY]:
                    self.state = 1351
                    self.match(SQLiteParser.K_PRIMARY)
                    self.state = 1352
                    self.match(SQLiteParser.K_KEY)
                    pass
                elif token in [SQLiteParser.K_UNIQUE]:
                    self.state = 1353
                    self.match(SQLiteParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1356
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1357
                self.indexed_column()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1358
                    self.match(SQLiteParser.COMMA)
                    self.state = 1359
                    self.indexed_column()
                    self.state = 1364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1365
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1366
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1368
                self.match(SQLiteParser.K_CHECK)
                self.state = 1369
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1370
                self.expr(0)
                self.state = 1371
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_FOREIGN]:
                self.state = 1373
                self.match(SQLiteParser.K_FOREIGN)
                self.state = 1374
                self.match(SQLiteParser.K_KEY)
                self.state = 1375
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1376
                self.column_name()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1377
                    self.match(SQLiteParser.COMMA)
                    self.state = 1378
                    self.column_name()
                    self.state = 1383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1384
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1385
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(SQLiteParser.K_WITH)
            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1390
                self.match(SQLiteParser.K_RECURSIVE)


            self.state = 1393
            self.common_table_expression()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1394
                self.match(SQLiteParser.COMMA)
                self.state = 1395
                self.common_table_expression()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Qualified_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1401
                self.database_name()
                self.state = 1402
                self.match(SQLiteParser.DOT)


            self.state = 1406
            self.table_name()
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_INDEXED]:
                self.state = 1407
                self.match(SQLiteParser.K_INDEXED)
                self.state = 1408
                self.match(SQLiteParser.K_BY)
                self.state = 1409
                self.index_name()
                pass
            elif token in [SQLiteParser.K_NOT]:
                self.state = 1410
                self.match(SQLiteParser.K_NOT)
                self.state = 1411
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_LIMIT, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Ordering_termContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.expr(0)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1415
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1416
                self.collation_name()


            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1419
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pragma_value)
        try:
            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1422
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Common_table_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.table_name()
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1428
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1429
                self.column_name()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1430
                    self.match(SQLiteParser.COMMA)
                    self.state = 1431
                    self.column_name()
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1441
            self.match(SQLiteParser.K_AS)
            self.state = 1442
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1443
            self.select_stmt()
            self.state = 1444
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Result_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1447
                self.table_name()
                self.state = 1448
                self.match(SQLiteParser.DOT)
                self.state = 1449
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1451
                self.expr(0)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AS or _la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER:
                    self.state = 1453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1452
                        self.match(SQLiteParser.K_AS)


                    self.state = 1455
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_subqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1460
                    self.database_name()
                    self.state = 1461
                    self.match(SQLiteParser.DOT)


                self.state = 1465
                self.table_name()
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER:
                    self.state = 1467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1466
                        self.match(SQLiteParser.K_AS)


                    self.state = 1469
                    self.table_alias()


                self.state = 1477
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_INDEXED]:
                    self.state = 1472
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1473
                    self.match(SQLiteParser.K_BY)
                    self.state = 1474
                    self.index_name()
                    pass
                elif token in [SQLiteParser.K_NOT]:
                    self.state = 1475
                    self.match(SQLiteParser.K_NOT)
                    self.state = 1476
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ON, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self.database_name()
                    self.state = 1480
                    self.match(SQLiteParser.DOT)


                self.state = 1484
                self.table_function_name()
                self.state = 1485
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.K_ABORT) | (1 << SQLiteParser.K_ACTION) | (1 << SQLiteParser.K_ADD) | (1 << SQLiteParser.K_AFTER) | (1 << SQLiteParser.K_ALL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_AND) | (1 << SQLiteParser.K_AS) | (1 << SQLiteParser.K_ASC) | (1 << SQLiteParser.K_ATTACH) | (1 << SQLiteParser.K_AUTOINCREMENT) | (1 << SQLiteParser.K_BEFORE) | (1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_BETWEEN) | (1 << SQLiteParser.K_BY) | (1 << SQLiteParser.K_CASCADE) | (1 << SQLiteParser.K_CASE) | (1 << SQLiteParser.K_CAST) | (1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_COLUMN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_CONFLICT) | (1 << SQLiteParser.K_CONSTRAINT) | (1 << SQLiteParser.K_CREATE) | (1 << SQLiteParser.K_CROSS) | (1 << SQLiteParser.K_CURRENT_DATE) | (1 << SQLiteParser.K_CURRENT_TIME) | (1 << SQLiteParser.K_CURRENT_TIMESTAMP) | (1 << SQLiteParser.K_DATABASE) | (1 << SQLiteParser.K_DEFAULT) | (1 << SQLiteParser.K_DEFERRABLE) | (1 << SQLiteParser.K_DEFERRED) | (1 << SQLiteParser.K_DELETE) | (1 << SQLiteParser.K_DESC) | (1 << SQLiteParser.K_DETACH) | (1 << SQLiteParser.K_DISTINCT) | (1 << SQLiteParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.K_EACH - 64)) | (1 << (SQLiteParser.K_ELSE - 64)) | (1 << (SQLiteParser.K_END - 64)) | (1 << (SQLiteParser.K_ESCAPE - 64)) | (1 << (SQLiteParser.K_EXCEPT - 64)) | (1 << (SQLiteParser.K_EXCLUSIVE - 64)) | (1 << (SQLiteParser.K_EXISTS - 64)) | (1 << (SQLiteParser.K_EXPLAIN - 64)) | (1 << (SQLiteParser.K_FAIL - 64)) | (1 << (SQLiteParser.K_FALSE - 64)) | (1 << (SQLiteParser.K_FOR - 64)) | (1 << (SQLiteParser.K_FOREIGN - 64)) | (1 << (SQLiteParser.K_FROM - 64)) | (1 << (SQLiteParser.K_FULL - 64)) | (1 << (SQLiteParser.K_GLOB - 64)) | (1 << (SQLiteParser.K_GROUP - 64)) | (1 << (SQLiteParser.K_HAVING - 64)) | (1 << (SQLiteParser.K_IF - 64)) | (1 << (SQLiteParser.K_IGNORE - 64)) | (1 << (SQLiteParser.K_IMMEDIATE - 64)) | (1 << (SQLiteParser.K_IN - 64)) | (1 << (SQLiteParser.K_INDEX - 64)) | (1 << (SQLiteParser.K_INDEXED - 64)) | (1 << (SQLiteParser.K_INITIALLY - 64)) | (1 << (SQLiteParser.K_INNER - 64)) | (1 << (SQLiteParser.K_INSERT - 64)) | (1 << (SQLiteParser.K_INSTEAD - 64)) | (1 << (SQLiteParser.K_INTERSECT - 64)) | (1 << (SQLiteParser.K_INTO - 64)) | (1 << (SQLiteParser.K_IS - 64)) | (1 << (SQLiteParser.K_ISNULL - 64)) | (1 << (SQLiteParser.K_JOIN - 64)) | (1 << (SQLiteParser.K_KEY - 64)) | (1 << (SQLiteParser.K_LEFT - 64)) | (1 << (SQLiteParser.K_LIKE - 64)) | (1 << (SQLiteParser.K_LIMIT - 64)) | (1 << (SQLiteParser.K_MATCH - 64)) | (1 << (SQLiteParser.K_NATURAL - 64)) | (1 << (SQLiteParser.K_NO - 64)) | (1 << (SQLiteParser.K_NOT - 64)) | (1 << (SQLiteParser.K_NOTNULL - 64)) | (1 << (SQLiteParser.K_NULL - 64)) | (1 << (SQLiteParser.K_OF - 64)) | (1 << (SQLiteParser.K_OFFSET - 64)) | (1 << (SQLiteParser.K_ON - 64)) | (1 << (SQLiteParser.K_OR - 64)) | (1 << (SQLiteParser.K_ORDER - 64)) | (1 << (SQLiteParser.K_OUTER - 64)) | (1 << (SQLiteParser.K_PLAN - 64)) | (1 << (SQLiteParser.K_PRAGMA - 64)) | (1 << (SQLiteParser.K_PRIMARY - 64)) | (1 << (SQLiteParser.K_QUERY - 64)) | (1 << (SQLiteParser.K_RAISE - 64)) | (1 << (SQLiteParser.K_RECURSIVE - 64)) | (1 << (SQLiteParser.K_REFERENCES - 64)) | (1 << (SQLiteParser.K_REGEXP - 64)) | (1 << (SQLiteParser.K_REINDEX - 64)) | (1 << (SQLiteParser.K_RELEASE - 64)) | (1 << (SQLiteParser.K_RENAME - 64)) | (1 << (SQLiteParser.K_REPLACE - 64)) | (1 << (SQLiteParser.K_RESTRICT - 64)) | (1 << (SQLiteParser.K_RIGHT - 64)) | (1 << (SQLiteParser.K_ROLLBACK - 64)) | (1 << (SQLiteParser.K_ROW - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.K_SAVEPOINT - 128)) | (1 << (SQLiteParser.K_SELECT - 128)) | (1 << (SQLiteParser.K_SET - 128)) | (1 << (SQLiteParser.K_TABLE - 128)) | (1 << (SQLiteParser.K_TEMP - 128)) | (1 << (SQLiteParser.K_TEMPORARY - 128)) | (1 << (SQLiteParser.K_THEN - 128)) | (1 << (SQLiteParser.K_TO - 128)) | (1 << (SQLiteParser.K_TRANSACTION - 128)) | (1 << (SQLiteParser.K_TRIGGER - 128)) | (1 << (SQLiteParser.K_UNION - 128)) | (1 << (SQLiteParser.K_UNIQUE - 128)) | (1 << (SQLiteParser.K_UPDATE - 128)) | (1 << (SQLiteParser.K_USING - 128)) | (1 << (SQLiteParser.K_TRUE - 128)) | (1 << (SQLiteParser.K_VACUUM - 128)) | (1 << (SQLiteParser.K_VALUES - 128)) | (1 << (SQLiteParser.K_VIEW - 128)) | (1 << (SQLiteParser.K_VIRTUAL - 128)) | (1 << (SQLiteParser.K_WHEN - 128)) | (1 << (SQLiteParser.K_WHERE - 128)) | (1 << (SQLiteParser.K_WITH - 128)) | (1 << (SQLiteParser.K_WITHOUT - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 1486
                    self.expr(0)
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1487
                        self.match(SQLiteParser.COMMA)
                        self.state = 1488
                        self.expr(0)
                        self.state = 1493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1496
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER:
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1497
                        self.match(SQLiteParser.K_AS)


                    self.state = 1500
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1503
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1504
                    self.table_or_subquery()
                    self.state = 1509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1505
                        self.match(SQLiteParser.COMMA)
                        self.state = 1506
                        self.table_or_subquery()
                        self.state = 1511
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1512
                    self.join_clause()
                    pass


                self.state = 1515
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER:
                    self.state = 1517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1516
                        self.match(SQLiteParser.K_AS)


                    self.state = 1519
                    self.table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1522
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1523
                self.select_stmt()
                self.state = 1524
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR or _la==SQLiteParser.K_AS or _la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER:
                    self.state = 1526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1525
                        self.match(SQLiteParser.K_AS)


                    self.state = 1528
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.table_or_subquery()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.K_CROSS or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.K_INNER - 88)) | (1 << (SQLiteParser.K_JOIN - 88)) | (1 << (SQLiteParser.K_LEFT - 88)) | (1 << (SQLiteParser.K_NATURAL - 88)))) != 0):
                self.state = 1534
                self.join_operator()
                self.state = 1535
                self.table_or_subquery()
                self.state = 1536
                self.join_constraint()
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.K_CROSS, SQLiteParser.K_INNER, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NATURAL:
                    self.state = 1544
                    self.match(SQLiteParser.K_NATURAL)


                self.state = 1553
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_LEFT]:
                    self.state = 1547
                    self.match(SQLiteParser.K_LEFT)
                    self.state = 1549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_OUTER:
                        self.state = 1548
                        self.match(SQLiteParser.K_OUTER)


                    pass
                elif token in [SQLiteParser.K_INNER]:
                    self.state = 1551
                    self.match(SQLiteParser.K_INNER)
                    pass
                elif token in [SQLiteParser.K_CROSS]:
                    self.state = 1552
                    self.match(SQLiteParser.K_CROSS)
                    pass
                elif token in [SQLiteParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1555
                self.match(SQLiteParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ON]:
                self.state = 1558
                self.match(SQLiteParser.K_ON)
                self.state = 1559
                self.expr(0)
                pass
            elif token in [SQLiteParser.K_USING]:
                self.state = 1560
                self.match(SQLiteParser.K_USING)
                self.state = 1561
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1562
                self.column_name()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1563
                    self.match(SQLiteParser.COMMA)
                    self.state = 1564
                    self.column_name()
                    self.state = 1569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1570
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_coreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1574
                self.match(SQLiteParser.K_SELECT)
                self.state = 1576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1575
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1578
                self.result_column()
                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1579
                    self.match(SQLiteParser.COMMA)
                    self.state = 1580
                    self.result_column()
                    self.state = 1585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 1586
                    self.match(SQLiteParser.K_FROM)
                    self.state = 1596
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                    if la_ == 1:
                        self.state = 1587
                        self.table_or_subquery()
                        self.state = 1592
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1588
                            self.match(SQLiteParser.COMMA)
                            self.state = 1589
                            self.table_or_subquery()
                            self.state = 1594
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1595
                        self.join_clause()
                        pass




                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 1600
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 1601
                    self.expr(0)


                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 1604
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 1605
                    self.match(SQLiteParser.K_BY)
                    self.state = 1606
                    self.expr(0)
                    self.state = 1611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1607
                        self.match(SQLiteParser.COMMA)
                        self.state = 1608
                        self.expr(0)
                        self.state = 1613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 1614
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 1615
                        self.expr(0)




                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.match(SQLiteParser.K_VALUES)
                self.state = 1621
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1622
                self.expr(0)
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1623
                    self.match(SQLiteParser.COMMA)
                    self.state = 1624
                    self.expr(0)
                    self.state = 1629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1630
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1631
                    self.match(SQLiteParser.COMMA)
                    self.state = 1632
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1633
                    self.expr(0)
                    self.state = 1638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1634
                        self.match(SQLiteParser.COMMA)
                        self.state = 1635
                        self.expr(0)
                        self.state = 1640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1641
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_compound_operator)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(SQLiteParser.K_UNION)
                self.state = 1652
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1653
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1654
                self.match(SQLiteParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Signed_numberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 1657
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1660
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_TRUE(self):
            return self.getToken(SQLiteParser.K_TRUE, 0)

        def K_FALSE(self):
            return self.getToken(SQLiteParser.K_FALSE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (SQLiteParser.K_CURRENT_DATE - 52)) | (1 << (SQLiteParser.K_CURRENT_TIME - 52)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 52)) | (1 << (SQLiteParser.K_FALSE - 52)) | (1 << (SQLiteParser.K_NULL - 52)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (SQLiteParser.K_TRUE - 142)) | (1 << (SQLiteParser.STRING_LITERAL - 142)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 142)) | (1 << (SQLiteParser.BLOB_LITERAL - 142)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Error_messageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_module_argument)
        try:
            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1668
                self.column_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1669
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.STRING_LITERAL or _la==SQLiteParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SQLiteParser.K_ABORT - 25)) | (1 << (SQLiteParser.K_ACTION - 25)) | (1 << (SQLiteParser.K_ADD - 25)) | (1 << (SQLiteParser.K_AFTER - 25)) | (1 << (SQLiteParser.K_ALL - 25)) | (1 << (SQLiteParser.K_ALTER - 25)) | (1 << (SQLiteParser.K_ANALYZE - 25)) | (1 << (SQLiteParser.K_AND - 25)) | (1 << (SQLiteParser.K_AS - 25)) | (1 << (SQLiteParser.K_ASC - 25)) | (1 << (SQLiteParser.K_ATTACH - 25)) | (1 << (SQLiteParser.K_AUTOINCREMENT - 25)) | (1 << (SQLiteParser.K_BEFORE - 25)) | (1 << (SQLiteParser.K_BEGIN - 25)) | (1 << (SQLiteParser.K_BETWEEN - 25)) | (1 << (SQLiteParser.K_BY - 25)) | (1 << (SQLiteParser.K_CASCADE - 25)) | (1 << (SQLiteParser.K_CASE - 25)) | (1 << (SQLiteParser.K_CAST - 25)) | (1 << (SQLiteParser.K_CHECK - 25)) | (1 << (SQLiteParser.K_COLLATE - 25)) | (1 << (SQLiteParser.K_COLUMN - 25)) | (1 << (SQLiteParser.K_COMMIT - 25)) | (1 << (SQLiteParser.K_CONFLICT - 25)) | (1 << (SQLiteParser.K_CONSTRAINT - 25)) | (1 << (SQLiteParser.K_CREATE - 25)) | (1 << (SQLiteParser.K_CROSS - 25)) | (1 << (SQLiteParser.K_CURRENT_DATE - 25)) | (1 << (SQLiteParser.K_CURRENT_TIME - 25)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLiteParser.K_DATABASE - 25)) | (1 << (SQLiteParser.K_DEFAULT - 25)) | (1 << (SQLiteParser.K_DEFERRABLE - 25)) | (1 << (SQLiteParser.K_DEFERRED - 25)) | (1 << (SQLiteParser.K_DELETE - 25)) | (1 << (SQLiteParser.K_DESC - 25)) | (1 << (SQLiteParser.K_DETACH - 25)) | (1 << (SQLiteParser.K_DISTINCT - 25)) | (1 << (SQLiteParser.K_DROP - 25)) | (1 << (SQLiteParser.K_EACH - 25)) | (1 << (SQLiteParser.K_ELSE - 25)) | (1 << (SQLiteParser.K_END - 25)) | (1 << (SQLiteParser.K_ESCAPE - 25)) | (1 << (SQLiteParser.K_EXCEPT - 25)) | (1 << (SQLiteParser.K_EXCLUSIVE - 25)) | (1 << (SQLiteParser.K_EXISTS - 25)) | (1 << (SQLiteParser.K_EXPLAIN - 25)) | (1 << (SQLiteParser.K_FAIL - 25)) | (1 << (SQLiteParser.K_FOR - 25)) | (1 << (SQLiteParser.K_FOREIGN - 25)) | (1 << (SQLiteParser.K_FROM - 25)) | (1 << (SQLiteParser.K_FULL - 25)) | (1 << (SQLiteParser.K_GLOB - 25)) | (1 << (SQLiteParser.K_GROUP - 25)) | (1 << (SQLiteParser.K_HAVING - 25)) | (1 << (SQLiteParser.K_IF - 25)) | (1 << (SQLiteParser.K_IGNORE - 25)) | (1 << (SQLiteParser.K_IMMEDIATE - 25)) | (1 << (SQLiteParser.K_IN - 25)) | (1 << (SQLiteParser.K_INDEX - 25)) | (1 << (SQLiteParser.K_INDEXED - 25)) | (1 << (SQLiteParser.K_INITIALLY - 25)) | (1 << (SQLiteParser.K_INNER - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.K_INSERT - 89)) | (1 << (SQLiteParser.K_INSTEAD - 89)) | (1 << (SQLiteParser.K_INTERSECT - 89)) | (1 << (SQLiteParser.K_INTO - 89)) | (1 << (SQLiteParser.K_IS - 89)) | (1 << (SQLiteParser.K_ISNULL - 89)) | (1 << (SQLiteParser.K_JOIN - 89)) | (1 << (SQLiteParser.K_KEY - 89)) | (1 << (SQLiteParser.K_LEFT - 89)) | (1 << (SQLiteParser.K_LIKE - 89)) | (1 << (SQLiteParser.K_LIMIT - 89)) | (1 << (SQLiteParser.K_MATCH - 89)) | (1 << (SQLiteParser.K_NATURAL - 89)) | (1 << (SQLiteParser.K_NO - 89)) | (1 << (SQLiteParser.K_NOT - 89)) | (1 << (SQLiteParser.K_NOTNULL - 89)) | (1 << (SQLiteParser.K_NULL - 89)) | (1 << (SQLiteParser.K_OF - 89)) | (1 << (SQLiteParser.K_OFFSET - 89)) | (1 << (SQLiteParser.K_ON - 89)) | (1 << (SQLiteParser.K_OR - 89)) | (1 << (SQLiteParser.K_ORDER - 89)) | (1 << (SQLiteParser.K_OUTER - 89)) | (1 << (SQLiteParser.K_PLAN - 89)) | (1 << (SQLiteParser.K_PRAGMA - 89)) | (1 << (SQLiteParser.K_PRIMARY - 89)) | (1 << (SQLiteParser.K_QUERY - 89)) | (1 << (SQLiteParser.K_RAISE - 89)) | (1 << (SQLiteParser.K_RECURSIVE - 89)) | (1 << (SQLiteParser.K_REFERENCES - 89)) | (1 << (SQLiteParser.K_REGEXP - 89)) | (1 << (SQLiteParser.K_REINDEX - 89)) | (1 << (SQLiteParser.K_RELEASE - 89)) | (1 << (SQLiteParser.K_RENAME - 89)) | (1 << (SQLiteParser.K_REPLACE - 89)) | (1 << (SQLiteParser.K_RESTRICT - 89)) | (1 << (SQLiteParser.K_RIGHT - 89)) | (1 << (SQLiteParser.K_ROLLBACK - 89)) | (1 << (SQLiteParser.K_ROW - 89)) | (1 << (SQLiteParser.K_SAVEPOINT - 89)) | (1 << (SQLiteParser.K_SELECT - 89)) | (1 << (SQLiteParser.K_SET - 89)) | (1 << (SQLiteParser.K_TABLE - 89)) | (1 << (SQLiteParser.K_TEMP - 89)) | (1 << (SQLiteParser.K_TEMPORARY - 89)) | (1 << (SQLiteParser.K_THEN - 89)) | (1 << (SQLiteParser.K_TO - 89)) | (1 << (SQLiteParser.K_TRANSACTION - 89)) | (1 << (SQLiteParser.K_TRIGGER - 89)) | (1 << (SQLiteParser.K_UNION - 89)) | (1 << (SQLiteParser.K_UNIQUE - 89)) | (1 << (SQLiteParser.K_UPDATE - 89)) | (1 << (SQLiteParser.K_USING - 89)) | (1 << (SQLiteParser.K_VACUUM - 89)) | (1 << (SQLiteParser.K_VALUES - 89)) | (1 << (SQLiteParser.K_VIEW - 89)) | (1 << (SQLiteParser.K_VIRTUAL - 89)) | (1 << (SQLiteParser.K_WHEN - 89)) | (1 << (SQLiteParser.K_WHERE - 89)) | (1 << (SQLiteParser.K_WITH - 89)) | (1 << (SQLiteParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_database_name

        def enterRule(self, listener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = SQLiteParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_function_name"):
                listener.enterTable_function_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_function_name"):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.New_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNew_table_name"):
                listener.enterNew_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNew_table_name"):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Collation_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Trigger_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.View_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_table_alias)
        try:
            self.state = 1714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1710
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1711
                self.table_alias()
                self.state = 1712
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Transaction_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_any_name)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1718
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1721
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1722
                self.any_name()
                self.state = 1723
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[42] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




